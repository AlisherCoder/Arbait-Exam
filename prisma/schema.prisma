generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id      String @id @default(uuid())
  name_uz String @unique
  name_ru String @unique
  name_en String @unique
  Users   User[]
}

model User {
  id          String        @id @default(uuid())
  full_name   String
  phone       String        @unique
  password    String
  status      Boolean       @default(false)
  Region      Region?       @relation(fields: [region_id], references: [id], onDelete: SetNull)
  region_id   String?
  role        Role
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Company     Company?
  Session     Session[]
  Order       Order[]
  BacketItems BacketItems[]
}

model Company {
  id        String   @id @default(uuid())
  user_id   String?  @unique
  User      User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name      String
  inn       String // INN - Tax Identification Number
  mfo       String // MFO - Bank Code
  rs        String // R/S - Bank Account
  bank      String // Bank Name
  oked      String // OKED - Business Activity Code
  address   String // Company Address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id         String   @id @default(uuid())
  user_id    String
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ip_address String
  date       DateTime @default(now())
  device     Json
}

model Brand {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  Tool    Tool[]
}

model Size {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  Tool    Tool[]
}

model Capacity {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  Tool    Tool[]
}

model Tool {
  id             String        @id @default(uuid())
  name_uz        String
  name_ru        String
  name_en        String
  description_uz String
  description_ru String
  description_en String
  price          Float
  count          Int
  code           String        @unique
  brand_id       String?
  size_id        String?
  capacity_id    String?
  isActive       Boolean
  image          String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Brand          Brand?        @relation(fields: [brand_id], references: [id], onDelete: SetNull)
  Size           Size?         @relation(fields: [size_id], references: [id], onDelete: SetNull)
  Capacity       Capacity?     @relation(fields: [capacity_id], references: [id], onDelete: SetNull)
  Professions    Profession[]  @relation("ToolsProfessions")
  OrderItems     OrderItems[]
  BacketItems    BacketItems[]
}

model Level {
  id                String              @id @default(uuid())
  name_uz           String
  name_ru           String
  name_en           String
  MasterSkills      MasterSkills[]
  LevelsProfessions LevelsProfessions[]
  OrderItems        OrderItems[]
  BacketItems       BacketItems[]
}

model Profession {
  id                String              @id @default(uuid())
  name_uz           String
  name_ru           String
  name_en           String
  image             String
  isActive          Boolean
  Tools             Tool[]              @relation("ToolsProfessions")
  MasterSkills      MasterSkills[]
  LevelsProfessions LevelsProfessions[]
  OrderItems        OrderItems[]
  BacketItems       BacketItems[]
}

model LevelsProfessions {
  id             String     @id @default(uuid())
  profession_id  String
  Profession     Profession @relation(fields: [profession_id], references: [id], onDelete: Cascade)
  level_id       String?
  Level          Level?     @relation(fields: [level_id], references: [id], onDelete: SetNull)
  min_work_hours Int
  price_hourly   Float
  price_daily    Float
}

model Master {
  id             String          @id @default(uuid())
  full_name      String
  phone          String
  isActive       Boolean
  year           DateTime
  image          String
  passport_image String
  about          String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  MasterSkills   MasterSkills[]
  Orders         Order[]         @relation("OrderMasters")
  MasterRatings  MasterRatings[]
}

model MasterSkills {
  id             String      @id @default(uuid())
  min_work_hours Int
  price_hourly   Float
  price_daily    Float
  experience     Int
  level_id       String?
  Level          Level?      @relation(fields: [level_id], references: [id], onDelete: SetNull)
  profession_id  String?
  Profession     Profession? @relation(fields: [profession_id], references: [id], onDelete: SetNull)
  master_id      String
  Master         Master      @relation(fields: [master_id], references: [id], onDelete: Cascade)
}

model Order {
  id               String       @id @default(uuid())
  user_id          String
  User             User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  total_sum        Float
  location         Json
  address          String
  dete             DateTime
  payment_type     PaymentType  @default(CASH)
  paid             Boolean      @default(false)
  status           StatusOrder  @default(PENDING)
  with_delivery    Boolean
  comment_delivery String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Masters          Master[]     @relation("OrderMasters")
  OrderItems       OrderItems[]
}

model OrderItems {
  id            String      @id @default(uuid())
  order_id      String
  Order         Order       @relation(fields: [order_id], references: [id], onDelete: Cascade)
  tool_id       String?
  Tool          Tool?       @relation(fields: [tool_id], references: [id], onDelete: SetNull)
  profession_id String?
  Profession    Profession? @relation(fields: [profession_id], references: [id], onDelete: SetNull)
  Level         Level?      @relation(fields: [level_id], references: [id], onDelete: SetNull)
  level_id       String?
  count         Int
  measure       Measure
  time          Int
  total_sum     Float
}

model BacketItems {
  id            String      @id @default(uuid())
  user_id       String
  User          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  profession_id String?
  Pofession     Profession? @relation(fields: [profession_id], references: [id], onDelete: SetNull)
  tool_id       String?
  Tool          Tool?       @relation(fields: [tool_id], references: [id], onDelete: SetNull)
  level_id      String?
  Level         Level?      @relation(fields: [level_id], references: [id], onDelete: SetNull)
  count         Int
  measure       Measure
  time          Int
}

model Comment {
  id            String          @id @default(uuid())
  text          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  MasterRatings MasterRatings[]
}

model MasterRatings {
  id         String  @id @default(uuid())
  star       Float
  master_id  String
  Master     Master  @relation(fields: [master_id], references: [id], onDelete: Cascade)
  comment_id String
  Comment    Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
}

model Info {
  id    String   @id @default(uuid())
  email String
  links Json
  phone String[]
}

model Contact {
  id        String   @id @default(uuid())
  full_name String
  phone     String
  address   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Showcase {
  id             String @id @default(uuid())
  name_uz        String
  name_ru        String
  name_en        String
  description_uz String
  description_ru String
  description_en String
  image          String
  link           String
}

model Partners {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  image   String
}

enum Role {
  ADMIN
  SUPER_ADMIN
  VIEWER_ADMIN
  USER_FIZ
  USER_YUR
}

enum PaymentType {
  CLICK
  PAYME
  CASH
}

enum StatusOrder {
  ACTIVE
  INACTIVE
  PENDING
  FINISHED
}

enum Measure {
  HOUR
  DAY
}
