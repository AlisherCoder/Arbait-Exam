
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Size
 * 
 */
export type Size = $Result.DefaultSelection<Prisma.$SizePayload>
/**
 * Model Capacity
 * 
 */
export type Capacity = $Result.DefaultSelection<Prisma.$CapacityPayload>
/**
 * Model Tool
 * 
 */
export type Tool = $Result.DefaultSelection<Prisma.$ToolPayload>
/**
 * Model Level
 * 
 */
export type Level = $Result.DefaultSelection<Prisma.$LevelPayload>
/**
 * Model Profession
 * 
 */
export type Profession = $Result.DefaultSelection<Prisma.$ProfessionPayload>
/**
 * Model LevelsProfessions
 * 
 */
export type LevelsProfessions = $Result.DefaultSelection<Prisma.$LevelsProfessionsPayload>
/**
 * Model Master
 * 
 */
export type Master = $Result.DefaultSelection<Prisma.$MasterPayload>
/**
 * Model MasterSkills
 * 
 */
export type MasterSkills = $Result.DefaultSelection<Prisma.$MasterSkillsPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItems
 * 
 */
export type OrderItems = $Result.DefaultSelection<Prisma.$OrderItemsPayload>
/**
 * Model BacketItems
 * 
 */
export type BacketItems = $Result.DefaultSelection<Prisma.$BacketItemsPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model MasterRatings
 * 
 */
export type MasterRatings = $Result.DefaultSelection<Prisma.$MasterRatingsPayload>
/**
 * Model Info
 * 
 */
export type Info = $Result.DefaultSelection<Prisma.$InfoPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model FAQ
 * 
 */
export type FAQ = $Result.DefaultSelection<Prisma.$FAQPayload>
/**
 * Model Showcase
 * 
 */
export type Showcase = $Result.DefaultSelection<Prisma.$ShowcasePayload>
/**
 * Model Partners
 * 
 */
export type Partners = $Result.DefaultSelection<Prisma.$PartnersPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN',
  VIEWER_ADMIN: 'VIEWER_ADMIN',
  USER_FIZ: 'USER_FIZ',
  USER_YUR: 'USER_YUR'
};

export type Role = (typeof Role)[keyof typeof Role]


export const PaymentType: {
  CLICK: 'CLICK',
  PAYME: 'PAYME',
  CASH: 'CASH'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const StatusOrder: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING',
  FINISHED: 'FINISHED'
};

export type StatusOrder = (typeof StatusOrder)[keyof typeof StatusOrder]


export const Measure: {
  HOUR: 'HOUR',
  DAY: 'DAY'
};

export type Measure = (typeof Measure)[keyof typeof Measure]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type StatusOrder = $Enums.StatusOrder

export const StatusOrder: typeof $Enums.StatusOrder

export type Measure = $Enums.Measure

export const Measure: typeof $Enums.Measure

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Regions
 * const regions = await prisma.region.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Regions
   * const regions = await prisma.region.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.size`: Exposes CRUD operations for the **Size** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sizes
    * const sizes = await prisma.size.findMany()
    * ```
    */
  get size(): Prisma.SizeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.capacity`: Exposes CRUD operations for the **Capacity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Capacities
    * const capacities = await prisma.capacity.findMany()
    * ```
    */
  get capacity(): Prisma.CapacityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tool`: Exposes CRUD operations for the **Tool** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tools
    * const tools = await prisma.tool.findMany()
    * ```
    */
  get tool(): Prisma.ToolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.level`: Exposes CRUD operations for the **Level** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Levels
    * const levels = await prisma.level.findMany()
    * ```
    */
  get level(): Prisma.LevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profession`: Exposes CRUD operations for the **Profession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professions
    * const professions = await prisma.profession.findMany()
    * ```
    */
  get profession(): Prisma.ProfessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.levelsProfessions`: Exposes CRUD operations for the **LevelsProfessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LevelsProfessions
    * const levelsProfessions = await prisma.levelsProfessions.findMany()
    * ```
    */
  get levelsProfessions(): Prisma.LevelsProfessionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.master`: Exposes CRUD operations for the **Master** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Masters
    * const masters = await prisma.master.findMany()
    * ```
    */
  get master(): Prisma.MasterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.masterSkills`: Exposes CRUD operations for the **MasterSkills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterSkills
    * const masterSkills = await prisma.masterSkills.findMany()
    * ```
    */
  get masterSkills(): Prisma.MasterSkillsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItems`: Exposes CRUD operations for the **OrderItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItems.findMany()
    * ```
    */
  get orderItems(): Prisma.OrderItemsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.backetItems`: Exposes CRUD operations for the **BacketItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BacketItems
    * const backetItems = await prisma.backetItems.findMany()
    * ```
    */
  get backetItems(): Prisma.BacketItemsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.masterRatings`: Exposes CRUD operations for the **MasterRatings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterRatings
    * const masterRatings = await prisma.masterRatings.findMany()
    * ```
    */
  get masterRatings(): Prisma.MasterRatingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.info`: Exposes CRUD operations for the **Info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Infos
    * const infos = await prisma.info.findMany()
    * ```
    */
  get info(): Prisma.InfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fAQ`: Exposes CRUD operations for the **FAQ** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FAQS
    * const fAQS = await prisma.fAQ.findMany()
    * ```
    */
  get fAQ(): Prisma.FAQDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.showcase`: Exposes CRUD operations for the **Showcase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Showcases
    * const showcases = await prisma.showcase.findMany()
    * ```
    */
  get showcase(): Prisma.ShowcaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partners`: Exposes CRUD operations for the **Partners** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partners
    * const partners = await prisma.partners.findMany()
    * ```
    */
  get partners(): Prisma.PartnersDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Region: 'Region',
    User: 'User',
    Company: 'Company',
    Session: 'Session',
    Brand: 'Brand',
    Size: 'Size',
    Capacity: 'Capacity',
    Tool: 'Tool',
    Level: 'Level',
    Profession: 'Profession',
    LevelsProfessions: 'LevelsProfessions',
    Master: 'Master',
    MasterSkills: 'MasterSkills',
    Order: 'Order',
    OrderItems: 'OrderItems',
    BacketItems: 'BacketItems',
    Comment: 'Comment',
    MasterRatings: 'MasterRatings',
    Info: 'Info',
    Contact: 'Contact',
    FAQ: 'FAQ',
    Showcase: 'Showcase',
    Partners: 'Partners'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "region" | "user" | "company" | "session" | "brand" | "size" | "capacity" | "tool" | "level" | "profession" | "levelsProfessions" | "master" | "masterSkills" | "order" | "orderItems" | "backetItems" | "comment" | "masterRatings" | "info" | "contact" | "fAQ" | "showcase" | "partners"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BrandUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Size: {
        payload: Prisma.$SizePayload<ExtArgs>
        fields: Prisma.SizeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          findFirst: {
            args: Prisma.SizeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          findMany: {
            args: Prisma.SizeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          create: {
            args: Prisma.SizeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          createMany: {
            args: Prisma.SizeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SizeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          delete: {
            args: Prisma.SizeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          update: {
            args: Prisma.SizeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          deleteMany: {
            args: Prisma.SizeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SizeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          upsert: {
            args: Prisma.SizeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          aggregate: {
            args: Prisma.SizeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSize>
          }
          groupBy: {
            args: Prisma.SizeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SizeCountArgs<ExtArgs>
            result: $Utils.Optional<SizeCountAggregateOutputType> | number
          }
        }
      }
      Capacity: {
        payload: Prisma.$CapacityPayload<ExtArgs>
        fields: Prisma.CapacityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CapacityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CapacityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          findFirst: {
            args: Prisma.CapacityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CapacityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          findMany: {
            args: Prisma.CapacityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>[]
          }
          create: {
            args: Prisma.CapacityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          createMany: {
            args: Prisma.CapacityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CapacityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>[]
          }
          delete: {
            args: Prisma.CapacityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          update: {
            args: Prisma.CapacityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          deleteMany: {
            args: Prisma.CapacityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CapacityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CapacityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>[]
          }
          upsert: {
            args: Prisma.CapacityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          aggregate: {
            args: Prisma.CapacityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCapacity>
          }
          groupBy: {
            args: Prisma.CapacityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CapacityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CapacityCountArgs<ExtArgs>
            result: $Utils.Optional<CapacityCountAggregateOutputType> | number
          }
        }
      }
      Tool: {
        payload: Prisma.$ToolPayload<ExtArgs>
        fields: Prisma.ToolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ToolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ToolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          findFirst: {
            args: Prisma.ToolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ToolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          findMany: {
            args: Prisma.ToolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>[]
          }
          create: {
            args: Prisma.ToolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          createMany: {
            args: Prisma.ToolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ToolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>[]
          }
          delete: {
            args: Prisma.ToolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          update: {
            args: Prisma.ToolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          deleteMany: {
            args: Prisma.ToolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ToolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ToolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>[]
          }
          upsert: {
            args: Prisma.ToolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          aggregate: {
            args: Prisma.ToolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTool>
          }
          groupBy: {
            args: Prisma.ToolGroupByArgs<ExtArgs>
            result: $Utils.Optional<ToolGroupByOutputType>[]
          }
          count: {
            args: Prisma.ToolCountArgs<ExtArgs>
            result: $Utils.Optional<ToolCountAggregateOutputType> | number
          }
        }
      }
      Level: {
        payload: Prisma.$LevelPayload<ExtArgs>
        fields: Prisma.LevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          findFirst: {
            args: Prisma.LevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          findMany: {
            args: Prisma.LevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          create: {
            args: Prisma.LevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          createMany: {
            args: Prisma.LevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          delete: {
            args: Prisma.LevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          update: {
            args: Prisma.LevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          deleteMany: {
            args: Prisma.LevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          upsert: {
            args: Prisma.LevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          aggregate: {
            args: Prisma.LevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLevel>
          }
          groupBy: {
            args: Prisma.LevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<LevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.LevelCountArgs<ExtArgs>
            result: $Utils.Optional<LevelCountAggregateOutputType> | number
          }
        }
      }
      Profession: {
        payload: Prisma.$ProfessionPayload<ExtArgs>
        fields: Prisma.ProfessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          findFirst: {
            args: Prisma.ProfessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          findMany: {
            args: Prisma.ProfessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          create: {
            args: Prisma.ProfessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          createMany: {
            args: Prisma.ProfessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          delete: {
            args: Prisma.ProfessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          update: {
            args: Prisma.ProfessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          upsert: {
            args: Prisma.ProfessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          aggregate: {
            args: Prisma.ProfessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfession>
          }
          groupBy: {
            args: Prisma.ProfessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionCountAggregateOutputType> | number
          }
        }
      }
      LevelsProfessions: {
        payload: Prisma.$LevelsProfessionsPayload<ExtArgs>
        fields: Prisma.LevelsProfessionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LevelsProfessionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LevelsProfessionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload>
          }
          findFirst: {
            args: Prisma.LevelsProfessionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LevelsProfessionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload>
          }
          findMany: {
            args: Prisma.LevelsProfessionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload>[]
          }
          create: {
            args: Prisma.LevelsProfessionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload>
          }
          createMany: {
            args: Prisma.LevelsProfessionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LevelsProfessionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload>[]
          }
          delete: {
            args: Prisma.LevelsProfessionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload>
          }
          update: {
            args: Prisma.LevelsProfessionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload>
          }
          deleteMany: {
            args: Prisma.LevelsProfessionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LevelsProfessionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LevelsProfessionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload>[]
          }
          upsert: {
            args: Prisma.LevelsProfessionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelsProfessionsPayload>
          }
          aggregate: {
            args: Prisma.LevelsProfessionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLevelsProfessions>
          }
          groupBy: {
            args: Prisma.LevelsProfessionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LevelsProfessionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LevelsProfessionsCountArgs<ExtArgs>
            result: $Utils.Optional<LevelsProfessionsCountAggregateOutputType> | number
          }
        }
      }
      Master: {
        payload: Prisma.$MasterPayload<ExtArgs>
        fields: Prisma.MasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          findFirst: {
            args: Prisma.MasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          findMany: {
            args: Prisma.MasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          create: {
            args: Prisma.MasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          createMany: {
            args: Prisma.MasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          delete: {
            args: Prisma.MasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          update: {
            args: Prisma.MasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          deleteMany: {
            args: Prisma.MasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          upsert: {
            args: Prisma.MasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          aggregate: {
            args: Prisma.MasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaster>
          }
          groupBy: {
            args: Prisma.MasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterCountArgs<ExtArgs>
            result: $Utils.Optional<MasterCountAggregateOutputType> | number
          }
        }
      }
      MasterSkills: {
        payload: Prisma.$MasterSkillsPayload<ExtArgs>
        fields: Prisma.MasterSkillsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterSkillsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterSkillsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload>
          }
          findFirst: {
            args: Prisma.MasterSkillsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterSkillsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload>
          }
          findMany: {
            args: Prisma.MasterSkillsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload>[]
          }
          create: {
            args: Prisma.MasterSkillsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload>
          }
          createMany: {
            args: Prisma.MasterSkillsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterSkillsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload>[]
          }
          delete: {
            args: Prisma.MasterSkillsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload>
          }
          update: {
            args: Prisma.MasterSkillsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload>
          }
          deleteMany: {
            args: Prisma.MasterSkillsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterSkillsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterSkillsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload>[]
          }
          upsert: {
            args: Prisma.MasterSkillsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSkillsPayload>
          }
          aggregate: {
            args: Prisma.MasterSkillsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterSkills>
          }
          groupBy: {
            args: Prisma.MasterSkillsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterSkillsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterSkillsCountArgs<ExtArgs>
            result: $Utils.Optional<MasterSkillsCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItems: {
        payload: Prisma.$OrderItemsPayload<ExtArgs>
        fields: Prisma.OrderItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload>
          }
          findFirst: {
            args: Prisma.OrderItemsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload>
          }
          findMany: {
            args: Prisma.OrderItemsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload>[]
          }
          create: {
            args: Prisma.OrderItemsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload>
          }
          createMany: {
            args: Prisma.OrderItemsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderItemsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload>[]
          }
          delete: {
            args: Prisma.OrderItemsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload>
          }
          update: {
            args: Prisma.OrderItemsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderItemsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload>[]
          }
          upsert: {
            args: Prisma.OrderItemsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemsPayload>
          }
          aggregate: {
            args: Prisma.OrderItemsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItems>
          }
          groupBy: {
            args: Prisma.OrderItemsGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemsCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemsCountAggregateOutputType> | number
          }
        }
      }
      BacketItems: {
        payload: Prisma.$BacketItemsPayload<ExtArgs>
        fields: Prisma.BacketItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BacketItemsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BacketItemsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload>
          }
          findFirst: {
            args: Prisma.BacketItemsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BacketItemsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload>
          }
          findMany: {
            args: Prisma.BacketItemsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload>[]
          }
          create: {
            args: Prisma.BacketItemsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload>
          }
          createMany: {
            args: Prisma.BacketItemsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BacketItemsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload>[]
          }
          delete: {
            args: Prisma.BacketItemsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload>
          }
          update: {
            args: Prisma.BacketItemsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload>
          }
          deleteMany: {
            args: Prisma.BacketItemsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BacketItemsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BacketItemsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload>[]
          }
          upsert: {
            args: Prisma.BacketItemsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BacketItemsPayload>
          }
          aggregate: {
            args: Prisma.BacketItemsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBacketItems>
          }
          groupBy: {
            args: Prisma.BacketItemsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BacketItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BacketItemsCountArgs<ExtArgs>
            result: $Utils.Optional<BacketItemsCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      MasterRatings: {
        payload: Prisma.$MasterRatingsPayload<ExtArgs>
        fields: Prisma.MasterRatingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterRatingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterRatingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          findFirst: {
            args: Prisma.MasterRatingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterRatingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          findMany: {
            args: Prisma.MasterRatingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>[]
          }
          create: {
            args: Prisma.MasterRatingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          createMany: {
            args: Prisma.MasterRatingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterRatingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>[]
          }
          delete: {
            args: Prisma.MasterRatingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          update: {
            args: Prisma.MasterRatingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          deleteMany: {
            args: Prisma.MasterRatingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterRatingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterRatingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>[]
          }
          upsert: {
            args: Prisma.MasterRatingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          aggregate: {
            args: Prisma.MasterRatingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterRatings>
          }
          groupBy: {
            args: Prisma.MasterRatingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterRatingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterRatingsCountArgs<ExtArgs>
            result: $Utils.Optional<MasterRatingsCountAggregateOutputType> | number
          }
        }
      }
      Info: {
        payload: Prisma.$InfoPayload<ExtArgs>
        fields: Prisma.InfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          findFirst: {
            args: Prisma.InfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          findMany: {
            args: Prisma.InfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>[]
          }
          create: {
            args: Prisma.InfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          createMany: {
            args: Prisma.InfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>[]
          }
          delete: {
            args: Prisma.InfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          update: {
            args: Prisma.InfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          deleteMany: {
            args: Prisma.InfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>[]
          }
          upsert: {
            args: Prisma.InfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          aggregate: {
            args: Prisma.InfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInfo>
          }
          groupBy: {
            args: Prisma.InfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<InfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.InfoCountArgs<ExtArgs>
            result: $Utils.Optional<InfoCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      FAQ: {
        payload: Prisma.$FAQPayload<ExtArgs>
        fields: Prisma.FAQFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FAQFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FAQFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findFirst: {
            args: Prisma.FAQFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FAQFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findMany: {
            args: Prisma.FAQFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          create: {
            args: Prisma.FAQCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          createMany: {
            args: Prisma.FAQCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FAQCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          delete: {
            args: Prisma.FAQDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          update: {
            args: Prisma.FAQUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          deleteMany: {
            args: Prisma.FAQDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FAQUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FAQUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          upsert: {
            args: Prisma.FAQUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          aggregate: {
            args: Prisma.FAQAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFAQ>
          }
          groupBy: {
            args: Prisma.FAQGroupByArgs<ExtArgs>
            result: $Utils.Optional<FAQGroupByOutputType>[]
          }
          count: {
            args: Prisma.FAQCountArgs<ExtArgs>
            result: $Utils.Optional<FAQCountAggregateOutputType> | number
          }
        }
      }
      Showcase: {
        payload: Prisma.$ShowcasePayload<ExtArgs>
        fields: Prisma.ShowcaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShowcaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShowcaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          findFirst: {
            args: Prisma.ShowcaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShowcaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          findMany: {
            args: Prisma.ShowcaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>[]
          }
          create: {
            args: Prisma.ShowcaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          createMany: {
            args: Prisma.ShowcaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShowcaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>[]
          }
          delete: {
            args: Prisma.ShowcaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          update: {
            args: Prisma.ShowcaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          deleteMany: {
            args: Prisma.ShowcaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShowcaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShowcaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>[]
          }
          upsert: {
            args: Prisma.ShowcaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          aggregate: {
            args: Prisma.ShowcaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShowcase>
          }
          groupBy: {
            args: Prisma.ShowcaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShowcaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShowcaseCountArgs<ExtArgs>
            result: $Utils.Optional<ShowcaseCountAggregateOutputType> | number
          }
        }
      }
      Partners: {
        payload: Prisma.$PartnersPayload<ExtArgs>
        fields: Prisma.PartnersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartnersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartnersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          findFirst: {
            args: Prisma.PartnersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartnersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          findMany: {
            args: Prisma.PartnersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>[]
          }
          create: {
            args: Prisma.PartnersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          createMany: {
            args: Prisma.PartnersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartnersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>[]
          }
          delete: {
            args: Prisma.PartnersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          update: {
            args: Prisma.PartnersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          deleteMany: {
            args: Prisma.PartnersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartnersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartnersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>[]
          }
          upsert: {
            args: Prisma.PartnersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          aggregate: {
            args: Prisma.PartnersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartners>
          }
          groupBy: {
            args: Prisma.PartnersGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartnersGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartnersCountArgs<ExtArgs>
            result: $Utils.Optional<PartnersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    region?: RegionOmit
    user?: UserOmit
    company?: CompanyOmit
    session?: SessionOmit
    brand?: BrandOmit
    size?: SizeOmit
    capacity?: CapacityOmit
    tool?: ToolOmit
    level?: LevelOmit
    profession?: ProfessionOmit
    levelsProfessions?: LevelsProfessionsOmit
    master?: MasterOmit
    masterSkills?: MasterSkillsOmit
    order?: OrderOmit
    orderItems?: OrderItemsOmit
    backetItems?: BacketItemsOmit
    comment?: CommentOmit
    masterRatings?: MasterRatingsOmit
    info?: InfoOmit
    contact?: ContactOmit
    fAQ?: FAQOmit
    showcase?: ShowcaseOmit
    partners?: PartnersOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    Users: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | RegionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Session: number
    Order: number
    BacketItems: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Session?: boolean | UserCountOutputTypeCountSessionArgs
    Order?: boolean | UserCountOutputTypeCountOrderArgs
    BacketItems?: boolean | UserCountOutputTypeCountBacketItemsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBacketItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BacketItemsWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    Tool: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tool?: boolean | BrandCountOutputTypeCountToolArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountToolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
  }


  /**
   * Count Type SizeCountOutputType
   */

  export type SizeCountOutputType = {
    Tool: number
  }

  export type SizeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tool?: boolean | SizeCountOutputTypeCountToolArgs
  }

  // Custom InputTypes
  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeCountOutputType
     */
    select?: SizeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeCountToolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
  }


  /**
   * Count Type CapacityCountOutputType
   */

  export type CapacityCountOutputType = {
    Tool: number
  }

  export type CapacityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tool?: boolean | CapacityCountOutputTypeCountToolArgs
  }

  // Custom InputTypes
  /**
   * CapacityCountOutputType without action
   */
  export type CapacityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CapacityCountOutputType
     */
    select?: CapacityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CapacityCountOutputType without action
   */
  export type CapacityCountOutputTypeCountToolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
  }


  /**
   * Count Type ToolCountOutputType
   */

  export type ToolCountOutputType = {
    Professions: number
    OrderItems: number
    BacketItems: number
  }

  export type ToolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Professions?: boolean | ToolCountOutputTypeCountProfessionsArgs
    OrderItems?: boolean | ToolCountOutputTypeCountOrderItemsArgs
    BacketItems?: boolean | ToolCountOutputTypeCountBacketItemsArgs
  }

  // Custom InputTypes
  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToolCountOutputType
     */
    select?: ToolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeCountProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionWhereInput
  }

  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemsWhereInput
  }

  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeCountBacketItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BacketItemsWhereInput
  }


  /**
   * Count Type LevelCountOutputType
   */

  export type LevelCountOutputType = {
    MasterSkills: number
    LevelsProfessions: number
    OrderItems: number
    BacketItems: number
  }

  export type LevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterSkills?: boolean | LevelCountOutputTypeCountMasterSkillsArgs
    LevelsProfessions?: boolean | LevelCountOutputTypeCountLevelsProfessionsArgs
    OrderItems?: boolean | LevelCountOutputTypeCountOrderItemsArgs
    BacketItems?: boolean | LevelCountOutputTypeCountBacketItemsArgs
  }

  // Custom InputTypes
  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelCountOutputType
     */
    select?: LevelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountMasterSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterSkillsWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountLevelsProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelsProfessionsWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemsWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountBacketItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BacketItemsWhereInput
  }


  /**
   * Count Type ProfessionCountOutputType
   */

  export type ProfessionCountOutputType = {
    Tools: number
    MasterSkills: number
    LevelsProfessions: number
    OrderItems: number
    BacketItems: number
  }

  export type ProfessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tools?: boolean | ProfessionCountOutputTypeCountToolsArgs
    MasterSkills?: boolean | ProfessionCountOutputTypeCountMasterSkillsArgs
    LevelsProfessions?: boolean | ProfessionCountOutputTypeCountLevelsProfessionsArgs
    OrderItems?: boolean | ProfessionCountOutputTypeCountOrderItemsArgs
    BacketItems?: boolean | ProfessionCountOutputTypeCountBacketItemsArgs
  }

  // Custom InputTypes
  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionCountOutputType
     */
    select?: ProfessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountMasterSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterSkillsWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountLevelsProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelsProfessionsWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemsWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountBacketItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BacketItemsWhereInput
  }


  /**
   * Count Type MasterCountOutputType
   */

  export type MasterCountOutputType = {
    MasterSkills: number
    Orders: number
    MasterRatings: number
  }

  export type MasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterSkills?: boolean | MasterCountOutputTypeCountMasterSkillsArgs
    Orders?: boolean | MasterCountOutputTypeCountOrdersArgs
    MasterRatings?: boolean | MasterCountOutputTypeCountMasterRatingsArgs
  }

  // Custom InputTypes
  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterCountOutputType
     */
    select?: MasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountMasterSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterSkillsWhereInput
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountMasterRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterRatingsWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    Masters: number
    OrderItems: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Masters?: boolean | OrderCountOutputTypeCountMastersArgs
    OrderItems?: boolean | OrderCountOutputTypeCountOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountMastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemsWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    MasterRatings: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterRatings?: boolean | CommentCountOutputTypeCountMasterRatingsArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountMasterRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterRatingsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionMinAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
  }

  export type RegionMaxAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    name_uz: number
    name_ru: number
    name_en: number
    _all: number
  }


  export type RegionMinAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    id: string
    name_uz: string
    name_ru: string
    name_en: string
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    Users?: boolean | Region$UsersArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }

  export type RegionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name_uz" | "name_ru" | "name_en", ExtArgs["result"]["region"]>
  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | Region$UsersArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RegionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      Users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name_uz: string
      name_ru: string
      name_en: string
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Regions and returns the data saved in the database.
     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions and returns the data updated in the database.
     * @param {RegionUpdateManyAndReturnArgs} args - Arguments to update many Regions.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegionUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Users<T extends Region$UsersArgs<ExtArgs> = {}>(args?: Subset<T, Region$UsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */
  interface RegionFieldRefs {
    readonly id: FieldRef<"Region", 'String'>
    readonly name_uz: FieldRef<"Region", 'String'>
    readonly name_ru: FieldRef<"Region", 'String'>
    readonly name_en: FieldRef<"Region", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region createManyAndReturn
   */
  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region updateManyAndReturn
   */
  export type RegionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to delete.
     */
    limit?: number
  }

  /**
   * Region.Users
   */
  export type Region$UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    full_name: string | null
    phone: string | null
    password: string | null
    status: boolean | null
    region_id: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    full_name: string | null
    phone: string | null
    password: string | null
    status: boolean | null
    region_id: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    full_name: number
    phone: number
    password: number
    status: number
    region_id: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    password?: true
    status?: true
    region_id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    password?: true
    status?: true
    region_id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    password?: true
    status?: true
    region_id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    full_name: string
    phone: string
    password: string
    status: boolean
    region_id: string | null
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    full_name?: boolean
    phone?: boolean
    password?: boolean
    status?: boolean
    region_id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Region?: boolean | User$RegionArgs<ExtArgs>
    Company?: boolean | User$CompanyArgs<ExtArgs>
    Session?: boolean | User$SessionArgs<ExtArgs>
    Order?: boolean | User$OrderArgs<ExtArgs>
    BacketItems?: boolean | User$BacketItemsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    full_name?: boolean
    phone?: boolean
    password?: boolean
    status?: boolean
    region_id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Region?: boolean | User$RegionArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    full_name?: boolean
    phone?: boolean
    password?: boolean
    status?: boolean
    region_id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Region?: boolean | User$RegionArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    full_name?: boolean
    phone?: boolean
    password?: boolean
    status?: boolean
    region_id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "full_name" | "phone" | "password" | "status" | "region_id" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Region?: boolean | User$RegionArgs<ExtArgs>
    Company?: boolean | User$CompanyArgs<ExtArgs>
    Session?: boolean | User$SessionArgs<ExtArgs>
    Order?: boolean | User$OrderArgs<ExtArgs>
    BacketItems?: boolean | User$BacketItemsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Region?: boolean | User$RegionArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Region?: boolean | User$RegionArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Region: Prisma.$RegionPayload<ExtArgs> | null
      Company: Prisma.$CompanyPayload<ExtArgs> | null
      Session: Prisma.$SessionPayload<ExtArgs>[]
      Order: Prisma.$OrderPayload<ExtArgs>[]
      BacketItems: Prisma.$BacketItemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      full_name: string
      phone: string
      password: string
      status: boolean
      region_id: string | null
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Region<T extends User$RegionArgs<ExtArgs> = {}>(args?: Subset<T, User$RegionArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Company<T extends User$CompanyArgs<ExtArgs> = {}>(args?: Subset<T, User$CompanyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Session<T extends User$SessionArgs<ExtArgs> = {}>(args?: Subset<T, User$SessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Order<T extends User$OrderArgs<ExtArgs> = {}>(args?: Subset<T, User$OrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BacketItems<T extends User$BacketItemsArgs<ExtArgs> = {}>(args?: Subset<T, User$BacketItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly full_name: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'Boolean'>
    readonly region_id: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.Region
   */
  export type User$RegionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    where?: RegionWhereInput
  }

  /**
   * User.Company
   */
  export type User$CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * User.Session
   */
  export type User$SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.Order
   */
  export type User$OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.BacketItems
   */
  export type User$BacketItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    where?: BacketItemsWhereInput
    orderBy?: BacketItemsOrderByWithRelationInput | BacketItemsOrderByWithRelationInput[]
    cursor?: BacketItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BacketItemsScalarFieldEnum | BacketItemsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    name: string | null
    inn: string | null
    mfo: string | null
    rs: string | null
    bank: string | null
    oked: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    name: string | null
    inn: string | null
    mfo: string | null
    rs: string | null
    bank: string | null
    oked: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    user_id: number
    name: number
    inn: number
    mfo: number
    rs: number
    bank: number
    oked: number
    address: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    inn?: true
    mfo?: true
    rs?: true
    bank?: true
    oked?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    inn?: true
    mfo?: true
    rs?: true
    bank?: true
    oked?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    inn?: true
    mfo?: true
    rs?: true
    bank?: true
    oked?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    user_id: string | null
    name: string
    inn: string
    mfo: string
    rs: string
    bank: string
    oked: string
    address: string
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    inn?: boolean
    mfo?: boolean
    rs?: boolean
    bank?: boolean
    oked?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | Company$UserArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    inn?: boolean
    mfo?: boolean
    rs?: boolean
    bank?: boolean
    oked?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | Company$UserArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    inn?: boolean
    mfo?: boolean
    rs?: boolean
    bank?: boolean
    oked?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | Company$UserArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    user_id?: boolean
    name?: boolean
    inn?: boolean
    mfo?: boolean
    rs?: boolean
    bank?: boolean
    oked?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "name" | "inn" | "mfo" | "rs" | "bank" | "oked" | "address" | "createdAt" | "updatedAt", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Company$UserArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Company$UserArgs<ExtArgs>
  }
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Company$UserArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string | null
      name: string
      inn: string
      mfo: string
      rs: string
      bank: string
      oked: string
      address: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends Company$UserArgs<ExtArgs> = {}>(args?: Subset<T, Company$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly user_id: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly inn: FieldRef<"Company", 'String'>
    readonly mfo: FieldRef<"Company", 'String'>
    readonly rs: FieldRef<"Company", 'String'>
    readonly bank: FieldRef<"Company", 'String'>
    readonly oked: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company.User
   */
  export type Company$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    ip_address: string | null
    date: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    ip_address: string | null
    date: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    user_id: number
    ip_address: number
    date: number
    device: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    user_id?: true
    ip_address?: true
    date?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    user_id?: true
    ip_address?: true
    date?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    user_id?: true
    ip_address?: true
    date?: true
    device?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    user_id: string
    ip_address: string
    date: Date
    device: JsonValue
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    ip_address?: boolean
    date?: boolean
    device?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    ip_address?: boolean
    date?: boolean
    device?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    ip_address?: boolean
    date?: boolean
    device?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    user_id?: boolean
    ip_address?: boolean
    date?: boolean
    device?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "ip_address" | "date" | "device", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      ip_address: string
      date: Date
      device: Prisma.JsonValue
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly user_id: FieldRef<"Session", 'String'>
    readonly ip_address: FieldRef<"Session", 'String'>
    readonly date: FieldRef<"Session", 'DateTime'>
    readonly device: FieldRef<"Session", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandMinAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
  }

  export type BrandMaxAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    name_uz: number
    name_ru: number
    name_en: number
    _all: number
  }


  export type BrandMinAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: string
    name_uz: string
    name_ru: string
    name_en: string
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    Tool?: boolean | Brand$ToolArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectScalar = {
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name_uz" | "name_ru" | "name_en", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tool?: boolean | Brand$ToolArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BrandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BrandIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      Tool: Prisma.$ToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name_uz: string
      name_ru: string
      name_en: string
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brands and returns the data saved in the database.
     * @param {BrandCreateManyAndReturnArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrandCreateManyAndReturnArgs>(args?: SelectSubset<T, BrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands and returns the data updated in the database.
     * @param {BrandUpdateManyAndReturnArgs} args - Arguments to update many Brands.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BrandUpdateManyAndReturnArgs>(args: SelectSubset<T, BrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Tool<T extends Brand$ToolArgs<ExtArgs> = {}>(args?: Subset<T, Brand$ToolArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'String'>
    readonly name_uz: FieldRef<"Brand", 'String'>
    readonly name_ru: FieldRef<"Brand", 'String'>
    readonly name_en: FieldRef<"Brand", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand createManyAndReturn
   */
  export type BrandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand updateManyAndReturn
   */
  export type BrandUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.Tool
   */
  export type Brand$ToolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    cursor?: ToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Size
   */

  export type AggregateSize = {
    _count: SizeCountAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  export type SizeMinAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
  }

  export type SizeMaxAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
  }

  export type SizeCountAggregateOutputType = {
    id: number
    name_uz: number
    name_ru: number
    name_en: number
    _all: number
  }


  export type SizeMinAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
  }

  export type SizeMaxAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
  }

  export type SizeCountAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    _all?: true
  }

  export type SizeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Size to aggregate.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sizes
    **/
    _count?: true | SizeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeMaxAggregateInputType
  }

  export type GetSizeAggregateType<T extends SizeAggregateArgs> = {
        [P in keyof T & keyof AggregateSize]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSize[P]>
      : GetScalarType<T[P], AggregateSize[P]>
  }




  export type SizeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeWhereInput
    orderBy?: SizeOrderByWithAggregationInput | SizeOrderByWithAggregationInput[]
    by: SizeScalarFieldEnum[] | SizeScalarFieldEnum
    having?: SizeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeCountAggregateInputType | true
    _min?: SizeMinAggregateInputType
    _max?: SizeMaxAggregateInputType
  }

  export type SizeGroupByOutputType = {
    id: string
    name_uz: string
    name_ru: string
    name_en: string
    _count: SizeCountAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  type GetSizeGroupByPayload<T extends SizeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeGroupByOutputType[P]>
            : GetScalarType<T[P], SizeGroupByOutputType[P]>
        }
      >
    >


  export type SizeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    Tool?: boolean | Size$ToolArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["size"]>

  export type SizeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }, ExtArgs["result"]["size"]>

  export type SizeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }, ExtArgs["result"]["size"]>

  export type SizeSelectScalar = {
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }

  export type SizeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name_uz" | "name_ru" | "name_en", ExtArgs["result"]["size"]>
  export type SizeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tool?: boolean | Size$ToolArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SizeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SizeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SizePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Size"
    objects: {
      Tool: Prisma.$ToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name_uz: string
      name_ru: string
      name_en: string
    }, ExtArgs["result"]["size"]>
    composites: {}
  }

  type SizeGetPayload<S extends boolean | null | undefined | SizeDefaultArgs> = $Result.GetResult<Prisma.$SizePayload, S>

  type SizeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeCountAggregateInputType | true
    }

  export interface SizeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Size'], meta: { name: 'Size' } }
    /**
     * Find zero or one Size that matches the filter.
     * @param {SizeFindUniqueArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeFindUniqueArgs>(args: SelectSubset<T, SizeFindUniqueArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Size that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeFindUniqueOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Size that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindFirstArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeFindFirstArgs>(args?: SelectSubset<T, SizeFindFirstArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Size that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindFirstOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sizes
     * const sizes = await prisma.size.findMany()
     * 
     * // Get first 10 Sizes
     * const sizes = await prisma.size.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeWithIdOnly = await prisma.size.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeFindManyArgs>(args?: SelectSubset<T, SizeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Size.
     * @param {SizeCreateArgs} args - Arguments to create a Size.
     * @example
     * // Create one Size
     * const Size = await prisma.size.create({
     *   data: {
     *     // ... data to create a Size
     *   }
     * })
     * 
     */
    create<T extends SizeCreateArgs>(args: SelectSubset<T, SizeCreateArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sizes.
     * @param {SizeCreateManyArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const size = await prisma.size.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeCreateManyArgs>(args?: SelectSubset<T, SizeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sizes and returns the data saved in the database.
     * @param {SizeCreateManyAndReturnArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const size = await prisma.size.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sizes and only return the `id`
     * const sizeWithIdOnly = await prisma.size.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SizeCreateManyAndReturnArgs>(args?: SelectSubset<T, SizeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Size.
     * @param {SizeDeleteArgs} args - Arguments to delete one Size.
     * @example
     * // Delete one Size
     * const Size = await prisma.size.delete({
     *   where: {
     *     // ... filter to delete one Size
     *   }
     * })
     * 
     */
    delete<T extends SizeDeleteArgs>(args: SelectSubset<T, SizeDeleteArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Size.
     * @param {SizeUpdateArgs} args - Arguments to update one Size.
     * @example
     * // Update one Size
     * const size = await prisma.size.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeUpdateArgs>(args: SelectSubset<T, SizeUpdateArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sizes.
     * @param {SizeDeleteManyArgs} args - Arguments to filter Sizes to delete.
     * @example
     * // Delete a few Sizes
     * const { count } = await prisma.size.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeDeleteManyArgs>(args?: SelectSubset<T, SizeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeUpdateManyArgs>(args: SelectSubset<T, SizeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes and returns the data updated in the database.
     * @param {SizeUpdateManyAndReturnArgs} args - Arguments to update many Sizes.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sizes and only return the `id`
     * const sizeWithIdOnly = await prisma.size.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SizeUpdateManyAndReturnArgs>(args: SelectSubset<T, SizeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Size.
     * @param {SizeUpsertArgs} args - Arguments to update or create a Size.
     * @example
     * // Update or create a Size
     * const size = await prisma.size.upsert({
     *   create: {
     *     // ... data to create a Size
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Size we want to update
     *   }
     * })
     */
    upsert<T extends SizeUpsertArgs>(args: SelectSubset<T, SizeUpsertArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeCountArgs} args - Arguments to filter Sizes to count.
     * @example
     * // Count the number of Sizes
     * const count = await prisma.size.count({
     *   where: {
     *     // ... the filter for the Sizes we want to count
     *   }
     * })
    **/
    count<T extends SizeCountArgs>(
      args?: Subset<T, SizeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeAggregateArgs>(args: Subset<T, SizeAggregateArgs>): Prisma.PrismaPromise<GetSizeAggregateType<T>>

    /**
     * Group by Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeGroupByArgs['orderBy'] }
        : { orderBy?: SizeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Size model
   */
  readonly fields: SizeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Size.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Tool<T extends Size$ToolArgs<ExtArgs> = {}>(args?: Subset<T, Size$ToolArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Size model
   */
  interface SizeFieldRefs {
    readonly id: FieldRef<"Size", 'String'>
    readonly name_uz: FieldRef<"Size", 'String'>
    readonly name_ru: FieldRef<"Size", 'String'>
    readonly name_en: FieldRef<"Size", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Size findUnique
   */
  export type SizeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size findUniqueOrThrow
   */
  export type SizeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size findFirst
   */
  export type SizeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size findFirstOrThrow
   */
  export type SizeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size findMany
   */
  export type SizeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Sizes to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size create
   */
  export type SizeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The data needed to create a Size.
     */
    data: XOR<SizeCreateInput, SizeUncheckedCreateInput>
  }

  /**
   * Size createMany
   */
  export type SizeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sizes.
     */
    data: SizeCreateManyInput | SizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Size createManyAndReturn
   */
  export type SizeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * The data used to create many Sizes.
     */
    data: SizeCreateManyInput | SizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Size update
   */
  export type SizeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The data needed to update a Size.
     */
    data: XOR<SizeUpdateInput, SizeUncheckedUpdateInput>
    /**
     * Choose, which Size to update.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size updateMany
   */
  export type SizeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizeUpdateManyMutationInput, SizeUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Size updateManyAndReturn
   */
  export type SizeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizeUpdateManyMutationInput, SizeUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Size upsert
   */
  export type SizeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The filter to search for the Size to update in case it exists.
     */
    where: SizeWhereUniqueInput
    /**
     * In case the Size found by the `where` argument doesn't exist, create a new Size with this data.
     */
    create: XOR<SizeCreateInput, SizeUncheckedCreateInput>
    /**
     * In case the Size was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeUpdateInput, SizeUncheckedUpdateInput>
  }

  /**
   * Size delete
   */
  export type SizeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter which Size to delete.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size deleteMany
   */
  export type SizeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sizes to delete
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to delete.
     */
    limit?: number
  }

  /**
   * Size.Tool
   */
  export type Size$ToolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    cursor?: ToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Size without action
   */
  export type SizeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
  }


  /**
   * Model Capacity
   */

  export type AggregateCapacity = {
    _count: CapacityCountAggregateOutputType | null
    _min: CapacityMinAggregateOutputType | null
    _max: CapacityMaxAggregateOutputType | null
  }

  export type CapacityMinAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
  }

  export type CapacityMaxAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
  }

  export type CapacityCountAggregateOutputType = {
    id: number
    name_uz: number
    name_ru: number
    name_en: number
    _all: number
  }


  export type CapacityMinAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
  }

  export type CapacityMaxAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
  }

  export type CapacityCountAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    _all?: true
  }

  export type CapacityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Capacity to aggregate.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Capacities
    **/
    _count?: true | CapacityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CapacityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CapacityMaxAggregateInputType
  }

  export type GetCapacityAggregateType<T extends CapacityAggregateArgs> = {
        [P in keyof T & keyof AggregateCapacity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCapacity[P]>
      : GetScalarType<T[P], AggregateCapacity[P]>
  }




  export type CapacityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CapacityWhereInput
    orderBy?: CapacityOrderByWithAggregationInput | CapacityOrderByWithAggregationInput[]
    by: CapacityScalarFieldEnum[] | CapacityScalarFieldEnum
    having?: CapacityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CapacityCountAggregateInputType | true
    _min?: CapacityMinAggregateInputType
    _max?: CapacityMaxAggregateInputType
  }

  export type CapacityGroupByOutputType = {
    id: string
    name_uz: string
    name_ru: string
    name_en: string
    _count: CapacityCountAggregateOutputType | null
    _min: CapacityMinAggregateOutputType | null
    _max: CapacityMaxAggregateOutputType | null
  }

  type GetCapacityGroupByPayload<T extends CapacityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CapacityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CapacityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CapacityGroupByOutputType[P]>
            : GetScalarType<T[P], CapacityGroupByOutputType[P]>
        }
      >
    >


  export type CapacitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    Tool?: boolean | Capacity$ToolArgs<ExtArgs>
    _count?: boolean | CapacityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["capacity"]>

  export type CapacitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }, ExtArgs["result"]["capacity"]>

  export type CapacitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }, ExtArgs["result"]["capacity"]>

  export type CapacitySelectScalar = {
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }

  export type CapacityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name_uz" | "name_ru" | "name_en", ExtArgs["result"]["capacity"]>
  export type CapacityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tool?: boolean | Capacity$ToolArgs<ExtArgs>
    _count?: boolean | CapacityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CapacityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CapacityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CapacityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Capacity"
    objects: {
      Tool: Prisma.$ToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name_uz: string
      name_ru: string
      name_en: string
    }, ExtArgs["result"]["capacity"]>
    composites: {}
  }

  type CapacityGetPayload<S extends boolean | null | undefined | CapacityDefaultArgs> = $Result.GetResult<Prisma.$CapacityPayload, S>

  type CapacityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CapacityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CapacityCountAggregateInputType | true
    }

  export interface CapacityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Capacity'], meta: { name: 'Capacity' } }
    /**
     * Find zero or one Capacity that matches the filter.
     * @param {CapacityFindUniqueArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CapacityFindUniqueArgs>(args: SelectSubset<T, CapacityFindUniqueArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Capacity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CapacityFindUniqueOrThrowArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CapacityFindUniqueOrThrowArgs>(args: SelectSubset<T, CapacityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Capacity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityFindFirstArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CapacityFindFirstArgs>(args?: SelectSubset<T, CapacityFindFirstArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Capacity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityFindFirstOrThrowArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CapacityFindFirstOrThrowArgs>(args?: SelectSubset<T, CapacityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Capacities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Capacities
     * const capacities = await prisma.capacity.findMany()
     * 
     * // Get first 10 Capacities
     * const capacities = await prisma.capacity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const capacityWithIdOnly = await prisma.capacity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CapacityFindManyArgs>(args?: SelectSubset<T, CapacityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Capacity.
     * @param {CapacityCreateArgs} args - Arguments to create a Capacity.
     * @example
     * // Create one Capacity
     * const Capacity = await prisma.capacity.create({
     *   data: {
     *     // ... data to create a Capacity
     *   }
     * })
     * 
     */
    create<T extends CapacityCreateArgs>(args: SelectSubset<T, CapacityCreateArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Capacities.
     * @param {CapacityCreateManyArgs} args - Arguments to create many Capacities.
     * @example
     * // Create many Capacities
     * const capacity = await prisma.capacity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CapacityCreateManyArgs>(args?: SelectSubset<T, CapacityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Capacities and returns the data saved in the database.
     * @param {CapacityCreateManyAndReturnArgs} args - Arguments to create many Capacities.
     * @example
     * // Create many Capacities
     * const capacity = await prisma.capacity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Capacities and only return the `id`
     * const capacityWithIdOnly = await prisma.capacity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CapacityCreateManyAndReturnArgs>(args?: SelectSubset<T, CapacityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Capacity.
     * @param {CapacityDeleteArgs} args - Arguments to delete one Capacity.
     * @example
     * // Delete one Capacity
     * const Capacity = await prisma.capacity.delete({
     *   where: {
     *     // ... filter to delete one Capacity
     *   }
     * })
     * 
     */
    delete<T extends CapacityDeleteArgs>(args: SelectSubset<T, CapacityDeleteArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Capacity.
     * @param {CapacityUpdateArgs} args - Arguments to update one Capacity.
     * @example
     * // Update one Capacity
     * const capacity = await prisma.capacity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CapacityUpdateArgs>(args: SelectSubset<T, CapacityUpdateArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Capacities.
     * @param {CapacityDeleteManyArgs} args - Arguments to filter Capacities to delete.
     * @example
     * // Delete a few Capacities
     * const { count } = await prisma.capacity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CapacityDeleteManyArgs>(args?: SelectSubset<T, CapacityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Capacities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Capacities
     * const capacity = await prisma.capacity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CapacityUpdateManyArgs>(args: SelectSubset<T, CapacityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Capacities and returns the data updated in the database.
     * @param {CapacityUpdateManyAndReturnArgs} args - Arguments to update many Capacities.
     * @example
     * // Update many Capacities
     * const capacity = await prisma.capacity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Capacities and only return the `id`
     * const capacityWithIdOnly = await prisma.capacity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CapacityUpdateManyAndReturnArgs>(args: SelectSubset<T, CapacityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Capacity.
     * @param {CapacityUpsertArgs} args - Arguments to update or create a Capacity.
     * @example
     * // Update or create a Capacity
     * const capacity = await prisma.capacity.upsert({
     *   create: {
     *     // ... data to create a Capacity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Capacity we want to update
     *   }
     * })
     */
    upsert<T extends CapacityUpsertArgs>(args: SelectSubset<T, CapacityUpsertArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Capacities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityCountArgs} args - Arguments to filter Capacities to count.
     * @example
     * // Count the number of Capacities
     * const count = await prisma.capacity.count({
     *   where: {
     *     // ... the filter for the Capacities we want to count
     *   }
     * })
    **/
    count<T extends CapacityCountArgs>(
      args?: Subset<T, CapacityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CapacityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Capacity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CapacityAggregateArgs>(args: Subset<T, CapacityAggregateArgs>): Prisma.PrismaPromise<GetCapacityAggregateType<T>>

    /**
     * Group by Capacity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CapacityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CapacityGroupByArgs['orderBy'] }
        : { orderBy?: CapacityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CapacityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCapacityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Capacity model
   */
  readonly fields: CapacityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Capacity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CapacityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Tool<T extends Capacity$ToolArgs<ExtArgs> = {}>(args?: Subset<T, Capacity$ToolArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Capacity model
   */
  interface CapacityFieldRefs {
    readonly id: FieldRef<"Capacity", 'String'>
    readonly name_uz: FieldRef<"Capacity", 'String'>
    readonly name_ru: FieldRef<"Capacity", 'String'>
    readonly name_en: FieldRef<"Capacity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Capacity findUnique
   */
  export type CapacityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity findUniqueOrThrow
   */
  export type CapacityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity findFirst
   */
  export type CapacityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Capacities.
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Capacities.
     */
    distinct?: CapacityScalarFieldEnum | CapacityScalarFieldEnum[]
  }

  /**
   * Capacity findFirstOrThrow
   */
  export type CapacityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Capacities.
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Capacities.
     */
    distinct?: CapacityScalarFieldEnum | CapacityScalarFieldEnum[]
  }

  /**
   * Capacity findMany
   */
  export type CapacityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacities to fetch.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Capacities.
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    distinct?: CapacityScalarFieldEnum | CapacityScalarFieldEnum[]
  }

  /**
   * Capacity create
   */
  export type CapacityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * The data needed to create a Capacity.
     */
    data: XOR<CapacityCreateInput, CapacityUncheckedCreateInput>
  }

  /**
   * Capacity createMany
   */
  export type CapacityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Capacities.
     */
    data: CapacityCreateManyInput | CapacityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Capacity createManyAndReturn
   */
  export type CapacityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * The data used to create many Capacities.
     */
    data: CapacityCreateManyInput | CapacityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Capacity update
   */
  export type CapacityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * The data needed to update a Capacity.
     */
    data: XOR<CapacityUpdateInput, CapacityUncheckedUpdateInput>
    /**
     * Choose, which Capacity to update.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity updateMany
   */
  export type CapacityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Capacities.
     */
    data: XOR<CapacityUpdateManyMutationInput, CapacityUncheckedUpdateManyInput>
    /**
     * Filter which Capacities to update
     */
    where?: CapacityWhereInput
    /**
     * Limit how many Capacities to update.
     */
    limit?: number
  }

  /**
   * Capacity updateManyAndReturn
   */
  export type CapacityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * The data used to update Capacities.
     */
    data: XOR<CapacityUpdateManyMutationInput, CapacityUncheckedUpdateManyInput>
    /**
     * Filter which Capacities to update
     */
    where?: CapacityWhereInput
    /**
     * Limit how many Capacities to update.
     */
    limit?: number
  }

  /**
   * Capacity upsert
   */
  export type CapacityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * The filter to search for the Capacity to update in case it exists.
     */
    where: CapacityWhereUniqueInput
    /**
     * In case the Capacity found by the `where` argument doesn't exist, create a new Capacity with this data.
     */
    create: XOR<CapacityCreateInput, CapacityUncheckedCreateInput>
    /**
     * In case the Capacity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CapacityUpdateInput, CapacityUncheckedUpdateInput>
  }

  /**
   * Capacity delete
   */
  export type CapacityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter which Capacity to delete.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity deleteMany
   */
  export type CapacityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Capacities to delete
     */
    where?: CapacityWhereInput
    /**
     * Limit how many Capacities to delete.
     */
    limit?: number
  }

  /**
   * Capacity.Tool
   */
  export type Capacity$ToolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    cursor?: ToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Capacity without action
   */
  export type CapacityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
  }


  /**
   * Model Tool
   */

  export type AggregateTool = {
    _count: ToolCountAggregateOutputType | null
    _avg: ToolAvgAggregateOutputType | null
    _sum: ToolSumAggregateOutputType | null
    _min: ToolMinAggregateOutputType | null
    _max: ToolMaxAggregateOutputType | null
  }

  export type ToolAvgAggregateOutputType = {
    price: number | null
    count: number | null
  }

  export type ToolSumAggregateOutputType = {
    price: number | null
    count: number | null
  }

  export type ToolMinAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
    description_uz: string | null
    description_ru: string | null
    description_en: string | null
    price: number | null
    count: number | null
    code: string | null
    brand_id: string | null
    size_id: string | null
    capacity_id: string | null
    isActive: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ToolMaxAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
    description_uz: string | null
    description_ru: string | null
    description_en: string | null
    price: number | null
    count: number | null
    code: string | null
    brand_id: string | null
    size_id: string | null
    capacity_id: string | null
    isActive: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ToolCountAggregateOutputType = {
    id: number
    name_uz: number
    name_ru: number
    name_en: number
    description_uz: number
    description_ru: number
    description_en: number
    price: number
    count: number
    code: number
    brand_id: number
    size_id: number
    capacity_id: number
    isActive: number
    image: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ToolAvgAggregateInputType = {
    price?: true
    count?: true
  }

  export type ToolSumAggregateInputType = {
    price?: true
    count?: true
  }

  export type ToolMinAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    description_uz?: true
    description_ru?: true
    description_en?: true
    price?: true
    count?: true
    code?: true
    brand_id?: true
    size_id?: true
    capacity_id?: true
    isActive?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ToolMaxAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    description_uz?: true
    description_ru?: true
    description_en?: true
    price?: true
    count?: true
    code?: true
    brand_id?: true
    size_id?: true
    capacity_id?: true
    isActive?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ToolCountAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    description_uz?: true
    description_ru?: true
    description_en?: true
    price?: true
    count?: true
    code?: true
    brand_id?: true
    size_id?: true
    capacity_id?: true
    isActive?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ToolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tool to aggregate.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tools
    **/
    _count?: true | ToolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ToolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ToolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ToolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ToolMaxAggregateInputType
  }

  export type GetToolAggregateType<T extends ToolAggregateArgs> = {
        [P in keyof T & keyof AggregateTool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTool[P]>
      : GetScalarType<T[P], AggregateTool[P]>
  }




  export type ToolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithAggregationInput | ToolOrderByWithAggregationInput[]
    by: ToolScalarFieldEnum[] | ToolScalarFieldEnum
    having?: ToolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ToolCountAggregateInputType | true
    _avg?: ToolAvgAggregateInputType
    _sum?: ToolSumAggregateInputType
    _min?: ToolMinAggregateInputType
    _max?: ToolMaxAggregateInputType
  }

  export type ToolGroupByOutputType = {
    id: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    brand_id: string | null
    size_id: string | null
    capacity_id: string | null
    isActive: boolean
    image: string
    createdAt: Date
    updatedAt: Date
    _count: ToolCountAggregateOutputType | null
    _avg: ToolAvgAggregateOutputType | null
    _sum: ToolSumAggregateOutputType | null
    _min: ToolMinAggregateOutputType | null
    _max: ToolMaxAggregateOutputType | null
  }

  type GetToolGroupByPayload<T extends ToolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ToolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ToolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ToolGroupByOutputType[P]>
            : GetScalarType<T[P], ToolGroupByOutputType[P]>
        }
      >
    >


  export type ToolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    description_uz?: boolean
    description_ru?: boolean
    description_en?: boolean
    price?: boolean
    count?: boolean
    code?: boolean
    brand_id?: boolean
    size_id?: boolean
    capacity_id?: boolean
    isActive?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Brand?: boolean | Tool$BrandArgs<ExtArgs>
    Size?: boolean | Tool$SizeArgs<ExtArgs>
    Capacity?: boolean | Tool$CapacityArgs<ExtArgs>
    Professions?: boolean | Tool$ProfessionsArgs<ExtArgs>
    OrderItems?: boolean | Tool$OrderItemsArgs<ExtArgs>
    BacketItems?: boolean | Tool$BacketItemsArgs<ExtArgs>
    _count?: boolean | ToolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tool"]>

  export type ToolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    description_uz?: boolean
    description_ru?: boolean
    description_en?: boolean
    price?: boolean
    count?: boolean
    code?: boolean
    brand_id?: boolean
    size_id?: boolean
    capacity_id?: boolean
    isActive?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Brand?: boolean | Tool$BrandArgs<ExtArgs>
    Size?: boolean | Tool$SizeArgs<ExtArgs>
    Capacity?: boolean | Tool$CapacityArgs<ExtArgs>
  }, ExtArgs["result"]["tool"]>

  export type ToolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    description_uz?: boolean
    description_ru?: boolean
    description_en?: boolean
    price?: boolean
    count?: boolean
    code?: boolean
    brand_id?: boolean
    size_id?: boolean
    capacity_id?: boolean
    isActive?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Brand?: boolean | Tool$BrandArgs<ExtArgs>
    Size?: boolean | Tool$SizeArgs<ExtArgs>
    Capacity?: boolean | Tool$CapacityArgs<ExtArgs>
  }, ExtArgs["result"]["tool"]>

  export type ToolSelectScalar = {
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    description_uz?: boolean
    description_ru?: boolean
    description_en?: boolean
    price?: boolean
    count?: boolean
    code?: boolean
    brand_id?: boolean
    size_id?: boolean
    capacity_id?: boolean
    isActive?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ToolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name_uz" | "name_ru" | "name_en" | "description_uz" | "description_ru" | "description_en" | "price" | "count" | "code" | "brand_id" | "size_id" | "capacity_id" | "isActive" | "image" | "createdAt" | "updatedAt", ExtArgs["result"]["tool"]>
  export type ToolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Brand?: boolean | Tool$BrandArgs<ExtArgs>
    Size?: boolean | Tool$SizeArgs<ExtArgs>
    Capacity?: boolean | Tool$CapacityArgs<ExtArgs>
    Professions?: boolean | Tool$ProfessionsArgs<ExtArgs>
    OrderItems?: boolean | Tool$OrderItemsArgs<ExtArgs>
    BacketItems?: boolean | Tool$BacketItemsArgs<ExtArgs>
    _count?: boolean | ToolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ToolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Brand?: boolean | Tool$BrandArgs<ExtArgs>
    Size?: boolean | Tool$SizeArgs<ExtArgs>
    Capacity?: boolean | Tool$CapacityArgs<ExtArgs>
  }
  export type ToolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Brand?: boolean | Tool$BrandArgs<ExtArgs>
    Size?: boolean | Tool$SizeArgs<ExtArgs>
    Capacity?: boolean | Tool$CapacityArgs<ExtArgs>
  }

  export type $ToolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tool"
    objects: {
      Brand: Prisma.$BrandPayload<ExtArgs> | null
      Size: Prisma.$SizePayload<ExtArgs> | null
      Capacity: Prisma.$CapacityPayload<ExtArgs> | null
      Professions: Prisma.$ProfessionPayload<ExtArgs>[]
      OrderItems: Prisma.$OrderItemsPayload<ExtArgs>[]
      BacketItems: Prisma.$BacketItemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name_uz: string
      name_ru: string
      name_en: string
      description_uz: string
      description_ru: string
      description_en: string
      price: number
      count: number
      code: string
      brand_id: string | null
      size_id: string | null
      capacity_id: string | null
      isActive: boolean
      image: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tool"]>
    composites: {}
  }

  type ToolGetPayload<S extends boolean | null | undefined | ToolDefaultArgs> = $Result.GetResult<Prisma.$ToolPayload, S>

  type ToolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ToolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ToolCountAggregateInputType | true
    }

  export interface ToolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tool'], meta: { name: 'Tool' } }
    /**
     * Find zero or one Tool that matches the filter.
     * @param {ToolFindUniqueArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ToolFindUniqueArgs>(args: SelectSubset<T, ToolFindUniqueArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tool that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ToolFindUniqueOrThrowArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ToolFindUniqueOrThrowArgs>(args: SelectSubset<T, ToolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tool that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolFindFirstArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ToolFindFirstArgs>(args?: SelectSubset<T, ToolFindFirstArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tool that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolFindFirstOrThrowArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ToolFindFirstOrThrowArgs>(args?: SelectSubset<T, ToolFindFirstOrThrowArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tools
     * const tools = await prisma.tool.findMany()
     * 
     * // Get first 10 Tools
     * const tools = await prisma.tool.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const toolWithIdOnly = await prisma.tool.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ToolFindManyArgs>(args?: SelectSubset<T, ToolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tool.
     * @param {ToolCreateArgs} args - Arguments to create a Tool.
     * @example
     * // Create one Tool
     * const Tool = await prisma.tool.create({
     *   data: {
     *     // ... data to create a Tool
     *   }
     * })
     * 
     */
    create<T extends ToolCreateArgs>(args: SelectSubset<T, ToolCreateArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tools.
     * @param {ToolCreateManyArgs} args - Arguments to create many Tools.
     * @example
     * // Create many Tools
     * const tool = await prisma.tool.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ToolCreateManyArgs>(args?: SelectSubset<T, ToolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tools and returns the data saved in the database.
     * @param {ToolCreateManyAndReturnArgs} args - Arguments to create many Tools.
     * @example
     * // Create many Tools
     * const tool = await prisma.tool.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tools and only return the `id`
     * const toolWithIdOnly = await prisma.tool.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ToolCreateManyAndReturnArgs>(args?: SelectSubset<T, ToolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tool.
     * @param {ToolDeleteArgs} args - Arguments to delete one Tool.
     * @example
     * // Delete one Tool
     * const Tool = await prisma.tool.delete({
     *   where: {
     *     // ... filter to delete one Tool
     *   }
     * })
     * 
     */
    delete<T extends ToolDeleteArgs>(args: SelectSubset<T, ToolDeleteArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tool.
     * @param {ToolUpdateArgs} args - Arguments to update one Tool.
     * @example
     * // Update one Tool
     * const tool = await prisma.tool.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ToolUpdateArgs>(args: SelectSubset<T, ToolUpdateArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tools.
     * @param {ToolDeleteManyArgs} args - Arguments to filter Tools to delete.
     * @example
     * // Delete a few Tools
     * const { count } = await prisma.tool.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ToolDeleteManyArgs>(args?: SelectSubset<T, ToolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tools
     * const tool = await prisma.tool.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ToolUpdateManyArgs>(args: SelectSubset<T, ToolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools and returns the data updated in the database.
     * @param {ToolUpdateManyAndReturnArgs} args - Arguments to update many Tools.
     * @example
     * // Update many Tools
     * const tool = await prisma.tool.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tools and only return the `id`
     * const toolWithIdOnly = await prisma.tool.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ToolUpdateManyAndReturnArgs>(args: SelectSubset<T, ToolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tool.
     * @param {ToolUpsertArgs} args - Arguments to update or create a Tool.
     * @example
     * // Update or create a Tool
     * const tool = await prisma.tool.upsert({
     *   create: {
     *     // ... data to create a Tool
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tool we want to update
     *   }
     * })
     */
    upsert<T extends ToolUpsertArgs>(args: SelectSubset<T, ToolUpsertArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolCountArgs} args - Arguments to filter Tools to count.
     * @example
     * // Count the number of Tools
     * const count = await prisma.tool.count({
     *   where: {
     *     // ... the filter for the Tools we want to count
     *   }
     * })
    **/
    count<T extends ToolCountArgs>(
      args?: Subset<T, ToolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ToolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ToolAggregateArgs>(args: Subset<T, ToolAggregateArgs>): Prisma.PrismaPromise<GetToolAggregateType<T>>

    /**
     * Group by Tool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ToolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ToolGroupByArgs['orderBy'] }
        : { orderBy?: ToolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ToolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetToolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tool model
   */
  readonly fields: ToolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tool.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ToolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Brand<T extends Tool$BrandArgs<ExtArgs> = {}>(args?: Subset<T, Tool$BrandArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Size<T extends Tool$SizeArgs<ExtArgs> = {}>(args?: Subset<T, Tool$SizeArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Capacity<T extends Tool$CapacityArgs<ExtArgs> = {}>(args?: Subset<T, Tool$CapacityArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Professions<T extends Tool$ProfessionsArgs<ExtArgs> = {}>(args?: Subset<T, Tool$ProfessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    OrderItems<T extends Tool$OrderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Tool$OrderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BacketItems<T extends Tool$BacketItemsArgs<ExtArgs> = {}>(args?: Subset<T, Tool$BacketItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tool model
   */
  interface ToolFieldRefs {
    readonly id: FieldRef<"Tool", 'String'>
    readonly name_uz: FieldRef<"Tool", 'String'>
    readonly name_ru: FieldRef<"Tool", 'String'>
    readonly name_en: FieldRef<"Tool", 'String'>
    readonly description_uz: FieldRef<"Tool", 'String'>
    readonly description_ru: FieldRef<"Tool", 'String'>
    readonly description_en: FieldRef<"Tool", 'String'>
    readonly price: FieldRef<"Tool", 'Float'>
    readonly count: FieldRef<"Tool", 'Int'>
    readonly code: FieldRef<"Tool", 'String'>
    readonly brand_id: FieldRef<"Tool", 'String'>
    readonly size_id: FieldRef<"Tool", 'String'>
    readonly capacity_id: FieldRef<"Tool", 'String'>
    readonly isActive: FieldRef<"Tool", 'Boolean'>
    readonly image: FieldRef<"Tool", 'String'>
    readonly createdAt: FieldRef<"Tool", 'DateTime'>
    readonly updatedAt: FieldRef<"Tool", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tool findUnique
   */
  export type ToolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool findUniqueOrThrow
   */
  export type ToolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool findFirst
   */
  export type ToolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tools.
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tools.
     */
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Tool findFirstOrThrow
   */
  export type ToolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tools.
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tools.
     */
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Tool findMany
   */
  export type ToolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tools.
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Tool create
   */
  export type ToolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * The data needed to create a Tool.
     */
    data: XOR<ToolCreateInput, ToolUncheckedCreateInput>
  }

  /**
   * Tool createMany
   */
  export type ToolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tools.
     */
    data: ToolCreateManyInput | ToolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tool createManyAndReturn
   */
  export type ToolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * The data used to create many Tools.
     */
    data: ToolCreateManyInput | ToolCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tool update
   */
  export type ToolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * The data needed to update a Tool.
     */
    data: XOR<ToolUpdateInput, ToolUncheckedUpdateInput>
    /**
     * Choose, which Tool to update.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool updateMany
   */
  export type ToolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tools.
     */
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyInput>
    /**
     * Filter which Tools to update
     */
    where?: ToolWhereInput
    /**
     * Limit how many Tools to update.
     */
    limit?: number
  }

  /**
   * Tool updateManyAndReturn
   */
  export type ToolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * The data used to update Tools.
     */
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyInput>
    /**
     * Filter which Tools to update
     */
    where?: ToolWhereInput
    /**
     * Limit how many Tools to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tool upsert
   */
  export type ToolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * The filter to search for the Tool to update in case it exists.
     */
    where: ToolWhereUniqueInput
    /**
     * In case the Tool found by the `where` argument doesn't exist, create a new Tool with this data.
     */
    create: XOR<ToolCreateInput, ToolUncheckedCreateInput>
    /**
     * In case the Tool was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ToolUpdateInput, ToolUncheckedUpdateInput>
  }

  /**
   * Tool delete
   */
  export type ToolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter which Tool to delete.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool deleteMany
   */
  export type ToolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tools to delete
     */
    where?: ToolWhereInput
    /**
     * Limit how many Tools to delete.
     */
    limit?: number
  }

  /**
   * Tool.Brand
   */
  export type Tool$BrandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
  }

  /**
   * Tool.Size
   */
  export type Tool$SizeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    where?: SizeWhereInput
  }

  /**
   * Tool.Capacity
   */
  export type Tool$CapacityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    where?: CapacityWhereInput
  }

  /**
   * Tool.Professions
   */
  export type Tool$ProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    where?: ProfessionWhereInput
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    cursor?: ProfessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Tool.OrderItems
   */
  export type Tool$OrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    where?: OrderItemsWhereInput
    orderBy?: OrderItemsOrderByWithRelationInput | OrderItemsOrderByWithRelationInput[]
    cursor?: OrderItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * Tool.BacketItems
   */
  export type Tool$BacketItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    where?: BacketItemsWhereInput
    orderBy?: BacketItemsOrderByWithRelationInput | BacketItemsOrderByWithRelationInput[]
    cursor?: BacketItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BacketItemsScalarFieldEnum | BacketItemsScalarFieldEnum[]
  }

  /**
   * Tool without action
   */
  export type ToolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
  }


  /**
   * Model Level
   */

  export type AggregateLevel = {
    _count: LevelCountAggregateOutputType | null
    _min: LevelMinAggregateOutputType | null
    _max: LevelMaxAggregateOutputType | null
  }

  export type LevelMinAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
  }

  export type LevelMaxAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
  }

  export type LevelCountAggregateOutputType = {
    id: number
    name_uz: number
    name_ru: number
    name_en: number
    _all: number
  }


  export type LevelMinAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
  }

  export type LevelMaxAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
  }

  export type LevelCountAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    _all?: true
  }

  export type LevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Level to aggregate.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Levels
    **/
    _count?: true | LevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelMaxAggregateInputType
  }

  export type GetLevelAggregateType<T extends LevelAggregateArgs> = {
        [P in keyof T & keyof AggregateLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevel[P]>
      : GetScalarType<T[P], AggregateLevel[P]>
  }




  export type LevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelWhereInput
    orderBy?: LevelOrderByWithAggregationInput | LevelOrderByWithAggregationInput[]
    by: LevelScalarFieldEnum[] | LevelScalarFieldEnum
    having?: LevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelCountAggregateInputType | true
    _min?: LevelMinAggregateInputType
    _max?: LevelMaxAggregateInputType
  }

  export type LevelGroupByOutputType = {
    id: string
    name_uz: string
    name_ru: string
    name_en: string
    _count: LevelCountAggregateOutputType | null
    _min: LevelMinAggregateOutputType | null
    _max: LevelMaxAggregateOutputType | null
  }

  type GetLevelGroupByPayload<T extends LevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelGroupByOutputType[P]>
            : GetScalarType<T[P], LevelGroupByOutputType[P]>
        }
      >
    >


  export type LevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    MasterSkills?: boolean | Level$MasterSkillsArgs<ExtArgs>
    LevelsProfessions?: boolean | Level$LevelsProfessionsArgs<ExtArgs>
    OrderItems?: boolean | Level$OrderItemsArgs<ExtArgs>
    BacketItems?: boolean | Level$BacketItemsArgs<ExtArgs>
    _count?: boolean | LevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["level"]>

  export type LevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }, ExtArgs["result"]["level"]>

  export type LevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }, ExtArgs["result"]["level"]>

  export type LevelSelectScalar = {
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
  }

  export type LevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name_uz" | "name_ru" | "name_en", ExtArgs["result"]["level"]>
  export type LevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterSkills?: boolean | Level$MasterSkillsArgs<ExtArgs>
    LevelsProfessions?: boolean | Level$LevelsProfessionsArgs<ExtArgs>
    OrderItems?: boolean | Level$OrderItemsArgs<ExtArgs>
    BacketItems?: boolean | Level$BacketItemsArgs<ExtArgs>
    _count?: boolean | LevelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Level"
    objects: {
      MasterSkills: Prisma.$MasterSkillsPayload<ExtArgs>[]
      LevelsProfessions: Prisma.$LevelsProfessionsPayload<ExtArgs>[]
      OrderItems: Prisma.$OrderItemsPayload<ExtArgs>[]
      BacketItems: Prisma.$BacketItemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name_uz: string
      name_ru: string
      name_en: string
    }, ExtArgs["result"]["level"]>
    composites: {}
  }

  type LevelGetPayload<S extends boolean | null | undefined | LevelDefaultArgs> = $Result.GetResult<Prisma.$LevelPayload, S>

  type LevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LevelCountAggregateInputType | true
    }

  export interface LevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Level'], meta: { name: 'Level' } }
    /**
     * Find zero or one Level that matches the filter.
     * @param {LevelFindUniqueArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LevelFindUniqueArgs>(args: SelectSubset<T, LevelFindUniqueArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Level that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LevelFindUniqueOrThrowArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LevelFindUniqueOrThrowArgs>(args: SelectSubset<T, LevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Level that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindFirstArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LevelFindFirstArgs>(args?: SelectSubset<T, LevelFindFirstArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Level that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindFirstOrThrowArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LevelFindFirstOrThrowArgs>(args?: SelectSubset<T, LevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Levels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Levels
     * const levels = await prisma.level.findMany()
     * 
     * // Get first 10 Levels
     * const levels = await prisma.level.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelWithIdOnly = await prisma.level.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LevelFindManyArgs>(args?: SelectSubset<T, LevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Level.
     * @param {LevelCreateArgs} args - Arguments to create a Level.
     * @example
     * // Create one Level
     * const Level = await prisma.level.create({
     *   data: {
     *     // ... data to create a Level
     *   }
     * })
     * 
     */
    create<T extends LevelCreateArgs>(args: SelectSubset<T, LevelCreateArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Levels.
     * @param {LevelCreateManyArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const level = await prisma.level.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LevelCreateManyArgs>(args?: SelectSubset<T, LevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Levels and returns the data saved in the database.
     * @param {LevelCreateManyAndReturnArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const level = await prisma.level.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Levels and only return the `id`
     * const levelWithIdOnly = await prisma.level.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LevelCreateManyAndReturnArgs>(args?: SelectSubset<T, LevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Level.
     * @param {LevelDeleteArgs} args - Arguments to delete one Level.
     * @example
     * // Delete one Level
     * const Level = await prisma.level.delete({
     *   where: {
     *     // ... filter to delete one Level
     *   }
     * })
     * 
     */
    delete<T extends LevelDeleteArgs>(args: SelectSubset<T, LevelDeleteArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Level.
     * @param {LevelUpdateArgs} args - Arguments to update one Level.
     * @example
     * // Update one Level
     * const level = await prisma.level.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LevelUpdateArgs>(args: SelectSubset<T, LevelUpdateArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Levels.
     * @param {LevelDeleteManyArgs} args - Arguments to filter Levels to delete.
     * @example
     * // Delete a few Levels
     * const { count } = await prisma.level.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LevelDeleteManyArgs>(args?: SelectSubset<T, LevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Levels
     * const level = await prisma.level.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LevelUpdateManyArgs>(args: SelectSubset<T, LevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels and returns the data updated in the database.
     * @param {LevelUpdateManyAndReturnArgs} args - Arguments to update many Levels.
     * @example
     * // Update many Levels
     * const level = await prisma.level.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Levels and only return the `id`
     * const levelWithIdOnly = await prisma.level.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LevelUpdateManyAndReturnArgs>(args: SelectSubset<T, LevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Level.
     * @param {LevelUpsertArgs} args - Arguments to update or create a Level.
     * @example
     * // Update or create a Level
     * const level = await prisma.level.upsert({
     *   create: {
     *     // ... data to create a Level
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Level we want to update
     *   }
     * })
     */
    upsert<T extends LevelUpsertArgs>(args: SelectSubset<T, LevelUpsertArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelCountArgs} args - Arguments to filter Levels to count.
     * @example
     * // Count the number of Levels
     * const count = await prisma.level.count({
     *   where: {
     *     // ... the filter for the Levels we want to count
     *   }
     * })
    **/
    count<T extends LevelCountArgs>(
      args?: Subset<T, LevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelAggregateArgs>(args: Subset<T, LevelAggregateArgs>): Prisma.PrismaPromise<GetLevelAggregateType<T>>

    /**
     * Group by Level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LevelGroupByArgs['orderBy'] }
        : { orderBy?: LevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Level model
   */
  readonly fields: LevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Level.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MasterSkills<T extends Level$MasterSkillsArgs<ExtArgs> = {}>(args?: Subset<T, Level$MasterSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    LevelsProfessions<T extends Level$LevelsProfessionsArgs<ExtArgs> = {}>(args?: Subset<T, Level$LevelsProfessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    OrderItems<T extends Level$OrderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Level$OrderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BacketItems<T extends Level$BacketItemsArgs<ExtArgs> = {}>(args?: Subset<T, Level$BacketItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Level model
   */
  interface LevelFieldRefs {
    readonly id: FieldRef<"Level", 'String'>
    readonly name_uz: FieldRef<"Level", 'String'>
    readonly name_ru: FieldRef<"Level", 'String'>
    readonly name_en: FieldRef<"Level", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Level findUnique
   */
  export type LevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level findUniqueOrThrow
   */
  export type LevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level findFirst
   */
  export type LevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level findFirstOrThrow
   */
  export type LevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level findMany
   */
  export type LevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Levels to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level create
   */
  export type LevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The data needed to create a Level.
     */
    data: XOR<LevelCreateInput, LevelUncheckedCreateInput>
  }

  /**
   * Level createMany
   */
  export type LevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Levels.
     */
    data: LevelCreateManyInput | LevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Level createManyAndReturn
   */
  export type LevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * The data used to create many Levels.
     */
    data: LevelCreateManyInput | LevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Level update
   */
  export type LevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The data needed to update a Level.
     */
    data: XOR<LevelUpdateInput, LevelUncheckedUpdateInput>
    /**
     * Choose, which Level to update.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level updateMany
   */
  export type LevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelUpdateManyMutationInput, LevelUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to update.
     */
    limit?: number
  }

  /**
   * Level updateManyAndReturn
   */
  export type LevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelUpdateManyMutationInput, LevelUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to update.
     */
    limit?: number
  }

  /**
   * Level upsert
   */
  export type LevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The filter to search for the Level to update in case it exists.
     */
    where: LevelWhereUniqueInput
    /**
     * In case the Level found by the `where` argument doesn't exist, create a new Level with this data.
     */
    create: XOR<LevelCreateInput, LevelUncheckedCreateInput>
    /**
     * In case the Level was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LevelUpdateInput, LevelUncheckedUpdateInput>
  }

  /**
   * Level delete
   */
  export type LevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter which Level to delete.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level deleteMany
   */
  export type LevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Levels to delete
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to delete.
     */
    limit?: number
  }

  /**
   * Level.MasterSkills
   */
  export type Level$MasterSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    where?: MasterSkillsWhereInput
    orderBy?: MasterSkillsOrderByWithRelationInput | MasterSkillsOrderByWithRelationInput[]
    cursor?: MasterSkillsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterSkillsScalarFieldEnum | MasterSkillsScalarFieldEnum[]
  }

  /**
   * Level.LevelsProfessions
   */
  export type Level$LevelsProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    where?: LevelsProfessionsWhereInput
    orderBy?: LevelsProfessionsOrderByWithRelationInput | LevelsProfessionsOrderByWithRelationInput[]
    cursor?: LevelsProfessionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LevelsProfessionsScalarFieldEnum | LevelsProfessionsScalarFieldEnum[]
  }

  /**
   * Level.OrderItems
   */
  export type Level$OrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    where?: OrderItemsWhereInput
    orderBy?: OrderItemsOrderByWithRelationInput | OrderItemsOrderByWithRelationInput[]
    cursor?: OrderItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * Level.BacketItems
   */
  export type Level$BacketItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    where?: BacketItemsWhereInput
    orderBy?: BacketItemsOrderByWithRelationInput | BacketItemsOrderByWithRelationInput[]
    cursor?: BacketItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BacketItemsScalarFieldEnum | BacketItemsScalarFieldEnum[]
  }

  /**
   * Level without action
   */
  export type LevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
  }


  /**
   * Model Profession
   */

  export type AggregateProfession = {
    _count: ProfessionCountAggregateOutputType | null
    _min: ProfessionMinAggregateOutputType | null
    _max: ProfessionMaxAggregateOutputType | null
  }

  export type ProfessionMinAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
    image: string | null
    isActive: boolean | null
  }

  export type ProfessionMaxAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
    image: string | null
    isActive: boolean | null
  }

  export type ProfessionCountAggregateOutputType = {
    id: number
    name_uz: number
    name_ru: number
    name_en: number
    image: number
    isActive: number
    _all: number
  }


  export type ProfessionMinAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    image?: true
    isActive?: true
  }

  export type ProfessionMaxAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    image?: true
    isActive?: true
  }

  export type ProfessionCountAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    image?: true
    isActive?: true
    _all?: true
  }

  export type ProfessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profession to aggregate.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professions
    **/
    _count?: true | ProfessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionMaxAggregateInputType
  }

  export type GetProfessionAggregateType<T extends ProfessionAggregateArgs> = {
        [P in keyof T & keyof AggregateProfession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfession[P]>
      : GetScalarType<T[P], AggregateProfession[P]>
  }




  export type ProfessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionWhereInput
    orderBy?: ProfessionOrderByWithAggregationInput | ProfessionOrderByWithAggregationInput[]
    by: ProfessionScalarFieldEnum[] | ProfessionScalarFieldEnum
    having?: ProfessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionCountAggregateInputType | true
    _min?: ProfessionMinAggregateInputType
    _max?: ProfessionMaxAggregateInputType
  }

  export type ProfessionGroupByOutputType = {
    id: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    _count: ProfessionCountAggregateOutputType | null
    _min: ProfessionMinAggregateOutputType | null
    _max: ProfessionMaxAggregateOutputType | null
  }

  type GetProfessionGroupByPayload<T extends ProfessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    image?: boolean
    isActive?: boolean
    Tools?: boolean | Profession$ToolsArgs<ExtArgs>
    MasterSkills?: boolean | Profession$MasterSkillsArgs<ExtArgs>
    LevelsProfessions?: boolean | Profession$LevelsProfessionsArgs<ExtArgs>
    OrderItems?: boolean | Profession$OrderItemsArgs<ExtArgs>
    BacketItems?: boolean | Profession$BacketItemsArgs<ExtArgs>
    _count?: boolean | ProfessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    image?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    image?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectScalar = {
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    image?: boolean
    isActive?: boolean
  }

  export type ProfessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name_uz" | "name_ru" | "name_en" | "image" | "isActive", ExtArgs["result"]["profession"]>
  export type ProfessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tools?: boolean | Profession$ToolsArgs<ExtArgs>
    MasterSkills?: boolean | Profession$MasterSkillsArgs<ExtArgs>
    LevelsProfessions?: boolean | Profession$LevelsProfessionsArgs<ExtArgs>
    OrderItems?: boolean | Profession$OrderItemsArgs<ExtArgs>
    BacketItems?: boolean | Profession$BacketItemsArgs<ExtArgs>
    _count?: boolean | ProfessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profession"
    objects: {
      Tools: Prisma.$ToolPayload<ExtArgs>[]
      MasterSkills: Prisma.$MasterSkillsPayload<ExtArgs>[]
      LevelsProfessions: Prisma.$LevelsProfessionsPayload<ExtArgs>[]
      OrderItems: Prisma.$OrderItemsPayload<ExtArgs>[]
      BacketItems: Prisma.$BacketItemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name_uz: string
      name_ru: string
      name_en: string
      image: string
      isActive: boolean
    }, ExtArgs["result"]["profession"]>
    composites: {}
  }

  type ProfessionGetPayload<S extends boolean | null | undefined | ProfessionDefaultArgs> = $Result.GetResult<Prisma.$ProfessionPayload, S>

  type ProfessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionCountAggregateInputType | true
    }

  export interface ProfessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profession'], meta: { name: 'Profession' } }
    /**
     * Find zero or one Profession that matches the filter.
     * @param {ProfessionFindUniqueArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionFindUniqueArgs>(args: SelectSubset<T, ProfessionFindUniqueArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionFindUniqueOrThrowArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindFirstArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionFindFirstArgs>(args?: SelectSubset<T, ProfessionFindFirstArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindFirstOrThrowArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Professions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professions
     * const professions = await prisma.profession.findMany()
     * 
     * // Get first 10 Professions
     * const professions = await prisma.profession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionWithIdOnly = await prisma.profession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionFindManyArgs>(args?: SelectSubset<T, ProfessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profession.
     * @param {ProfessionCreateArgs} args - Arguments to create a Profession.
     * @example
     * // Create one Profession
     * const Profession = await prisma.profession.create({
     *   data: {
     *     // ... data to create a Profession
     *   }
     * })
     * 
     */
    create<T extends ProfessionCreateArgs>(args: SelectSubset<T, ProfessionCreateArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Professions.
     * @param {ProfessionCreateManyArgs} args - Arguments to create many Professions.
     * @example
     * // Create many Professions
     * const profession = await prisma.profession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionCreateManyArgs>(args?: SelectSubset<T, ProfessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Professions and returns the data saved in the database.
     * @param {ProfessionCreateManyAndReturnArgs} args - Arguments to create many Professions.
     * @example
     * // Create many Professions
     * const profession = await prisma.profession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Professions and only return the `id`
     * const professionWithIdOnly = await prisma.profession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profession.
     * @param {ProfessionDeleteArgs} args - Arguments to delete one Profession.
     * @example
     * // Delete one Profession
     * const Profession = await prisma.profession.delete({
     *   where: {
     *     // ... filter to delete one Profession
     *   }
     * })
     * 
     */
    delete<T extends ProfessionDeleteArgs>(args: SelectSubset<T, ProfessionDeleteArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profession.
     * @param {ProfessionUpdateArgs} args - Arguments to update one Profession.
     * @example
     * // Update one Profession
     * const profession = await prisma.profession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionUpdateArgs>(args: SelectSubset<T, ProfessionUpdateArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Professions.
     * @param {ProfessionDeleteManyArgs} args - Arguments to filter Professions to delete.
     * @example
     * // Delete a few Professions
     * const { count } = await prisma.profession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionDeleteManyArgs>(args?: SelectSubset<T, ProfessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professions
     * const profession = await prisma.profession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionUpdateManyArgs>(args: SelectSubset<T, ProfessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professions and returns the data updated in the database.
     * @param {ProfessionUpdateManyAndReturnArgs} args - Arguments to update many Professions.
     * @example
     * // Update many Professions
     * const profession = await prisma.profession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Professions and only return the `id`
     * const professionWithIdOnly = await prisma.profession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profession.
     * @param {ProfessionUpsertArgs} args - Arguments to update or create a Profession.
     * @example
     * // Update or create a Profession
     * const profession = await prisma.profession.upsert({
     *   create: {
     *     // ... data to create a Profession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profession we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionUpsertArgs>(args: SelectSubset<T, ProfessionUpsertArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Professions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionCountArgs} args - Arguments to filter Professions to count.
     * @example
     * // Count the number of Professions
     * const count = await prisma.profession.count({
     *   where: {
     *     // ... the filter for the Professions we want to count
     *   }
     * })
    **/
    count<T extends ProfessionCountArgs>(
      args?: Subset<T, ProfessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionAggregateArgs>(args: Subset<T, ProfessionAggregateArgs>): Prisma.PrismaPromise<GetProfessionAggregateType<T>>

    /**
     * Group by Profession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profession model
   */
  readonly fields: ProfessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Tools<T extends Profession$ToolsArgs<ExtArgs> = {}>(args?: Subset<T, Profession$ToolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MasterSkills<T extends Profession$MasterSkillsArgs<ExtArgs> = {}>(args?: Subset<T, Profession$MasterSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    LevelsProfessions<T extends Profession$LevelsProfessionsArgs<ExtArgs> = {}>(args?: Subset<T, Profession$LevelsProfessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    OrderItems<T extends Profession$OrderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Profession$OrderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BacketItems<T extends Profession$BacketItemsArgs<ExtArgs> = {}>(args?: Subset<T, Profession$BacketItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profession model
   */
  interface ProfessionFieldRefs {
    readonly id: FieldRef<"Profession", 'String'>
    readonly name_uz: FieldRef<"Profession", 'String'>
    readonly name_ru: FieldRef<"Profession", 'String'>
    readonly name_en: FieldRef<"Profession", 'String'>
    readonly image: FieldRef<"Profession", 'String'>
    readonly isActive: FieldRef<"Profession", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Profession findUnique
   */
  export type ProfessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession findUniqueOrThrow
   */
  export type ProfessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession findFirst
   */
  export type ProfessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professions.
     */
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession findFirstOrThrow
   */
  export type ProfessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professions.
     */
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession findMany
   */
  export type ProfessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Professions to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession create
   */
  export type ProfessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Profession.
     */
    data: XOR<ProfessionCreateInput, ProfessionUncheckedCreateInput>
  }

  /**
   * Profession createMany
   */
  export type ProfessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professions.
     */
    data: ProfessionCreateManyInput | ProfessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profession createManyAndReturn
   */
  export type ProfessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * The data used to create many Professions.
     */
    data: ProfessionCreateManyInput | ProfessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profession update
   */
  export type ProfessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Profession.
     */
    data: XOR<ProfessionUpdateInput, ProfessionUncheckedUpdateInput>
    /**
     * Choose, which Profession to update.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession updateMany
   */
  export type ProfessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professions.
     */
    data: XOR<ProfessionUpdateManyMutationInput, ProfessionUncheckedUpdateManyInput>
    /**
     * Filter which Professions to update
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to update.
     */
    limit?: number
  }

  /**
   * Profession updateManyAndReturn
   */
  export type ProfessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * The data used to update Professions.
     */
    data: XOR<ProfessionUpdateManyMutationInput, ProfessionUncheckedUpdateManyInput>
    /**
     * Filter which Professions to update
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to update.
     */
    limit?: number
  }

  /**
   * Profession upsert
   */
  export type ProfessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Profession to update in case it exists.
     */
    where: ProfessionWhereUniqueInput
    /**
     * In case the Profession found by the `where` argument doesn't exist, create a new Profession with this data.
     */
    create: XOR<ProfessionCreateInput, ProfessionUncheckedCreateInput>
    /**
     * In case the Profession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionUpdateInput, ProfessionUncheckedUpdateInput>
  }

  /**
   * Profession delete
   */
  export type ProfessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter which Profession to delete.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession deleteMany
   */
  export type ProfessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professions to delete
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to delete.
     */
    limit?: number
  }

  /**
   * Profession.Tools
   */
  export type Profession$ToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    cursor?: ToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Profession.MasterSkills
   */
  export type Profession$MasterSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    where?: MasterSkillsWhereInput
    orderBy?: MasterSkillsOrderByWithRelationInput | MasterSkillsOrderByWithRelationInput[]
    cursor?: MasterSkillsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterSkillsScalarFieldEnum | MasterSkillsScalarFieldEnum[]
  }

  /**
   * Profession.LevelsProfessions
   */
  export type Profession$LevelsProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    where?: LevelsProfessionsWhereInput
    orderBy?: LevelsProfessionsOrderByWithRelationInput | LevelsProfessionsOrderByWithRelationInput[]
    cursor?: LevelsProfessionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LevelsProfessionsScalarFieldEnum | LevelsProfessionsScalarFieldEnum[]
  }

  /**
   * Profession.OrderItems
   */
  export type Profession$OrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    where?: OrderItemsWhereInput
    orderBy?: OrderItemsOrderByWithRelationInput | OrderItemsOrderByWithRelationInput[]
    cursor?: OrderItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * Profession.BacketItems
   */
  export type Profession$BacketItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    where?: BacketItemsWhereInput
    orderBy?: BacketItemsOrderByWithRelationInput | BacketItemsOrderByWithRelationInput[]
    cursor?: BacketItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BacketItemsScalarFieldEnum | BacketItemsScalarFieldEnum[]
  }

  /**
   * Profession without action
   */
  export type ProfessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
  }


  /**
   * Model LevelsProfessions
   */

  export type AggregateLevelsProfessions = {
    _count: LevelsProfessionsCountAggregateOutputType | null
    _avg: LevelsProfessionsAvgAggregateOutputType | null
    _sum: LevelsProfessionsSumAggregateOutputType | null
    _min: LevelsProfessionsMinAggregateOutputType | null
    _max: LevelsProfessionsMaxAggregateOutputType | null
  }

  export type LevelsProfessionsAvgAggregateOutputType = {
    min_work_hours: number | null
    price_hourly: number | null
    price_daily: number | null
  }

  export type LevelsProfessionsSumAggregateOutputType = {
    min_work_hours: number | null
    price_hourly: number | null
    price_daily: number | null
  }

  export type LevelsProfessionsMinAggregateOutputType = {
    id: string | null
    profession_id: string | null
    level_id: string | null
    min_work_hours: number | null
    price_hourly: number | null
    price_daily: number | null
  }

  export type LevelsProfessionsMaxAggregateOutputType = {
    id: string | null
    profession_id: string | null
    level_id: string | null
    min_work_hours: number | null
    price_hourly: number | null
    price_daily: number | null
  }

  export type LevelsProfessionsCountAggregateOutputType = {
    id: number
    profession_id: number
    level_id: number
    min_work_hours: number
    price_hourly: number
    price_daily: number
    _all: number
  }


  export type LevelsProfessionsAvgAggregateInputType = {
    min_work_hours?: true
    price_hourly?: true
    price_daily?: true
  }

  export type LevelsProfessionsSumAggregateInputType = {
    min_work_hours?: true
    price_hourly?: true
    price_daily?: true
  }

  export type LevelsProfessionsMinAggregateInputType = {
    id?: true
    profession_id?: true
    level_id?: true
    min_work_hours?: true
    price_hourly?: true
    price_daily?: true
  }

  export type LevelsProfessionsMaxAggregateInputType = {
    id?: true
    profession_id?: true
    level_id?: true
    min_work_hours?: true
    price_hourly?: true
    price_daily?: true
  }

  export type LevelsProfessionsCountAggregateInputType = {
    id?: true
    profession_id?: true
    level_id?: true
    min_work_hours?: true
    price_hourly?: true
    price_daily?: true
    _all?: true
  }

  export type LevelsProfessionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LevelsProfessions to aggregate.
     */
    where?: LevelsProfessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelsProfessions to fetch.
     */
    orderBy?: LevelsProfessionsOrderByWithRelationInput | LevelsProfessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LevelsProfessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelsProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelsProfessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LevelsProfessions
    **/
    _count?: true | LevelsProfessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LevelsProfessionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LevelsProfessionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelsProfessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelsProfessionsMaxAggregateInputType
  }

  export type GetLevelsProfessionsAggregateType<T extends LevelsProfessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateLevelsProfessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevelsProfessions[P]>
      : GetScalarType<T[P], AggregateLevelsProfessions[P]>
  }




  export type LevelsProfessionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelsProfessionsWhereInput
    orderBy?: LevelsProfessionsOrderByWithAggregationInput | LevelsProfessionsOrderByWithAggregationInput[]
    by: LevelsProfessionsScalarFieldEnum[] | LevelsProfessionsScalarFieldEnum
    having?: LevelsProfessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelsProfessionsCountAggregateInputType | true
    _avg?: LevelsProfessionsAvgAggregateInputType
    _sum?: LevelsProfessionsSumAggregateInputType
    _min?: LevelsProfessionsMinAggregateInputType
    _max?: LevelsProfessionsMaxAggregateInputType
  }

  export type LevelsProfessionsGroupByOutputType = {
    id: string
    profession_id: string
    level_id: string | null
    min_work_hours: number
    price_hourly: number
    price_daily: number
    _count: LevelsProfessionsCountAggregateOutputType | null
    _avg: LevelsProfessionsAvgAggregateOutputType | null
    _sum: LevelsProfessionsSumAggregateOutputType | null
    _min: LevelsProfessionsMinAggregateOutputType | null
    _max: LevelsProfessionsMaxAggregateOutputType | null
  }

  type GetLevelsProfessionsGroupByPayload<T extends LevelsProfessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelsProfessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelsProfessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelsProfessionsGroupByOutputType[P]>
            : GetScalarType<T[P], LevelsProfessionsGroupByOutputType[P]>
        }
      >
    >


  export type LevelsProfessionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profession_id?: boolean
    level_id?: boolean
    min_work_hours?: boolean
    price_hourly?: boolean
    price_daily?: boolean
    Profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    Level?: boolean | LevelsProfessions$LevelArgs<ExtArgs>
  }, ExtArgs["result"]["levelsProfessions"]>

  export type LevelsProfessionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profession_id?: boolean
    level_id?: boolean
    min_work_hours?: boolean
    price_hourly?: boolean
    price_daily?: boolean
    Profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    Level?: boolean | LevelsProfessions$LevelArgs<ExtArgs>
  }, ExtArgs["result"]["levelsProfessions"]>

  export type LevelsProfessionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profession_id?: boolean
    level_id?: boolean
    min_work_hours?: boolean
    price_hourly?: boolean
    price_daily?: boolean
    Profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    Level?: boolean | LevelsProfessions$LevelArgs<ExtArgs>
  }, ExtArgs["result"]["levelsProfessions"]>

  export type LevelsProfessionsSelectScalar = {
    id?: boolean
    profession_id?: boolean
    level_id?: boolean
    min_work_hours?: boolean
    price_hourly?: boolean
    price_daily?: boolean
  }

  export type LevelsProfessionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "profession_id" | "level_id" | "min_work_hours" | "price_hourly" | "price_daily", ExtArgs["result"]["levelsProfessions"]>
  export type LevelsProfessionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    Level?: boolean | LevelsProfessions$LevelArgs<ExtArgs>
  }
  export type LevelsProfessionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    Level?: boolean | LevelsProfessions$LevelArgs<ExtArgs>
  }
  export type LevelsProfessionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    Level?: boolean | LevelsProfessions$LevelArgs<ExtArgs>
  }

  export type $LevelsProfessionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LevelsProfessions"
    objects: {
      Profession: Prisma.$ProfessionPayload<ExtArgs>
      Level: Prisma.$LevelPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profession_id: string
      level_id: string | null
      min_work_hours: number
      price_hourly: number
      price_daily: number
    }, ExtArgs["result"]["levelsProfessions"]>
    composites: {}
  }

  type LevelsProfessionsGetPayload<S extends boolean | null | undefined | LevelsProfessionsDefaultArgs> = $Result.GetResult<Prisma.$LevelsProfessionsPayload, S>

  type LevelsProfessionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LevelsProfessionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LevelsProfessionsCountAggregateInputType | true
    }

  export interface LevelsProfessionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LevelsProfessions'], meta: { name: 'LevelsProfessions' } }
    /**
     * Find zero or one LevelsProfessions that matches the filter.
     * @param {LevelsProfessionsFindUniqueArgs} args - Arguments to find a LevelsProfessions
     * @example
     * // Get one LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LevelsProfessionsFindUniqueArgs>(args: SelectSubset<T, LevelsProfessionsFindUniqueArgs<ExtArgs>>): Prisma__LevelsProfessionsClient<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LevelsProfessions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LevelsProfessionsFindUniqueOrThrowArgs} args - Arguments to find a LevelsProfessions
     * @example
     * // Get one LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LevelsProfessionsFindUniqueOrThrowArgs>(args: SelectSubset<T, LevelsProfessionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LevelsProfessionsClient<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LevelsProfessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsProfessionsFindFirstArgs} args - Arguments to find a LevelsProfessions
     * @example
     * // Get one LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LevelsProfessionsFindFirstArgs>(args?: SelectSubset<T, LevelsProfessionsFindFirstArgs<ExtArgs>>): Prisma__LevelsProfessionsClient<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LevelsProfessions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsProfessionsFindFirstOrThrowArgs} args - Arguments to find a LevelsProfessions
     * @example
     * // Get one LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LevelsProfessionsFindFirstOrThrowArgs>(args?: SelectSubset<T, LevelsProfessionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__LevelsProfessionsClient<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LevelsProfessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsProfessionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.findMany()
     * 
     * // Get first 10 LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelsProfessionsWithIdOnly = await prisma.levelsProfessions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LevelsProfessionsFindManyArgs>(args?: SelectSubset<T, LevelsProfessionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LevelsProfessions.
     * @param {LevelsProfessionsCreateArgs} args - Arguments to create a LevelsProfessions.
     * @example
     * // Create one LevelsProfessions
     * const LevelsProfessions = await prisma.levelsProfessions.create({
     *   data: {
     *     // ... data to create a LevelsProfessions
     *   }
     * })
     * 
     */
    create<T extends LevelsProfessionsCreateArgs>(args: SelectSubset<T, LevelsProfessionsCreateArgs<ExtArgs>>): Prisma__LevelsProfessionsClient<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LevelsProfessions.
     * @param {LevelsProfessionsCreateManyArgs} args - Arguments to create many LevelsProfessions.
     * @example
     * // Create many LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LevelsProfessionsCreateManyArgs>(args?: SelectSubset<T, LevelsProfessionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LevelsProfessions and returns the data saved in the database.
     * @param {LevelsProfessionsCreateManyAndReturnArgs} args - Arguments to create many LevelsProfessions.
     * @example
     * // Create many LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LevelsProfessions and only return the `id`
     * const levelsProfessionsWithIdOnly = await prisma.levelsProfessions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LevelsProfessionsCreateManyAndReturnArgs>(args?: SelectSubset<T, LevelsProfessionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LevelsProfessions.
     * @param {LevelsProfessionsDeleteArgs} args - Arguments to delete one LevelsProfessions.
     * @example
     * // Delete one LevelsProfessions
     * const LevelsProfessions = await prisma.levelsProfessions.delete({
     *   where: {
     *     // ... filter to delete one LevelsProfessions
     *   }
     * })
     * 
     */
    delete<T extends LevelsProfessionsDeleteArgs>(args: SelectSubset<T, LevelsProfessionsDeleteArgs<ExtArgs>>): Prisma__LevelsProfessionsClient<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LevelsProfessions.
     * @param {LevelsProfessionsUpdateArgs} args - Arguments to update one LevelsProfessions.
     * @example
     * // Update one LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LevelsProfessionsUpdateArgs>(args: SelectSubset<T, LevelsProfessionsUpdateArgs<ExtArgs>>): Prisma__LevelsProfessionsClient<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LevelsProfessions.
     * @param {LevelsProfessionsDeleteManyArgs} args - Arguments to filter LevelsProfessions to delete.
     * @example
     * // Delete a few LevelsProfessions
     * const { count } = await prisma.levelsProfessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LevelsProfessionsDeleteManyArgs>(args?: SelectSubset<T, LevelsProfessionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LevelsProfessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsProfessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LevelsProfessionsUpdateManyArgs>(args: SelectSubset<T, LevelsProfessionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LevelsProfessions and returns the data updated in the database.
     * @param {LevelsProfessionsUpdateManyAndReturnArgs} args - Arguments to update many LevelsProfessions.
     * @example
     * // Update many LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LevelsProfessions and only return the `id`
     * const levelsProfessionsWithIdOnly = await prisma.levelsProfessions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LevelsProfessionsUpdateManyAndReturnArgs>(args: SelectSubset<T, LevelsProfessionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LevelsProfessions.
     * @param {LevelsProfessionsUpsertArgs} args - Arguments to update or create a LevelsProfessions.
     * @example
     * // Update or create a LevelsProfessions
     * const levelsProfessions = await prisma.levelsProfessions.upsert({
     *   create: {
     *     // ... data to create a LevelsProfessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LevelsProfessions we want to update
     *   }
     * })
     */
    upsert<T extends LevelsProfessionsUpsertArgs>(args: SelectSubset<T, LevelsProfessionsUpsertArgs<ExtArgs>>): Prisma__LevelsProfessionsClient<$Result.GetResult<Prisma.$LevelsProfessionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LevelsProfessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsProfessionsCountArgs} args - Arguments to filter LevelsProfessions to count.
     * @example
     * // Count the number of LevelsProfessions
     * const count = await prisma.levelsProfessions.count({
     *   where: {
     *     // ... the filter for the LevelsProfessions we want to count
     *   }
     * })
    **/
    count<T extends LevelsProfessionsCountArgs>(
      args?: Subset<T, LevelsProfessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelsProfessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LevelsProfessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsProfessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelsProfessionsAggregateArgs>(args: Subset<T, LevelsProfessionsAggregateArgs>): Prisma.PrismaPromise<GetLevelsProfessionsAggregateType<T>>

    /**
     * Group by LevelsProfessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsProfessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LevelsProfessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LevelsProfessionsGroupByArgs['orderBy'] }
        : { orderBy?: LevelsProfessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LevelsProfessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelsProfessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LevelsProfessions model
   */
  readonly fields: LevelsProfessionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LevelsProfessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LevelsProfessionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Profession<T extends ProfessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionDefaultArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Level<T extends LevelsProfessions$LevelArgs<ExtArgs> = {}>(args?: Subset<T, LevelsProfessions$LevelArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LevelsProfessions model
   */
  interface LevelsProfessionsFieldRefs {
    readonly id: FieldRef<"LevelsProfessions", 'String'>
    readonly profession_id: FieldRef<"LevelsProfessions", 'String'>
    readonly level_id: FieldRef<"LevelsProfessions", 'String'>
    readonly min_work_hours: FieldRef<"LevelsProfessions", 'Int'>
    readonly price_hourly: FieldRef<"LevelsProfessions", 'Float'>
    readonly price_daily: FieldRef<"LevelsProfessions", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * LevelsProfessions findUnique
   */
  export type LevelsProfessionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    /**
     * Filter, which LevelsProfessions to fetch.
     */
    where: LevelsProfessionsWhereUniqueInput
  }

  /**
   * LevelsProfessions findUniqueOrThrow
   */
  export type LevelsProfessionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    /**
     * Filter, which LevelsProfessions to fetch.
     */
    where: LevelsProfessionsWhereUniqueInput
  }

  /**
   * LevelsProfessions findFirst
   */
  export type LevelsProfessionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    /**
     * Filter, which LevelsProfessions to fetch.
     */
    where?: LevelsProfessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelsProfessions to fetch.
     */
    orderBy?: LevelsProfessionsOrderByWithRelationInput | LevelsProfessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LevelsProfessions.
     */
    cursor?: LevelsProfessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelsProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelsProfessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LevelsProfessions.
     */
    distinct?: LevelsProfessionsScalarFieldEnum | LevelsProfessionsScalarFieldEnum[]
  }

  /**
   * LevelsProfessions findFirstOrThrow
   */
  export type LevelsProfessionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    /**
     * Filter, which LevelsProfessions to fetch.
     */
    where?: LevelsProfessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelsProfessions to fetch.
     */
    orderBy?: LevelsProfessionsOrderByWithRelationInput | LevelsProfessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LevelsProfessions.
     */
    cursor?: LevelsProfessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelsProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelsProfessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LevelsProfessions.
     */
    distinct?: LevelsProfessionsScalarFieldEnum | LevelsProfessionsScalarFieldEnum[]
  }

  /**
   * LevelsProfessions findMany
   */
  export type LevelsProfessionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    /**
     * Filter, which LevelsProfessions to fetch.
     */
    where?: LevelsProfessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelsProfessions to fetch.
     */
    orderBy?: LevelsProfessionsOrderByWithRelationInput | LevelsProfessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LevelsProfessions.
     */
    cursor?: LevelsProfessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelsProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelsProfessions.
     */
    skip?: number
    distinct?: LevelsProfessionsScalarFieldEnum | LevelsProfessionsScalarFieldEnum[]
  }

  /**
   * LevelsProfessions create
   */
  export type LevelsProfessionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    /**
     * The data needed to create a LevelsProfessions.
     */
    data: XOR<LevelsProfessionsCreateInput, LevelsProfessionsUncheckedCreateInput>
  }

  /**
   * LevelsProfessions createMany
   */
  export type LevelsProfessionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LevelsProfessions.
     */
    data: LevelsProfessionsCreateManyInput | LevelsProfessionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LevelsProfessions createManyAndReturn
   */
  export type LevelsProfessionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * The data used to create many LevelsProfessions.
     */
    data: LevelsProfessionsCreateManyInput | LevelsProfessionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LevelsProfessions update
   */
  export type LevelsProfessionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    /**
     * The data needed to update a LevelsProfessions.
     */
    data: XOR<LevelsProfessionsUpdateInput, LevelsProfessionsUncheckedUpdateInput>
    /**
     * Choose, which LevelsProfessions to update.
     */
    where: LevelsProfessionsWhereUniqueInput
  }

  /**
   * LevelsProfessions updateMany
   */
  export type LevelsProfessionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LevelsProfessions.
     */
    data: XOR<LevelsProfessionsUpdateManyMutationInput, LevelsProfessionsUncheckedUpdateManyInput>
    /**
     * Filter which LevelsProfessions to update
     */
    where?: LevelsProfessionsWhereInput
    /**
     * Limit how many LevelsProfessions to update.
     */
    limit?: number
  }

  /**
   * LevelsProfessions updateManyAndReturn
   */
  export type LevelsProfessionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * The data used to update LevelsProfessions.
     */
    data: XOR<LevelsProfessionsUpdateManyMutationInput, LevelsProfessionsUncheckedUpdateManyInput>
    /**
     * Filter which LevelsProfessions to update
     */
    where?: LevelsProfessionsWhereInput
    /**
     * Limit how many LevelsProfessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LevelsProfessions upsert
   */
  export type LevelsProfessionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    /**
     * The filter to search for the LevelsProfessions to update in case it exists.
     */
    where: LevelsProfessionsWhereUniqueInput
    /**
     * In case the LevelsProfessions found by the `where` argument doesn't exist, create a new LevelsProfessions with this data.
     */
    create: XOR<LevelsProfessionsCreateInput, LevelsProfessionsUncheckedCreateInput>
    /**
     * In case the LevelsProfessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LevelsProfessionsUpdateInput, LevelsProfessionsUncheckedUpdateInput>
  }

  /**
   * LevelsProfessions delete
   */
  export type LevelsProfessionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
    /**
     * Filter which LevelsProfessions to delete.
     */
    where: LevelsProfessionsWhereUniqueInput
  }

  /**
   * LevelsProfessions deleteMany
   */
  export type LevelsProfessionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LevelsProfessions to delete
     */
    where?: LevelsProfessionsWhereInput
    /**
     * Limit how many LevelsProfessions to delete.
     */
    limit?: number
  }

  /**
   * LevelsProfessions.Level
   */
  export type LevelsProfessions$LevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    where?: LevelWhereInput
  }

  /**
   * LevelsProfessions without action
   */
  export type LevelsProfessionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsProfessions
     */
    select?: LevelsProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelsProfessions
     */
    omit?: LevelsProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelsProfessionsInclude<ExtArgs> | null
  }


  /**
   * Model Master
   */

  export type AggregateMaster = {
    _count: MasterCountAggregateOutputType | null
    _min: MasterMinAggregateOutputType | null
    _max: MasterMaxAggregateOutputType | null
  }

  export type MasterMinAggregateOutputType = {
    id: string | null
    full_name: string | null
    phone: string | null
    isActive: boolean | null
    year: Date | null
    image: string | null
    passport_image: string | null
    about: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterMaxAggregateOutputType = {
    id: string | null
    full_name: string | null
    phone: string | null
    isActive: boolean | null
    year: Date | null
    image: string | null
    passport_image: string | null
    about: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterCountAggregateOutputType = {
    id: number
    full_name: number
    phone: number
    isActive: number
    year: number
    image: number
    passport_image: number
    about: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MasterMinAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    isActive?: true
    year?: true
    image?: true
    passport_image?: true
    about?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterMaxAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    isActive?: true
    year?: true
    image?: true
    passport_image?: true
    about?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterCountAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    isActive?: true
    year?: true
    image?: true
    passport_image?: true
    about?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Master to aggregate.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Masters
    **/
    _count?: true | MasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterMaxAggregateInputType
  }

  export type GetMasterAggregateType<T extends MasterAggregateArgs> = {
        [P in keyof T & keyof AggregateMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaster[P]>
      : GetScalarType<T[P], AggregateMaster[P]>
  }




  export type MasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterWhereInput
    orderBy?: MasterOrderByWithAggregationInput | MasterOrderByWithAggregationInput[]
    by: MasterScalarFieldEnum[] | MasterScalarFieldEnum
    having?: MasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterCountAggregateInputType | true
    _min?: MasterMinAggregateInputType
    _max?: MasterMaxAggregateInputType
  }

  export type MasterGroupByOutputType = {
    id: string
    full_name: string
    phone: string
    isActive: boolean
    year: Date
    image: string
    passport_image: string
    about: string
    createdAt: Date
    updatedAt: Date
    _count: MasterCountAggregateOutputType | null
    _min: MasterMinAggregateOutputType | null
    _max: MasterMaxAggregateOutputType | null
  }

  type GetMasterGroupByPayload<T extends MasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterGroupByOutputType[P]>
            : GetScalarType<T[P], MasterGroupByOutputType[P]>
        }
      >
    >


  export type MasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    full_name?: boolean
    phone?: boolean
    isActive?: boolean
    year?: boolean
    image?: boolean
    passport_image?: boolean
    about?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    MasterSkills?: boolean | Master$MasterSkillsArgs<ExtArgs>
    Orders?: boolean | Master$OrdersArgs<ExtArgs>
    MasterRatings?: boolean | Master$MasterRatingsArgs<ExtArgs>
    _count?: boolean | MasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["master"]>

  export type MasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    full_name?: boolean
    phone?: boolean
    isActive?: boolean
    year?: boolean
    image?: boolean
    passport_image?: boolean
    about?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["master"]>

  export type MasterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    full_name?: boolean
    phone?: boolean
    isActive?: boolean
    year?: boolean
    image?: boolean
    passport_image?: boolean
    about?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["master"]>

  export type MasterSelectScalar = {
    id?: boolean
    full_name?: boolean
    phone?: boolean
    isActive?: boolean
    year?: boolean
    image?: boolean
    passport_image?: boolean
    about?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "full_name" | "phone" | "isActive" | "year" | "image" | "passport_image" | "about" | "createdAt" | "updatedAt", ExtArgs["result"]["master"]>
  export type MasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterSkills?: boolean | Master$MasterSkillsArgs<ExtArgs>
    Orders?: boolean | Master$OrdersArgs<ExtArgs>
    MasterRatings?: boolean | Master$MasterRatingsArgs<ExtArgs>
    _count?: boolean | MasterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MasterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Master"
    objects: {
      MasterSkills: Prisma.$MasterSkillsPayload<ExtArgs>[]
      Orders: Prisma.$OrderPayload<ExtArgs>[]
      MasterRatings: Prisma.$MasterRatingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      full_name: string
      phone: string
      isActive: boolean
      year: Date
      image: string
      passport_image: string
      about: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["master"]>
    composites: {}
  }

  type MasterGetPayload<S extends boolean | null | undefined | MasterDefaultArgs> = $Result.GetResult<Prisma.$MasterPayload, S>

  type MasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterCountAggregateInputType | true
    }

  export interface MasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Master'], meta: { name: 'Master' } }
    /**
     * Find zero or one Master that matches the filter.
     * @param {MasterFindUniqueArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterFindUniqueArgs>(args: SelectSubset<T, MasterFindUniqueArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Master that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterFindUniqueOrThrowArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Master that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindFirstArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterFindFirstArgs>(args?: SelectSubset<T, MasterFindFirstArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Master that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindFirstOrThrowArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Masters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Masters
     * const masters = await prisma.master.findMany()
     * 
     * // Get first 10 Masters
     * const masters = await prisma.master.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterWithIdOnly = await prisma.master.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterFindManyArgs>(args?: SelectSubset<T, MasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Master.
     * @param {MasterCreateArgs} args - Arguments to create a Master.
     * @example
     * // Create one Master
     * const Master = await prisma.master.create({
     *   data: {
     *     // ... data to create a Master
     *   }
     * })
     * 
     */
    create<T extends MasterCreateArgs>(args: SelectSubset<T, MasterCreateArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Masters.
     * @param {MasterCreateManyArgs} args - Arguments to create many Masters.
     * @example
     * // Create many Masters
     * const master = await prisma.master.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterCreateManyArgs>(args?: SelectSubset<T, MasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Masters and returns the data saved in the database.
     * @param {MasterCreateManyAndReturnArgs} args - Arguments to create many Masters.
     * @example
     * // Create many Masters
     * const master = await prisma.master.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Masters and only return the `id`
     * const masterWithIdOnly = await prisma.master.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Master.
     * @param {MasterDeleteArgs} args - Arguments to delete one Master.
     * @example
     * // Delete one Master
     * const Master = await prisma.master.delete({
     *   where: {
     *     // ... filter to delete one Master
     *   }
     * })
     * 
     */
    delete<T extends MasterDeleteArgs>(args: SelectSubset<T, MasterDeleteArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Master.
     * @param {MasterUpdateArgs} args - Arguments to update one Master.
     * @example
     * // Update one Master
     * const master = await prisma.master.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterUpdateArgs>(args: SelectSubset<T, MasterUpdateArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Masters.
     * @param {MasterDeleteManyArgs} args - Arguments to filter Masters to delete.
     * @example
     * // Delete a few Masters
     * const { count } = await prisma.master.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterDeleteManyArgs>(args?: SelectSubset<T, MasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Masters
     * const master = await prisma.master.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterUpdateManyArgs>(args: SelectSubset<T, MasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masters and returns the data updated in the database.
     * @param {MasterUpdateManyAndReturnArgs} args - Arguments to update many Masters.
     * @example
     * // Update many Masters
     * const master = await prisma.master.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Masters and only return the `id`
     * const masterWithIdOnly = await prisma.master.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Master.
     * @param {MasterUpsertArgs} args - Arguments to update or create a Master.
     * @example
     * // Update or create a Master
     * const master = await prisma.master.upsert({
     *   create: {
     *     // ... data to create a Master
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Master we want to update
     *   }
     * })
     */
    upsert<T extends MasterUpsertArgs>(args: SelectSubset<T, MasterUpsertArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Masters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterCountArgs} args - Arguments to filter Masters to count.
     * @example
     * // Count the number of Masters
     * const count = await prisma.master.count({
     *   where: {
     *     // ... the filter for the Masters we want to count
     *   }
     * })
    **/
    count<T extends MasterCountArgs>(
      args?: Subset<T, MasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Master.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterAggregateArgs>(args: Subset<T, MasterAggregateArgs>): Prisma.PrismaPromise<GetMasterAggregateType<T>>

    /**
     * Group by Master.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterGroupByArgs['orderBy'] }
        : { orderBy?: MasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Master model
   */
  readonly fields: MasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Master.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MasterSkills<T extends Master$MasterSkillsArgs<ExtArgs> = {}>(args?: Subset<T, Master$MasterSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Orders<T extends Master$OrdersArgs<ExtArgs> = {}>(args?: Subset<T, Master$OrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MasterRatings<T extends Master$MasterRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Master$MasterRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Master model
   */
  interface MasterFieldRefs {
    readonly id: FieldRef<"Master", 'String'>
    readonly full_name: FieldRef<"Master", 'String'>
    readonly phone: FieldRef<"Master", 'String'>
    readonly isActive: FieldRef<"Master", 'Boolean'>
    readonly year: FieldRef<"Master", 'DateTime'>
    readonly image: FieldRef<"Master", 'String'>
    readonly passport_image: FieldRef<"Master", 'String'>
    readonly about: FieldRef<"Master", 'String'>
    readonly createdAt: FieldRef<"Master", 'DateTime'>
    readonly updatedAt: FieldRef<"Master", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Master findUnique
   */
  export type MasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master findUniqueOrThrow
   */
  export type MasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master findFirst
   */
  export type MasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masters.
     */
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master findFirstOrThrow
   */
  export type MasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masters.
     */
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master findMany
   */
  export type MasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Masters to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master create
   */
  export type MasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The data needed to create a Master.
     */
    data: XOR<MasterCreateInput, MasterUncheckedCreateInput>
  }

  /**
   * Master createMany
   */
  export type MasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Masters.
     */
    data: MasterCreateManyInput | MasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Master createManyAndReturn
   */
  export type MasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * The data used to create many Masters.
     */
    data: MasterCreateManyInput | MasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Master update
   */
  export type MasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The data needed to update a Master.
     */
    data: XOR<MasterUpdateInput, MasterUncheckedUpdateInput>
    /**
     * Choose, which Master to update.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master updateMany
   */
  export type MasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Masters.
     */
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyInput>
    /**
     * Filter which Masters to update
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to update.
     */
    limit?: number
  }

  /**
   * Master updateManyAndReturn
   */
  export type MasterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * The data used to update Masters.
     */
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyInput>
    /**
     * Filter which Masters to update
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to update.
     */
    limit?: number
  }

  /**
   * Master upsert
   */
  export type MasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The filter to search for the Master to update in case it exists.
     */
    where: MasterWhereUniqueInput
    /**
     * In case the Master found by the `where` argument doesn't exist, create a new Master with this data.
     */
    create: XOR<MasterCreateInput, MasterUncheckedCreateInput>
    /**
     * In case the Master was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterUpdateInput, MasterUncheckedUpdateInput>
  }

  /**
   * Master delete
   */
  export type MasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter which Master to delete.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master deleteMany
   */
  export type MasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Masters to delete
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to delete.
     */
    limit?: number
  }

  /**
   * Master.MasterSkills
   */
  export type Master$MasterSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    where?: MasterSkillsWhereInput
    orderBy?: MasterSkillsOrderByWithRelationInput | MasterSkillsOrderByWithRelationInput[]
    cursor?: MasterSkillsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterSkillsScalarFieldEnum | MasterSkillsScalarFieldEnum[]
  }

  /**
   * Master.Orders
   */
  export type Master$OrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Master.MasterRatings
   */
  export type Master$MasterRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    where?: MasterRatingsWhereInput
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    cursor?: MasterRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * Master without action
   */
  export type MasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
  }


  /**
   * Model MasterSkills
   */

  export type AggregateMasterSkills = {
    _count: MasterSkillsCountAggregateOutputType | null
    _avg: MasterSkillsAvgAggregateOutputType | null
    _sum: MasterSkillsSumAggregateOutputType | null
    _min: MasterSkillsMinAggregateOutputType | null
    _max: MasterSkillsMaxAggregateOutputType | null
  }

  export type MasterSkillsAvgAggregateOutputType = {
    min_work_hours: number | null
    price_hourly: number | null
    price_daily: number | null
    experience: number | null
  }

  export type MasterSkillsSumAggregateOutputType = {
    min_work_hours: number | null
    price_hourly: number | null
    price_daily: number | null
    experience: number | null
  }

  export type MasterSkillsMinAggregateOutputType = {
    id: string | null
    min_work_hours: number | null
    price_hourly: number | null
    price_daily: number | null
    experience: number | null
    level_id: string | null
    profession_id: string | null
    master_id: string | null
  }

  export type MasterSkillsMaxAggregateOutputType = {
    id: string | null
    min_work_hours: number | null
    price_hourly: number | null
    price_daily: number | null
    experience: number | null
    level_id: string | null
    profession_id: string | null
    master_id: string | null
  }

  export type MasterSkillsCountAggregateOutputType = {
    id: number
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    level_id: number
    profession_id: number
    master_id: number
    _all: number
  }


  export type MasterSkillsAvgAggregateInputType = {
    min_work_hours?: true
    price_hourly?: true
    price_daily?: true
    experience?: true
  }

  export type MasterSkillsSumAggregateInputType = {
    min_work_hours?: true
    price_hourly?: true
    price_daily?: true
    experience?: true
  }

  export type MasterSkillsMinAggregateInputType = {
    id?: true
    min_work_hours?: true
    price_hourly?: true
    price_daily?: true
    experience?: true
    level_id?: true
    profession_id?: true
    master_id?: true
  }

  export type MasterSkillsMaxAggregateInputType = {
    id?: true
    min_work_hours?: true
    price_hourly?: true
    price_daily?: true
    experience?: true
    level_id?: true
    profession_id?: true
    master_id?: true
  }

  export type MasterSkillsCountAggregateInputType = {
    id?: true
    min_work_hours?: true
    price_hourly?: true
    price_daily?: true
    experience?: true
    level_id?: true
    profession_id?: true
    master_id?: true
    _all?: true
  }

  export type MasterSkillsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterSkills to aggregate.
     */
    where?: MasterSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterSkills to fetch.
     */
    orderBy?: MasterSkillsOrderByWithRelationInput | MasterSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterSkills
    **/
    _count?: true | MasterSkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterSkillsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterSkillsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterSkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterSkillsMaxAggregateInputType
  }

  export type GetMasterSkillsAggregateType<T extends MasterSkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterSkills[P]>
      : GetScalarType<T[P], AggregateMasterSkills[P]>
  }




  export type MasterSkillsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterSkillsWhereInput
    orderBy?: MasterSkillsOrderByWithAggregationInput | MasterSkillsOrderByWithAggregationInput[]
    by: MasterSkillsScalarFieldEnum[] | MasterSkillsScalarFieldEnum
    having?: MasterSkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterSkillsCountAggregateInputType | true
    _avg?: MasterSkillsAvgAggregateInputType
    _sum?: MasterSkillsSumAggregateInputType
    _min?: MasterSkillsMinAggregateInputType
    _max?: MasterSkillsMaxAggregateInputType
  }

  export type MasterSkillsGroupByOutputType = {
    id: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    level_id: string | null
    profession_id: string | null
    master_id: string
    _count: MasterSkillsCountAggregateOutputType | null
    _avg: MasterSkillsAvgAggregateOutputType | null
    _sum: MasterSkillsSumAggregateOutputType | null
    _min: MasterSkillsMinAggregateOutputType | null
    _max: MasterSkillsMaxAggregateOutputType | null
  }

  type GetMasterSkillsGroupByPayload<T extends MasterSkillsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterSkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterSkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterSkillsGroupByOutputType[P]>
            : GetScalarType<T[P], MasterSkillsGroupByOutputType[P]>
        }
      >
    >


  export type MasterSkillsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    min_work_hours?: boolean
    price_hourly?: boolean
    price_daily?: boolean
    experience?: boolean
    level_id?: boolean
    profession_id?: boolean
    master_id?: boolean
    Level?: boolean | MasterSkills$LevelArgs<ExtArgs>
    Profession?: boolean | MasterSkills$ProfessionArgs<ExtArgs>
    Master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterSkills"]>

  export type MasterSkillsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    min_work_hours?: boolean
    price_hourly?: boolean
    price_daily?: boolean
    experience?: boolean
    level_id?: boolean
    profession_id?: boolean
    master_id?: boolean
    Level?: boolean | MasterSkills$LevelArgs<ExtArgs>
    Profession?: boolean | MasterSkills$ProfessionArgs<ExtArgs>
    Master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterSkills"]>

  export type MasterSkillsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    min_work_hours?: boolean
    price_hourly?: boolean
    price_daily?: boolean
    experience?: boolean
    level_id?: boolean
    profession_id?: boolean
    master_id?: boolean
    Level?: boolean | MasterSkills$LevelArgs<ExtArgs>
    Profession?: boolean | MasterSkills$ProfessionArgs<ExtArgs>
    Master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterSkills"]>

  export type MasterSkillsSelectScalar = {
    id?: boolean
    min_work_hours?: boolean
    price_hourly?: boolean
    price_daily?: boolean
    experience?: boolean
    level_id?: boolean
    profession_id?: boolean
    master_id?: boolean
  }

  export type MasterSkillsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "min_work_hours" | "price_hourly" | "price_daily" | "experience" | "level_id" | "profession_id" | "master_id", ExtArgs["result"]["masterSkills"]>
  export type MasterSkillsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Level?: boolean | MasterSkills$LevelArgs<ExtArgs>
    Profession?: boolean | MasterSkills$ProfessionArgs<ExtArgs>
    Master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type MasterSkillsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Level?: boolean | MasterSkills$LevelArgs<ExtArgs>
    Profession?: boolean | MasterSkills$ProfessionArgs<ExtArgs>
    Master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type MasterSkillsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Level?: boolean | MasterSkills$LevelArgs<ExtArgs>
    Profession?: boolean | MasterSkills$ProfessionArgs<ExtArgs>
    Master?: boolean | MasterDefaultArgs<ExtArgs>
  }

  export type $MasterSkillsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterSkills"
    objects: {
      Level: Prisma.$LevelPayload<ExtArgs> | null
      Profession: Prisma.$ProfessionPayload<ExtArgs> | null
      Master: Prisma.$MasterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      min_work_hours: number
      price_hourly: number
      price_daily: number
      experience: number
      level_id: string | null
      profession_id: string | null
      master_id: string
    }, ExtArgs["result"]["masterSkills"]>
    composites: {}
  }

  type MasterSkillsGetPayload<S extends boolean | null | undefined | MasterSkillsDefaultArgs> = $Result.GetResult<Prisma.$MasterSkillsPayload, S>

  type MasterSkillsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterSkillsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterSkillsCountAggregateInputType | true
    }

  export interface MasterSkillsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterSkills'], meta: { name: 'MasterSkills' } }
    /**
     * Find zero or one MasterSkills that matches the filter.
     * @param {MasterSkillsFindUniqueArgs} args - Arguments to find a MasterSkills
     * @example
     * // Get one MasterSkills
     * const masterSkills = await prisma.masterSkills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterSkillsFindUniqueArgs>(args: SelectSubset<T, MasterSkillsFindUniqueArgs<ExtArgs>>): Prisma__MasterSkillsClient<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MasterSkills that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterSkillsFindUniqueOrThrowArgs} args - Arguments to find a MasterSkills
     * @example
     * // Get one MasterSkills
     * const masterSkills = await prisma.masterSkills.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterSkillsFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterSkillsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterSkillsClient<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSkillsFindFirstArgs} args - Arguments to find a MasterSkills
     * @example
     * // Get one MasterSkills
     * const masterSkills = await prisma.masterSkills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterSkillsFindFirstArgs>(args?: SelectSubset<T, MasterSkillsFindFirstArgs<ExtArgs>>): Prisma__MasterSkillsClient<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterSkills that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSkillsFindFirstOrThrowArgs} args - Arguments to find a MasterSkills
     * @example
     * // Get one MasterSkills
     * const masterSkills = await prisma.masterSkills.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterSkillsFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterSkillsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterSkillsClient<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MasterSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSkillsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterSkills
     * const masterSkills = await prisma.masterSkills.findMany()
     * 
     * // Get first 10 MasterSkills
     * const masterSkills = await prisma.masterSkills.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterSkillsWithIdOnly = await prisma.masterSkills.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterSkillsFindManyArgs>(args?: SelectSubset<T, MasterSkillsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MasterSkills.
     * @param {MasterSkillsCreateArgs} args - Arguments to create a MasterSkills.
     * @example
     * // Create one MasterSkills
     * const MasterSkills = await prisma.masterSkills.create({
     *   data: {
     *     // ... data to create a MasterSkills
     *   }
     * })
     * 
     */
    create<T extends MasterSkillsCreateArgs>(args: SelectSubset<T, MasterSkillsCreateArgs<ExtArgs>>): Prisma__MasterSkillsClient<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MasterSkills.
     * @param {MasterSkillsCreateManyArgs} args - Arguments to create many MasterSkills.
     * @example
     * // Create many MasterSkills
     * const masterSkills = await prisma.masterSkills.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterSkillsCreateManyArgs>(args?: SelectSubset<T, MasterSkillsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterSkills and returns the data saved in the database.
     * @param {MasterSkillsCreateManyAndReturnArgs} args - Arguments to create many MasterSkills.
     * @example
     * // Create many MasterSkills
     * const masterSkills = await prisma.masterSkills.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterSkills and only return the `id`
     * const masterSkillsWithIdOnly = await prisma.masterSkills.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterSkillsCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterSkillsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MasterSkills.
     * @param {MasterSkillsDeleteArgs} args - Arguments to delete one MasterSkills.
     * @example
     * // Delete one MasterSkills
     * const MasterSkills = await prisma.masterSkills.delete({
     *   where: {
     *     // ... filter to delete one MasterSkills
     *   }
     * })
     * 
     */
    delete<T extends MasterSkillsDeleteArgs>(args: SelectSubset<T, MasterSkillsDeleteArgs<ExtArgs>>): Prisma__MasterSkillsClient<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MasterSkills.
     * @param {MasterSkillsUpdateArgs} args - Arguments to update one MasterSkills.
     * @example
     * // Update one MasterSkills
     * const masterSkills = await prisma.masterSkills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterSkillsUpdateArgs>(args: SelectSubset<T, MasterSkillsUpdateArgs<ExtArgs>>): Prisma__MasterSkillsClient<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MasterSkills.
     * @param {MasterSkillsDeleteManyArgs} args - Arguments to filter MasterSkills to delete.
     * @example
     * // Delete a few MasterSkills
     * const { count } = await prisma.masterSkills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterSkillsDeleteManyArgs>(args?: SelectSubset<T, MasterSkillsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterSkills
     * const masterSkills = await prisma.masterSkills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterSkillsUpdateManyArgs>(args: SelectSubset<T, MasterSkillsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterSkills and returns the data updated in the database.
     * @param {MasterSkillsUpdateManyAndReturnArgs} args - Arguments to update many MasterSkills.
     * @example
     * // Update many MasterSkills
     * const masterSkills = await prisma.masterSkills.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MasterSkills and only return the `id`
     * const masterSkillsWithIdOnly = await prisma.masterSkills.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterSkillsUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterSkillsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MasterSkills.
     * @param {MasterSkillsUpsertArgs} args - Arguments to update or create a MasterSkills.
     * @example
     * // Update or create a MasterSkills
     * const masterSkills = await prisma.masterSkills.upsert({
     *   create: {
     *     // ... data to create a MasterSkills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterSkills we want to update
     *   }
     * })
     */
    upsert<T extends MasterSkillsUpsertArgs>(args: SelectSubset<T, MasterSkillsUpsertArgs<ExtArgs>>): Prisma__MasterSkillsClient<$Result.GetResult<Prisma.$MasterSkillsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MasterSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSkillsCountArgs} args - Arguments to filter MasterSkills to count.
     * @example
     * // Count the number of MasterSkills
     * const count = await prisma.masterSkills.count({
     *   where: {
     *     // ... the filter for the MasterSkills we want to count
     *   }
     * })
    **/
    count<T extends MasterSkillsCountArgs>(
      args?: Subset<T, MasterSkillsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterSkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterSkillsAggregateArgs>(args: Subset<T, MasterSkillsAggregateArgs>): Prisma.PrismaPromise<GetMasterSkillsAggregateType<T>>

    /**
     * Group by MasterSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterSkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterSkillsGroupByArgs['orderBy'] }
        : { orderBy?: MasterSkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterSkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterSkillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterSkills model
   */
  readonly fields: MasterSkillsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterSkills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterSkillsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Level<T extends MasterSkills$LevelArgs<ExtArgs> = {}>(args?: Subset<T, MasterSkills$LevelArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Profession<T extends MasterSkills$ProfessionArgs<ExtArgs> = {}>(args?: Subset<T, MasterSkills$ProfessionArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Master<T extends MasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDefaultArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterSkills model
   */
  interface MasterSkillsFieldRefs {
    readonly id: FieldRef<"MasterSkills", 'String'>
    readonly min_work_hours: FieldRef<"MasterSkills", 'Int'>
    readonly price_hourly: FieldRef<"MasterSkills", 'Float'>
    readonly price_daily: FieldRef<"MasterSkills", 'Float'>
    readonly experience: FieldRef<"MasterSkills", 'Int'>
    readonly level_id: FieldRef<"MasterSkills", 'String'>
    readonly profession_id: FieldRef<"MasterSkills", 'String'>
    readonly master_id: FieldRef<"MasterSkills", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MasterSkills findUnique
   */
  export type MasterSkillsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    /**
     * Filter, which MasterSkills to fetch.
     */
    where: MasterSkillsWhereUniqueInput
  }

  /**
   * MasterSkills findUniqueOrThrow
   */
  export type MasterSkillsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    /**
     * Filter, which MasterSkills to fetch.
     */
    where: MasterSkillsWhereUniqueInput
  }

  /**
   * MasterSkills findFirst
   */
  export type MasterSkillsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    /**
     * Filter, which MasterSkills to fetch.
     */
    where?: MasterSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterSkills to fetch.
     */
    orderBy?: MasterSkillsOrderByWithRelationInput | MasterSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterSkills.
     */
    cursor?: MasterSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterSkills.
     */
    distinct?: MasterSkillsScalarFieldEnum | MasterSkillsScalarFieldEnum[]
  }

  /**
   * MasterSkills findFirstOrThrow
   */
  export type MasterSkillsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    /**
     * Filter, which MasterSkills to fetch.
     */
    where?: MasterSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterSkills to fetch.
     */
    orderBy?: MasterSkillsOrderByWithRelationInput | MasterSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterSkills.
     */
    cursor?: MasterSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterSkills.
     */
    distinct?: MasterSkillsScalarFieldEnum | MasterSkillsScalarFieldEnum[]
  }

  /**
   * MasterSkills findMany
   */
  export type MasterSkillsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    /**
     * Filter, which MasterSkills to fetch.
     */
    where?: MasterSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterSkills to fetch.
     */
    orderBy?: MasterSkillsOrderByWithRelationInput | MasterSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterSkills.
     */
    cursor?: MasterSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterSkills.
     */
    skip?: number
    distinct?: MasterSkillsScalarFieldEnum | MasterSkillsScalarFieldEnum[]
  }

  /**
   * MasterSkills create
   */
  export type MasterSkillsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterSkills.
     */
    data: XOR<MasterSkillsCreateInput, MasterSkillsUncheckedCreateInput>
  }

  /**
   * MasterSkills createMany
   */
  export type MasterSkillsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterSkills.
     */
    data: MasterSkillsCreateManyInput | MasterSkillsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterSkills createManyAndReturn
   */
  export type MasterSkillsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * The data used to create many MasterSkills.
     */
    data: MasterSkillsCreateManyInput | MasterSkillsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterSkills update
   */
  export type MasterSkillsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterSkills.
     */
    data: XOR<MasterSkillsUpdateInput, MasterSkillsUncheckedUpdateInput>
    /**
     * Choose, which MasterSkills to update.
     */
    where: MasterSkillsWhereUniqueInput
  }

  /**
   * MasterSkills updateMany
   */
  export type MasterSkillsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterSkills.
     */
    data: XOR<MasterSkillsUpdateManyMutationInput, MasterSkillsUncheckedUpdateManyInput>
    /**
     * Filter which MasterSkills to update
     */
    where?: MasterSkillsWhereInput
    /**
     * Limit how many MasterSkills to update.
     */
    limit?: number
  }

  /**
   * MasterSkills updateManyAndReturn
   */
  export type MasterSkillsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * The data used to update MasterSkills.
     */
    data: XOR<MasterSkillsUpdateManyMutationInput, MasterSkillsUncheckedUpdateManyInput>
    /**
     * Filter which MasterSkills to update
     */
    where?: MasterSkillsWhereInput
    /**
     * Limit how many MasterSkills to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterSkills upsert
   */
  export type MasterSkillsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterSkills to update in case it exists.
     */
    where: MasterSkillsWhereUniqueInput
    /**
     * In case the MasterSkills found by the `where` argument doesn't exist, create a new MasterSkills with this data.
     */
    create: XOR<MasterSkillsCreateInput, MasterSkillsUncheckedCreateInput>
    /**
     * In case the MasterSkills was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterSkillsUpdateInput, MasterSkillsUncheckedUpdateInput>
  }

  /**
   * MasterSkills delete
   */
  export type MasterSkillsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
    /**
     * Filter which MasterSkills to delete.
     */
    where: MasterSkillsWhereUniqueInput
  }

  /**
   * MasterSkills deleteMany
   */
  export type MasterSkillsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterSkills to delete
     */
    where?: MasterSkillsWhereInput
    /**
     * Limit how many MasterSkills to delete.
     */
    limit?: number
  }

  /**
   * MasterSkills.Level
   */
  export type MasterSkills$LevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    where?: LevelWhereInput
  }

  /**
   * MasterSkills.Profession
   */
  export type MasterSkills$ProfessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    where?: ProfessionWhereInput
  }

  /**
   * MasterSkills without action
   */
  export type MasterSkillsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSkills
     */
    select?: MasterSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterSkills
     */
    omit?: MasterSkillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSkillsInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    total_sum: number | null
  }

  export type OrderSumAggregateOutputType = {
    total_sum: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    total_sum: number | null
    address: string | null
    dete: Date | null
    payment_type: $Enums.PaymentType | null
    paid: boolean | null
    status: $Enums.StatusOrder | null
    with_delivery: boolean | null
    comment_delivery: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    total_sum: number | null
    address: string | null
    dete: Date | null
    payment_type: $Enums.PaymentType | null
    paid: boolean | null
    status: $Enums.StatusOrder | null
    with_delivery: boolean | null
    comment_delivery: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    user_id: number
    total_sum: number
    location: number
    address: number
    dete: number
    payment_type: number
    paid: number
    status: number
    with_delivery: number
    comment_delivery: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    total_sum?: true
  }

  export type OrderSumAggregateInputType = {
    total_sum?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    user_id?: true
    total_sum?: true
    address?: true
    dete?: true
    payment_type?: true
    paid?: true
    status?: true
    with_delivery?: true
    comment_delivery?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    user_id?: true
    total_sum?: true
    address?: true
    dete?: true
    payment_type?: true
    paid?: true
    status?: true
    with_delivery?: true
    comment_delivery?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    user_id?: true
    total_sum?: true
    location?: true
    address?: true
    dete?: true
    payment_type?: true
    paid?: true
    status?: true
    with_delivery?: true
    comment_delivery?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    user_id: string
    total_sum: number
    location: JsonValue
    address: string
    dete: Date
    payment_type: $Enums.PaymentType
    paid: boolean
    status: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt: Date
    updatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    total_sum?: boolean
    location?: boolean
    address?: boolean
    dete?: boolean
    payment_type?: boolean
    paid?: boolean
    status?: boolean
    with_delivery?: boolean
    comment_delivery?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Masters?: boolean | Order$MastersArgs<ExtArgs>
    OrderItems?: boolean | Order$OrderItemsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    total_sum?: boolean
    location?: boolean
    address?: boolean
    dete?: boolean
    payment_type?: boolean
    paid?: boolean
    status?: boolean
    with_delivery?: boolean
    comment_delivery?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    total_sum?: boolean
    location?: boolean
    address?: boolean
    dete?: boolean
    payment_type?: boolean
    paid?: boolean
    status?: boolean
    with_delivery?: boolean
    comment_delivery?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    user_id?: boolean
    total_sum?: boolean
    location?: boolean
    address?: boolean
    dete?: boolean
    payment_type?: boolean
    paid?: boolean
    status?: boolean
    with_delivery?: boolean
    comment_delivery?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "total_sum" | "location" | "address" | "dete" | "payment_type" | "paid" | "status" | "with_delivery" | "comment_delivery" | "createdAt" | "updatedAt", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Masters?: boolean | Order$MastersArgs<ExtArgs>
    OrderItems?: boolean | Order$OrderItemsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Masters: Prisma.$MasterPayload<ExtArgs>[]
      OrderItems: Prisma.$OrderItemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      total_sum: number
      location: Prisma.JsonValue
      address: string
      dete: Date
      payment_type: $Enums.PaymentType
      paid: boolean
      status: $Enums.StatusOrder
      with_delivery: boolean
      comment_delivery: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Masters<T extends Order$MastersArgs<ExtArgs> = {}>(args?: Subset<T, Order$MastersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    OrderItems<T extends Order$OrderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$OrderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly user_id: FieldRef<"Order", 'String'>
    readonly total_sum: FieldRef<"Order", 'Float'>
    readonly location: FieldRef<"Order", 'Json'>
    readonly address: FieldRef<"Order", 'String'>
    readonly dete: FieldRef<"Order", 'DateTime'>
    readonly payment_type: FieldRef<"Order", 'PaymentType'>
    readonly paid: FieldRef<"Order", 'Boolean'>
    readonly status: FieldRef<"Order", 'StatusOrder'>
    readonly with_delivery: FieldRef<"Order", 'Boolean'>
    readonly comment_delivery: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.Masters
   */
  export type Order$MastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    where?: MasterWhereInput
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    cursor?: MasterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Order.OrderItems
   */
  export type Order$OrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    where?: OrderItemsWhereInput
    orderBy?: OrderItemsOrderByWithRelationInput | OrderItemsOrderByWithRelationInput[]
    cursor?: OrderItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItems
   */

  export type AggregateOrderItems = {
    _count: OrderItemsCountAggregateOutputType | null
    _avg: OrderItemsAvgAggregateOutputType | null
    _sum: OrderItemsSumAggregateOutputType | null
    _min: OrderItemsMinAggregateOutputType | null
    _max: OrderItemsMaxAggregateOutputType | null
  }

  export type OrderItemsAvgAggregateOutputType = {
    count: number | null
    time: number | null
    total_sum: number | null
  }

  export type OrderItemsSumAggregateOutputType = {
    count: number | null
    time: number | null
    total_sum: number | null
  }

  export type OrderItemsMinAggregateOutputType = {
    id: string | null
    order_id: string | null
    tool_id: string | null
    profession_id: string | null
    level_id: string | null
    count: number | null
    measure: $Enums.Measure | null
    time: number | null
    total_sum: number | null
  }

  export type OrderItemsMaxAggregateOutputType = {
    id: string | null
    order_id: string | null
    tool_id: string | null
    profession_id: string | null
    level_id: string | null
    count: number | null
    measure: $Enums.Measure | null
    time: number | null
    total_sum: number | null
  }

  export type OrderItemsCountAggregateOutputType = {
    id: number
    order_id: number
    tool_id: number
    profession_id: number
    level_id: number
    count: number
    measure: number
    time: number
    total_sum: number
    _all: number
  }


  export type OrderItemsAvgAggregateInputType = {
    count?: true
    time?: true
    total_sum?: true
  }

  export type OrderItemsSumAggregateInputType = {
    count?: true
    time?: true
    total_sum?: true
  }

  export type OrderItemsMinAggregateInputType = {
    id?: true
    order_id?: true
    tool_id?: true
    profession_id?: true
    level_id?: true
    count?: true
    measure?: true
    time?: true
    total_sum?: true
  }

  export type OrderItemsMaxAggregateInputType = {
    id?: true
    order_id?: true
    tool_id?: true
    profession_id?: true
    level_id?: true
    count?: true
    measure?: true
    time?: true
    total_sum?: true
  }

  export type OrderItemsCountAggregateInputType = {
    id?: true
    order_id?: true
    tool_id?: true
    profession_id?: true
    level_id?: true
    count?: true
    measure?: true
    time?: true
    total_sum?: true
    _all?: true
  }

  export type OrderItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to aggregate.
     */
    where?: OrderItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemsOrderByWithRelationInput | OrderItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemsMaxAggregateInputType
  }

  export type GetOrderItemsAggregateType<T extends OrderItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItems[P]>
      : GetScalarType<T[P], AggregateOrderItems[P]>
  }




  export type OrderItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemsWhereInput
    orderBy?: OrderItemsOrderByWithAggregationInput | OrderItemsOrderByWithAggregationInput[]
    by: OrderItemsScalarFieldEnum[] | OrderItemsScalarFieldEnum
    having?: OrderItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemsCountAggregateInputType | true
    _avg?: OrderItemsAvgAggregateInputType
    _sum?: OrderItemsSumAggregateInputType
    _min?: OrderItemsMinAggregateInputType
    _max?: OrderItemsMaxAggregateInputType
  }

  export type OrderItemsGroupByOutputType = {
    id: string
    order_id: string
    tool_id: string | null
    profession_id: string | null
    level_id: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
    _count: OrderItemsCountAggregateOutputType | null
    _avg: OrderItemsAvgAggregateOutputType | null
    _sum: OrderItemsSumAggregateOutputType | null
    _min: OrderItemsMinAggregateOutputType | null
    _max: OrderItemsMaxAggregateOutputType | null
  }

  type GetOrderItemsGroupByPayload<T extends OrderItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemsGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemsGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    tool_id?: boolean
    profession_id?: boolean
    level_id?: boolean
    count?: boolean
    measure?: boolean
    time?: boolean
    total_sum?: boolean
    Order?: boolean | OrderDefaultArgs<ExtArgs>
    Tool?: boolean | OrderItems$ToolArgs<ExtArgs>
    Profession?: boolean | OrderItems$ProfessionArgs<ExtArgs>
    Level?: boolean | OrderItems$LevelArgs<ExtArgs>
  }, ExtArgs["result"]["orderItems"]>

  export type OrderItemsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    tool_id?: boolean
    profession_id?: boolean
    level_id?: boolean
    count?: boolean
    measure?: boolean
    time?: boolean
    total_sum?: boolean
    Order?: boolean | OrderDefaultArgs<ExtArgs>
    Tool?: boolean | OrderItems$ToolArgs<ExtArgs>
    Profession?: boolean | OrderItems$ProfessionArgs<ExtArgs>
    Level?: boolean | OrderItems$LevelArgs<ExtArgs>
  }, ExtArgs["result"]["orderItems"]>

  export type OrderItemsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    tool_id?: boolean
    profession_id?: boolean
    level_id?: boolean
    count?: boolean
    measure?: boolean
    time?: boolean
    total_sum?: boolean
    Order?: boolean | OrderDefaultArgs<ExtArgs>
    Tool?: boolean | OrderItems$ToolArgs<ExtArgs>
    Profession?: boolean | OrderItems$ProfessionArgs<ExtArgs>
    Level?: boolean | OrderItems$LevelArgs<ExtArgs>
  }, ExtArgs["result"]["orderItems"]>

  export type OrderItemsSelectScalar = {
    id?: boolean
    order_id?: boolean
    tool_id?: boolean
    profession_id?: boolean
    level_id?: boolean
    count?: boolean
    measure?: boolean
    time?: boolean
    total_sum?: boolean
  }

  export type OrderItemsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order_id" | "tool_id" | "profession_id" | "level_id" | "count" | "measure" | "time" | "total_sum", ExtArgs["result"]["orderItems"]>
  export type OrderItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Order?: boolean | OrderDefaultArgs<ExtArgs>
    Tool?: boolean | OrderItems$ToolArgs<ExtArgs>
    Profession?: boolean | OrderItems$ProfessionArgs<ExtArgs>
    Level?: boolean | OrderItems$LevelArgs<ExtArgs>
  }
  export type OrderItemsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Order?: boolean | OrderDefaultArgs<ExtArgs>
    Tool?: boolean | OrderItems$ToolArgs<ExtArgs>
    Profession?: boolean | OrderItems$ProfessionArgs<ExtArgs>
    Level?: boolean | OrderItems$LevelArgs<ExtArgs>
  }
  export type OrderItemsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Order?: boolean | OrderDefaultArgs<ExtArgs>
    Tool?: boolean | OrderItems$ToolArgs<ExtArgs>
    Profession?: boolean | OrderItems$ProfessionArgs<ExtArgs>
    Level?: boolean | OrderItems$LevelArgs<ExtArgs>
  }

  export type $OrderItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItems"
    objects: {
      Order: Prisma.$OrderPayload<ExtArgs>
      Tool: Prisma.$ToolPayload<ExtArgs> | null
      Profession: Prisma.$ProfessionPayload<ExtArgs> | null
      Level: Prisma.$LevelPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      order_id: string
      tool_id: string | null
      profession_id: string | null
      level_id: string | null
      count: number
      measure: $Enums.Measure
      time: number
      total_sum: number
    }, ExtArgs["result"]["orderItems"]>
    composites: {}
  }

  type OrderItemsGetPayload<S extends boolean | null | undefined | OrderItemsDefaultArgs> = $Result.GetResult<Prisma.$OrderItemsPayload, S>

  type OrderItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemsCountAggregateInputType | true
    }

  export interface OrderItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItems'], meta: { name: 'OrderItems' } }
    /**
     * Find zero or one OrderItems that matches the filter.
     * @param {OrderItemsFindUniqueArgs} args - Arguments to find a OrderItems
     * @example
     * // Get one OrderItems
     * const orderItems = await prisma.orderItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemsFindUniqueArgs>(args: SelectSubset<T, OrderItemsFindUniqueArgs<ExtArgs>>): Prisma__OrderItemsClient<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItems that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemsFindUniqueOrThrowArgs} args - Arguments to find a OrderItems
     * @example
     * // Get one OrderItems
     * const orderItems = await prisma.orderItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemsFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemsClient<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemsFindFirstArgs} args - Arguments to find a OrderItems
     * @example
     * // Get one OrderItems
     * const orderItems = await prisma.orderItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemsFindFirstArgs>(args?: SelectSubset<T, OrderItemsFindFirstArgs<ExtArgs>>): Prisma__OrderItemsClient<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItems that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemsFindFirstOrThrowArgs} args - Arguments to find a OrderItems
     * @example
     * // Get one OrderItems
     * const orderItems = await prisma.orderItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemsFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemsFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemsClient<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItems.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItems.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemsWithIdOnly = await prisma.orderItems.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemsFindManyArgs>(args?: SelectSubset<T, OrderItemsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItems.
     * @param {OrderItemsCreateArgs} args - Arguments to create a OrderItems.
     * @example
     * // Create one OrderItems
     * const OrderItems = await prisma.orderItems.create({
     *   data: {
     *     // ... data to create a OrderItems
     *   }
     * })
     * 
     */
    create<T extends OrderItemsCreateArgs>(args: SelectSubset<T, OrderItemsCreateArgs<ExtArgs>>): Prisma__OrderItemsClient<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemsCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItems = await prisma.orderItems.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemsCreateManyArgs>(args?: SelectSubset<T, OrderItemsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderItems and returns the data saved in the database.
     * @param {OrderItemsCreateManyAndReturnArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItems = await prisma.orderItems.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderItems and only return the `id`
     * const orderItemsWithIdOnly = await prisma.orderItems.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderItemsCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderItemsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderItems.
     * @param {OrderItemsDeleteArgs} args - Arguments to delete one OrderItems.
     * @example
     * // Delete one OrderItems
     * const OrderItems = await prisma.orderItems.delete({
     *   where: {
     *     // ... filter to delete one OrderItems
     *   }
     * })
     * 
     */
    delete<T extends OrderItemsDeleteArgs>(args: SelectSubset<T, OrderItemsDeleteArgs<ExtArgs>>): Prisma__OrderItemsClient<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItems.
     * @param {OrderItemsUpdateArgs} args - Arguments to update one OrderItems.
     * @example
     * // Update one OrderItems
     * const orderItems = await prisma.orderItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemsUpdateArgs>(args: SelectSubset<T, OrderItemsUpdateArgs<ExtArgs>>): Prisma__OrderItemsClient<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemsDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemsDeleteManyArgs>(args?: SelectSubset<T, OrderItemsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItems = await prisma.orderItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemsUpdateManyArgs>(args: SelectSubset<T, OrderItemsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems and returns the data updated in the database.
     * @param {OrderItemsUpdateManyAndReturnArgs} args - Arguments to update many OrderItems.
     * @example
     * // Update many OrderItems
     * const orderItems = await prisma.orderItems.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderItems and only return the `id`
     * const orderItemsWithIdOnly = await prisma.orderItems.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderItemsUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderItemsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderItems.
     * @param {OrderItemsUpsertArgs} args - Arguments to update or create a OrderItems.
     * @example
     * // Update or create a OrderItems
     * const orderItems = await prisma.orderItems.upsert({
     *   create: {
     *     // ... data to create a OrderItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItems we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemsUpsertArgs>(args: SelectSubset<T, OrderItemsUpsertArgs<ExtArgs>>): Prisma__OrderItemsClient<$Result.GetResult<Prisma.$OrderItemsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemsCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItems.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemsCountArgs>(
      args?: Subset<T, OrderItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemsAggregateArgs>(args: Subset<T, OrderItemsAggregateArgs>): Prisma.PrismaPromise<GetOrderItemsAggregateType<T>>

    /**
     * Group by OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemsGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItems model
   */
  readonly fields: OrderItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Tool<T extends OrderItems$ToolArgs<ExtArgs> = {}>(args?: Subset<T, OrderItems$ToolArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Profession<T extends OrderItems$ProfessionArgs<ExtArgs> = {}>(args?: Subset<T, OrderItems$ProfessionArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Level<T extends OrderItems$LevelArgs<ExtArgs> = {}>(args?: Subset<T, OrderItems$LevelArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItems model
   */
  interface OrderItemsFieldRefs {
    readonly id: FieldRef<"OrderItems", 'String'>
    readonly order_id: FieldRef<"OrderItems", 'String'>
    readonly tool_id: FieldRef<"OrderItems", 'String'>
    readonly profession_id: FieldRef<"OrderItems", 'String'>
    readonly level_id: FieldRef<"OrderItems", 'String'>
    readonly count: FieldRef<"OrderItems", 'Int'>
    readonly measure: FieldRef<"OrderItems", 'Measure'>
    readonly time: FieldRef<"OrderItems", 'Int'>
    readonly total_sum: FieldRef<"OrderItems", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * OrderItems findUnique
   */
  export type OrderItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where: OrderItemsWhereUniqueInput
  }

  /**
   * OrderItems findUniqueOrThrow
   */
  export type OrderItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where: OrderItemsWhereUniqueInput
  }

  /**
   * OrderItems findFirst
   */
  export type OrderItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemsOrderByWithRelationInput | OrderItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * OrderItems findFirstOrThrow
   */
  export type OrderItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemsOrderByWithRelationInput | OrderItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * OrderItems findMany
   */
  export type OrderItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemsOrderByWithRelationInput | OrderItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemsScalarFieldEnum | OrderItemsScalarFieldEnum[]
  }

  /**
   * OrderItems create
   */
  export type OrderItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItems.
     */
    data: XOR<OrderItemsCreateInput, OrderItemsUncheckedCreateInput>
  }

  /**
   * OrderItems createMany
   */
  export type OrderItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemsCreateManyInput | OrderItemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItems createManyAndReturn
   */
  export type OrderItemsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemsCreateManyInput | OrderItemsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItems update
   */
  export type OrderItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItems.
     */
    data: XOR<OrderItemsUpdateInput, OrderItemsUncheckedUpdateInput>
    /**
     * Choose, which OrderItems to update.
     */
    where: OrderItemsWhereUniqueInput
  }

  /**
   * OrderItems updateMany
   */
  export type OrderItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemsUpdateManyMutationInput, OrderItemsUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemsWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItems updateManyAndReturn
   */
  export type OrderItemsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemsUpdateManyMutationInput, OrderItemsUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemsWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItems upsert
   */
  export type OrderItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItems to update in case it exists.
     */
    where: OrderItemsWhereUniqueInput
    /**
     * In case the OrderItems found by the `where` argument doesn't exist, create a new OrderItems with this data.
     */
    create: XOR<OrderItemsCreateInput, OrderItemsUncheckedCreateInput>
    /**
     * In case the OrderItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemsUpdateInput, OrderItemsUncheckedUpdateInput>
  }

  /**
   * OrderItems delete
   */
  export type OrderItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
    /**
     * Filter which OrderItems to delete.
     */
    where: OrderItemsWhereUniqueInput
  }

  /**
   * OrderItems deleteMany
   */
  export type OrderItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemsWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItems.Tool
   */
  export type OrderItems$ToolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
  }

  /**
   * OrderItems.Profession
   */
  export type OrderItems$ProfessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    where?: ProfessionWhereInput
  }

  /**
   * OrderItems.Level
   */
  export type OrderItems$LevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    where?: LevelWhereInput
  }

  /**
   * OrderItems without action
   */
  export type OrderItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItems
     */
    select?: OrderItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItems
     */
    omit?: OrderItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemsInclude<ExtArgs> | null
  }


  /**
   * Model BacketItems
   */

  export type AggregateBacketItems = {
    _count: BacketItemsCountAggregateOutputType | null
    _avg: BacketItemsAvgAggregateOutputType | null
    _sum: BacketItemsSumAggregateOutputType | null
    _min: BacketItemsMinAggregateOutputType | null
    _max: BacketItemsMaxAggregateOutputType | null
  }

  export type BacketItemsAvgAggregateOutputType = {
    count: number | null
    time: number | null
  }

  export type BacketItemsSumAggregateOutputType = {
    count: number | null
    time: number | null
  }

  export type BacketItemsMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    profession_id: string | null
    tool_id: string | null
    level_id: string | null
    count: number | null
    measure: $Enums.Measure | null
    time: number | null
  }

  export type BacketItemsMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    profession_id: string | null
    tool_id: string | null
    level_id: string | null
    count: number | null
    measure: $Enums.Measure | null
    time: number | null
  }

  export type BacketItemsCountAggregateOutputType = {
    id: number
    user_id: number
    profession_id: number
    tool_id: number
    level_id: number
    count: number
    measure: number
    time: number
    _all: number
  }


  export type BacketItemsAvgAggregateInputType = {
    count?: true
    time?: true
  }

  export type BacketItemsSumAggregateInputType = {
    count?: true
    time?: true
  }

  export type BacketItemsMinAggregateInputType = {
    id?: true
    user_id?: true
    profession_id?: true
    tool_id?: true
    level_id?: true
    count?: true
    measure?: true
    time?: true
  }

  export type BacketItemsMaxAggregateInputType = {
    id?: true
    user_id?: true
    profession_id?: true
    tool_id?: true
    level_id?: true
    count?: true
    measure?: true
    time?: true
  }

  export type BacketItemsCountAggregateInputType = {
    id?: true
    user_id?: true
    profession_id?: true
    tool_id?: true
    level_id?: true
    count?: true
    measure?: true
    time?: true
    _all?: true
  }

  export type BacketItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BacketItems to aggregate.
     */
    where?: BacketItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BacketItems to fetch.
     */
    orderBy?: BacketItemsOrderByWithRelationInput | BacketItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BacketItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BacketItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BacketItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BacketItems
    **/
    _count?: true | BacketItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BacketItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BacketItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BacketItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BacketItemsMaxAggregateInputType
  }

  export type GetBacketItemsAggregateType<T extends BacketItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateBacketItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBacketItems[P]>
      : GetScalarType<T[P], AggregateBacketItems[P]>
  }




  export type BacketItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BacketItemsWhereInput
    orderBy?: BacketItemsOrderByWithAggregationInput | BacketItemsOrderByWithAggregationInput[]
    by: BacketItemsScalarFieldEnum[] | BacketItemsScalarFieldEnum
    having?: BacketItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BacketItemsCountAggregateInputType | true
    _avg?: BacketItemsAvgAggregateInputType
    _sum?: BacketItemsSumAggregateInputType
    _min?: BacketItemsMinAggregateInputType
    _max?: BacketItemsMaxAggregateInputType
  }

  export type BacketItemsGroupByOutputType = {
    id: string
    user_id: string
    profession_id: string | null
    tool_id: string | null
    level_id: string | null
    count: number
    measure: $Enums.Measure
    time: number
    _count: BacketItemsCountAggregateOutputType | null
    _avg: BacketItemsAvgAggregateOutputType | null
    _sum: BacketItemsSumAggregateOutputType | null
    _min: BacketItemsMinAggregateOutputType | null
    _max: BacketItemsMaxAggregateOutputType | null
  }

  type GetBacketItemsGroupByPayload<T extends BacketItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BacketItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BacketItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BacketItemsGroupByOutputType[P]>
            : GetScalarType<T[P], BacketItemsGroupByOutputType[P]>
        }
      >
    >


  export type BacketItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    profession_id?: boolean
    tool_id?: boolean
    level_id?: boolean
    count?: boolean
    measure?: boolean
    time?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Pofession?: boolean | BacketItems$PofessionArgs<ExtArgs>
    Tool?: boolean | BacketItems$ToolArgs<ExtArgs>
    Level?: boolean | BacketItems$LevelArgs<ExtArgs>
  }, ExtArgs["result"]["backetItems"]>

  export type BacketItemsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    profession_id?: boolean
    tool_id?: boolean
    level_id?: boolean
    count?: boolean
    measure?: boolean
    time?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Pofession?: boolean | BacketItems$PofessionArgs<ExtArgs>
    Tool?: boolean | BacketItems$ToolArgs<ExtArgs>
    Level?: boolean | BacketItems$LevelArgs<ExtArgs>
  }, ExtArgs["result"]["backetItems"]>

  export type BacketItemsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    profession_id?: boolean
    tool_id?: boolean
    level_id?: boolean
    count?: boolean
    measure?: boolean
    time?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Pofession?: boolean | BacketItems$PofessionArgs<ExtArgs>
    Tool?: boolean | BacketItems$ToolArgs<ExtArgs>
    Level?: boolean | BacketItems$LevelArgs<ExtArgs>
  }, ExtArgs["result"]["backetItems"]>

  export type BacketItemsSelectScalar = {
    id?: boolean
    user_id?: boolean
    profession_id?: boolean
    tool_id?: boolean
    level_id?: boolean
    count?: boolean
    measure?: boolean
    time?: boolean
  }

  export type BacketItemsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "profession_id" | "tool_id" | "level_id" | "count" | "measure" | "time", ExtArgs["result"]["backetItems"]>
  export type BacketItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Pofession?: boolean | BacketItems$PofessionArgs<ExtArgs>
    Tool?: boolean | BacketItems$ToolArgs<ExtArgs>
    Level?: boolean | BacketItems$LevelArgs<ExtArgs>
  }
  export type BacketItemsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Pofession?: boolean | BacketItems$PofessionArgs<ExtArgs>
    Tool?: boolean | BacketItems$ToolArgs<ExtArgs>
    Level?: boolean | BacketItems$LevelArgs<ExtArgs>
  }
  export type BacketItemsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Pofession?: boolean | BacketItems$PofessionArgs<ExtArgs>
    Tool?: boolean | BacketItems$ToolArgs<ExtArgs>
    Level?: boolean | BacketItems$LevelArgs<ExtArgs>
  }

  export type $BacketItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BacketItems"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Pofession: Prisma.$ProfessionPayload<ExtArgs> | null
      Tool: Prisma.$ToolPayload<ExtArgs> | null
      Level: Prisma.$LevelPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      profession_id: string | null
      tool_id: string | null
      level_id: string | null
      count: number
      measure: $Enums.Measure
      time: number
    }, ExtArgs["result"]["backetItems"]>
    composites: {}
  }

  type BacketItemsGetPayload<S extends boolean | null | undefined | BacketItemsDefaultArgs> = $Result.GetResult<Prisma.$BacketItemsPayload, S>

  type BacketItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BacketItemsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BacketItemsCountAggregateInputType | true
    }

  export interface BacketItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BacketItems'], meta: { name: 'BacketItems' } }
    /**
     * Find zero or one BacketItems that matches the filter.
     * @param {BacketItemsFindUniqueArgs} args - Arguments to find a BacketItems
     * @example
     * // Get one BacketItems
     * const backetItems = await prisma.backetItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BacketItemsFindUniqueArgs>(args: SelectSubset<T, BacketItemsFindUniqueArgs<ExtArgs>>): Prisma__BacketItemsClient<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BacketItems that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BacketItemsFindUniqueOrThrowArgs} args - Arguments to find a BacketItems
     * @example
     * // Get one BacketItems
     * const backetItems = await prisma.backetItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BacketItemsFindUniqueOrThrowArgs>(args: SelectSubset<T, BacketItemsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BacketItemsClient<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BacketItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacketItemsFindFirstArgs} args - Arguments to find a BacketItems
     * @example
     * // Get one BacketItems
     * const backetItems = await prisma.backetItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BacketItemsFindFirstArgs>(args?: SelectSubset<T, BacketItemsFindFirstArgs<ExtArgs>>): Prisma__BacketItemsClient<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BacketItems that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacketItemsFindFirstOrThrowArgs} args - Arguments to find a BacketItems
     * @example
     * // Get one BacketItems
     * const backetItems = await prisma.backetItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BacketItemsFindFirstOrThrowArgs>(args?: SelectSubset<T, BacketItemsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BacketItemsClient<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BacketItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacketItemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BacketItems
     * const backetItems = await prisma.backetItems.findMany()
     * 
     * // Get first 10 BacketItems
     * const backetItems = await prisma.backetItems.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const backetItemsWithIdOnly = await prisma.backetItems.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BacketItemsFindManyArgs>(args?: SelectSubset<T, BacketItemsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BacketItems.
     * @param {BacketItemsCreateArgs} args - Arguments to create a BacketItems.
     * @example
     * // Create one BacketItems
     * const BacketItems = await prisma.backetItems.create({
     *   data: {
     *     // ... data to create a BacketItems
     *   }
     * })
     * 
     */
    create<T extends BacketItemsCreateArgs>(args: SelectSubset<T, BacketItemsCreateArgs<ExtArgs>>): Prisma__BacketItemsClient<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BacketItems.
     * @param {BacketItemsCreateManyArgs} args - Arguments to create many BacketItems.
     * @example
     * // Create many BacketItems
     * const backetItems = await prisma.backetItems.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BacketItemsCreateManyArgs>(args?: SelectSubset<T, BacketItemsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BacketItems and returns the data saved in the database.
     * @param {BacketItemsCreateManyAndReturnArgs} args - Arguments to create many BacketItems.
     * @example
     * // Create many BacketItems
     * const backetItems = await prisma.backetItems.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BacketItems and only return the `id`
     * const backetItemsWithIdOnly = await prisma.backetItems.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BacketItemsCreateManyAndReturnArgs>(args?: SelectSubset<T, BacketItemsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BacketItems.
     * @param {BacketItemsDeleteArgs} args - Arguments to delete one BacketItems.
     * @example
     * // Delete one BacketItems
     * const BacketItems = await prisma.backetItems.delete({
     *   where: {
     *     // ... filter to delete one BacketItems
     *   }
     * })
     * 
     */
    delete<T extends BacketItemsDeleteArgs>(args: SelectSubset<T, BacketItemsDeleteArgs<ExtArgs>>): Prisma__BacketItemsClient<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BacketItems.
     * @param {BacketItemsUpdateArgs} args - Arguments to update one BacketItems.
     * @example
     * // Update one BacketItems
     * const backetItems = await prisma.backetItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BacketItemsUpdateArgs>(args: SelectSubset<T, BacketItemsUpdateArgs<ExtArgs>>): Prisma__BacketItemsClient<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BacketItems.
     * @param {BacketItemsDeleteManyArgs} args - Arguments to filter BacketItems to delete.
     * @example
     * // Delete a few BacketItems
     * const { count } = await prisma.backetItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BacketItemsDeleteManyArgs>(args?: SelectSubset<T, BacketItemsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BacketItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacketItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BacketItems
     * const backetItems = await prisma.backetItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BacketItemsUpdateManyArgs>(args: SelectSubset<T, BacketItemsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BacketItems and returns the data updated in the database.
     * @param {BacketItemsUpdateManyAndReturnArgs} args - Arguments to update many BacketItems.
     * @example
     * // Update many BacketItems
     * const backetItems = await prisma.backetItems.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BacketItems and only return the `id`
     * const backetItemsWithIdOnly = await prisma.backetItems.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BacketItemsUpdateManyAndReturnArgs>(args: SelectSubset<T, BacketItemsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BacketItems.
     * @param {BacketItemsUpsertArgs} args - Arguments to update or create a BacketItems.
     * @example
     * // Update or create a BacketItems
     * const backetItems = await prisma.backetItems.upsert({
     *   create: {
     *     // ... data to create a BacketItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BacketItems we want to update
     *   }
     * })
     */
    upsert<T extends BacketItemsUpsertArgs>(args: SelectSubset<T, BacketItemsUpsertArgs<ExtArgs>>): Prisma__BacketItemsClient<$Result.GetResult<Prisma.$BacketItemsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BacketItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacketItemsCountArgs} args - Arguments to filter BacketItems to count.
     * @example
     * // Count the number of BacketItems
     * const count = await prisma.backetItems.count({
     *   where: {
     *     // ... the filter for the BacketItems we want to count
     *   }
     * })
    **/
    count<T extends BacketItemsCountArgs>(
      args?: Subset<T, BacketItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BacketItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BacketItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacketItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BacketItemsAggregateArgs>(args: Subset<T, BacketItemsAggregateArgs>): Prisma.PrismaPromise<GetBacketItemsAggregateType<T>>

    /**
     * Group by BacketItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacketItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BacketItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BacketItemsGroupByArgs['orderBy'] }
        : { orderBy?: BacketItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BacketItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBacketItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BacketItems model
   */
  readonly fields: BacketItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BacketItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BacketItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Pofession<T extends BacketItems$PofessionArgs<ExtArgs> = {}>(args?: Subset<T, BacketItems$PofessionArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Tool<T extends BacketItems$ToolArgs<ExtArgs> = {}>(args?: Subset<T, BacketItems$ToolArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Level<T extends BacketItems$LevelArgs<ExtArgs> = {}>(args?: Subset<T, BacketItems$LevelArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BacketItems model
   */
  interface BacketItemsFieldRefs {
    readonly id: FieldRef<"BacketItems", 'String'>
    readonly user_id: FieldRef<"BacketItems", 'String'>
    readonly profession_id: FieldRef<"BacketItems", 'String'>
    readonly tool_id: FieldRef<"BacketItems", 'String'>
    readonly level_id: FieldRef<"BacketItems", 'String'>
    readonly count: FieldRef<"BacketItems", 'Int'>
    readonly measure: FieldRef<"BacketItems", 'Measure'>
    readonly time: FieldRef<"BacketItems", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BacketItems findUnique
   */
  export type BacketItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    /**
     * Filter, which BacketItems to fetch.
     */
    where: BacketItemsWhereUniqueInput
  }

  /**
   * BacketItems findUniqueOrThrow
   */
  export type BacketItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    /**
     * Filter, which BacketItems to fetch.
     */
    where: BacketItemsWhereUniqueInput
  }

  /**
   * BacketItems findFirst
   */
  export type BacketItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    /**
     * Filter, which BacketItems to fetch.
     */
    where?: BacketItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BacketItems to fetch.
     */
    orderBy?: BacketItemsOrderByWithRelationInput | BacketItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BacketItems.
     */
    cursor?: BacketItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BacketItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BacketItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BacketItems.
     */
    distinct?: BacketItemsScalarFieldEnum | BacketItemsScalarFieldEnum[]
  }

  /**
   * BacketItems findFirstOrThrow
   */
  export type BacketItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    /**
     * Filter, which BacketItems to fetch.
     */
    where?: BacketItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BacketItems to fetch.
     */
    orderBy?: BacketItemsOrderByWithRelationInput | BacketItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BacketItems.
     */
    cursor?: BacketItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BacketItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BacketItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BacketItems.
     */
    distinct?: BacketItemsScalarFieldEnum | BacketItemsScalarFieldEnum[]
  }

  /**
   * BacketItems findMany
   */
  export type BacketItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    /**
     * Filter, which BacketItems to fetch.
     */
    where?: BacketItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BacketItems to fetch.
     */
    orderBy?: BacketItemsOrderByWithRelationInput | BacketItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BacketItems.
     */
    cursor?: BacketItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BacketItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BacketItems.
     */
    skip?: number
    distinct?: BacketItemsScalarFieldEnum | BacketItemsScalarFieldEnum[]
  }

  /**
   * BacketItems create
   */
  export type BacketItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a BacketItems.
     */
    data: XOR<BacketItemsCreateInput, BacketItemsUncheckedCreateInput>
  }

  /**
   * BacketItems createMany
   */
  export type BacketItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BacketItems.
     */
    data: BacketItemsCreateManyInput | BacketItemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BacketItems createManyAndReturn
   */
  export type BacketItemsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * The data used to create many BacketItems.
     */
    data: BacketItemsCreateManyInput | BacketItemsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BacketItems update
   */
  export type BacketItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a BacketItems.
     */
    data: XOR<BacketItemsUpdateInput, BacketItemsUncheckedUpdateInput>
    /**
     * Choose, which BacketItems to update.
     */
    where: BacketItemsWhereUniqueInput
  }

  /**
   * BacketItems updateMany
   */
  export type BacketItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BacketItems.
     */
    data: XOR<BacketItemsUpdateManyMutationInput, BacketItemsUncheckedUpdateManyInput>
    /**
     * Filter which BacketItems to update
     */
    where?: BacketItemsWhereInput
    /**
     * Limit how many BacketItems to update.
     */
    limit?: number
  }

  /**
   * BacketItems updateManyAndReturn
   */
  export type BacketItemsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * The data used to update BacketItems.
     */
    data: XOR<BacketItemsUpdateManyMutationInput, BacketItemsUncheckedUpdateManyInput>
    /**
     * Filter which BacketItems to update
     */
    where?: BacketItemsWhereInput
    /**
     * Limit how many BacketItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BacketItems upsert
   */
  export type BacketItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the BacketItems to update in case it exists.
     */
    where: BacketItemsWhereUniqueInput
    /**
     * In case the BacketItems found by the `where` argument doesn't exist, create a new BacketItems with this data.
     */
    create: XOR<BacketItemsCreateInput, BacketItemsUncheckedCreateInput>
    /**
     * In case the BacketItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BacketItemsUpdateInput, BacketItemsUncheckedUpdateInput>
  }

  /**
   * BacketItems delete
   */
  export type BacketItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
    /**
     * Filter which BacketItems to delete.
     */
    where: BacketItemsWhereUniqueInput
  }

  /**
   * BacketItems deleteMany
   */
  export type BacketItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BacketItems to delete
     */
    where?: BacketItemsWhereInput
    /**
     * Limit how many BacketItems to delete.
     */
    limit?: number
  }

  /**
   * BacketItems.Pofession
   */
  export type BacketItems$PofessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    where?: ProfessionWhereInput
  }

  /**
   * BacketItems.Tool
   */
  export type BacketItems$ToolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
  }

  /**
   * BacketItems.Level
   */
  export type BacketItems$LevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    where?: LevelWhereInput
  }

  /**
   * BacketItems without action
   */
  export type BacketItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacketItems
     */
    select?: BacketItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BacketItems
     */
    omit?: BacketItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BacketItemsInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    text: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    text: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    text: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    text: string
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    MasterRatings?: boolean | Comment$MasterRatingsArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "createdAt" | "updatedAt", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterRatings?: boolean | Comment$MasterRatingsArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      MasterRatings: Prisma.$MasterRatingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MasterRatings<T extends Comment$MasterRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Comment$MasterRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly text: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment.MasterRatings
   */
  export type Comment$MasterRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    where?: MasterRatingsWhereInput
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    cursor?: MasterRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model MasterRatings
   */

  export type AggregateMasterRatings = {
    _count: MasterRatingsCountAggregateOutputType | null
    _avg: MasterRatingsAvgAggregateOutputType | null
    _sum: MasterRatingsSumAggregateOutputType | null
    _min: MasterRatingsMinAggregateOutputType | null
    _max: MasterRatingsMaxAggregateOutputType | null
  }

  export type MasterRatingsAvgAggregateOutputType = {
    star: number | null
  }

  export type MasterRatingsSumAggregateOutputType = {
    star: number | null
  }

  export type MasterRatingsMinAggregateOutputType = {
    id: string | null
    star: number | null
    master_id: string | null
    comment_id: string | null
  }

  export type MasterRatingsMaxAggregateOutputType = {
    id: string | null
    star: number | null
    master_id: string | null
    comment_id: string | null
  }

  export type MasterRatingsCountAggregateOutputType = {
    id: number
    star: number
    master_id: number
    comment_id: number
    _all: number
  }


  export type MasterRatingsAvgAggregateInputType = {
    star?: true
  }

  export type MasterRatingsSumAggregateInputType = {
    star?: true
  }

  export type MasterRatingsMinAggregateInputType = {
    id?: true
    star?: true
    master_id?: true
    comment_id?: true
  }

  export type MasterRatingsMaxAggregateInputType = {
    id?: true
    star?: true
    master_id?: true
    comment_id?: true
  }

  export type MasterRatingsCountAggregateInputType = {
    id?: true
    star?: true
    master_id?: true
    comment_id?: true
    _all?: true
  }

  export type MasterRatingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterRatings to aggregate.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterRatings
    **/
    _count?: true | MasterRatingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterRatingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterRatingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterRatingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterRatingsMaxAggregateInputType
  }

  export type GetMasterRatingsAggregateType<T extends MasterRatingsAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterRatings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterRatings[P]>
      : GetScalarType<T[P], AggregateMasterRatings[P]>
  }




  export type MasterRatingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterRatingsWhereInput
    orderBy?: MasterRatingsOrderByWithAggregationInput | MasterRatingsOrderByWithAggregationInput[]
    by: MasterRatingsScalarFieldEnum[] | MasterRatingsScalarFieldEnum
    having?: MasterRatingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterRatingsCountAggregateInputType | true
    _avg?: MasterRatingsAvgAggregateInputType
    _sum?: MasterRatingsSumAggregateInputType
    _min?: MasterRatingsMinAggregateInputType
    _max?: MasterRatingsMaxAggregateInputType
  }

  export type MasterRatingsGroupByOutputType = {
    id: string
    star: number
    master_id: string
    comment_id: string
    _count: MasterRatingsCountAggregateOutputType | null
    _avg: MasterRatingsAvgAggregateOutputType | null
    _sum: MasterRatingsSumAggregateOutputType | null
    _min: MasterRatingsMinAggregateOutputType | null
    _max: MasterRatingsMaxAggregateOutputType | null
  }

  type GetMasterRatingsGroupByPayload<T extends MasterRatingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterRatingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterRatingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterRatingsGroupByOutputType[P]>
            : GetScalarType<T[P], MasterRatingsGroupByOutputType[P]>
        }
      >
    >


  export type MasterRatingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    star?: boolean
    master_id?: boolean
    comment_id?: boolean
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterRatings"]>

  export type MasterRatingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    star?: boolean
    master_id?: boolean
    comment_id?: boolean
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterRatings"]>

  export type MasterRatingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    star?: boolean
    master_id?: boolean
    comment_id?: boolean
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterRatings"]>

  export type MasterRatingsSelectScalar = {
    id?: boolean
    star?: boolean
    master_id?: boolean
    comment_id?: boolean
  }

  export type MasterRatingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "star" | "master_id" | "comment_id", ExtArgs["result"]["masterRatings"]>
  export type MasterRatingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }
  export type MasterRatingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }
  export type MasterRatingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }

  export type $MasterRatingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterRatings"
    objects: {
      Master: Prisma.$MasterPayload<ExtArgs>
      Comment: Prisma.$CommentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      star: number
      master_id: string
      comment_id: string
    }, ExtArgs["result"]["masterRatings"]>
    composites: {}
  }

  type MasterRatingsGetPayload<S extends boolean | null | undefined | MasterRatingsDefaultArgs> = $Result.GetResult<Prisma.$MasterRatingsPayload, S>

  type MasterRatingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterRatingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterRatingsCountAggregateInputType | true
    }

  export interface MasterRatingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterRatings'], meta: { name: 'MasterRatings' } }
    /**
     * Find zero or one MasterRatings that matches the filter.
     * @param {MasterRatingsFindUniqueArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterRatingsFindUniqueArgs>(args: SelectSubset<T, MasterRatingsFindUniqueArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MasterRatings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterRatingsFindUniqueOrThrowArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterRatingsFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterRatingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsFindFirstArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterRatingsFindFirstArgs>(args?: SelectSubset<T, MasterRatingsFindFirstArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterRatings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsFindFirstOrThrowArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterRatingsFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterRatingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MasterRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterRatings
     * const masterRatings = await prisma.masterRatings.findMany()
     * 
     * // Get first 10 MasterRatings
     * const masterRatings = await prisma.masterRatings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterRatingsWithIdOnly = await prisma.masterRatings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterRatingsFindManyArgs>(args?: SelectSubset<T, MasterRatingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MasterRatings.
     * @param {MasterRatingsCreateArgs} args - Arguments to create a MasterRatings.
     * @example
     * // Create one MasterRatings
     * const MasterRatings = await prisma.masterRatings.create({
     *   data: {
     *     // ... data to create a MasterRatings
     *   }
     * })
     * 
     */
    create<T extends MasterRatingsCreateArgs>(args: SelectSubset<T, MasterRatingsCreateArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MasterRatings.
     * @param {MasterRatingsCreateManyArgs} args - Arguments to create many MasterRatings.
     * @example
     * // Create many MasterRatings
     * const masterRatings = await prisma.masterRatings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterRatingsCreateManyArgs>(args?: SelectSubset<T, MasterRatingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterRatings and returns the data saved in the database.
     * @param {MasterRatingsCreateManyAndReturnArgs} args - Arguments to create many MasterRatings.
     * @example
     * // Create many MasterRatings
     * const masterRatings = await prisma.masterRatings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterRatings and only return the `id`
     * const masterRatingsWithIdOnly = await prisma.masterRatings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterRatingsCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterRatingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MasterRatings.
     * @param {MasterRatingsDeleteArgs} args - Arguments to delete one MasterRatings.
     * @example
     * // Delete one MasterRatings
     * const MasterRatings = await prisma.masterRatings.delete({
     *   where: {
     *     // ... filter to delete one MasterRatings
     *   }
     * })
     * 
     */
    delete<T extends MasterRatingsDeleteArgs>(args: SelectSubset<T, MasterRatingsDeleteArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MasterRatings.
     * @param {MasterRatingsUpdateArgs} args - Arguments to update one MasterRatings.
     * @example
     * // Update one MasterRatings
     * const masterRatings = await prisma.masterRatings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterRatingsUpdateArgs>(args: SelectSubset<T, MasterRatingsUpdateArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MasterRatings.
     * @param {MasterRatingsDeleteManyArgs} args - Arguments to filter MasterRatings to delete.
     * @example
     * // Delete a few MasterRatings
     * const { count } = await prisma.masterRatings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterRatingsDeleteManyArgs>(args?: SelectSubset<T, MasterRatingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterRatings
     * const masterRatings = await prisma.masterRatings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterRatingsUpdateManyArgs>(args: SelectSubset<T, MasterRatingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterRatings and returns the data updated in the database.
     * @param {MasterRatingsUpdateManyAndReturnArgs} args - Arguments to update many MasterRatings.
     * @example
     * // Update many MasterRatings
     * const masterRatings = await prisma.masterRatings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MasterRatings and only return the `id`
     * const masterRatingsWithIdOnly = await prisma.masterRatings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterRatingsUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterRatingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MasterRatings.
     * @param {MasterRatingsUpsertArgs} args - Arguments to update or create a MasterRatings.
     * @example
     * // Update or create a MasterRatings
     * const masterRatings = await prisma.masterRatings.upsert({
     *   create: {
     *     // ... data to create a MasterRatings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterRatings we want to update
     *   }
     * })
     */
    upsert<T extends MasterRatingsUpsertArgs>(args: SelectSubset<T, MasterRatingsUpsertArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsCountArgs} args - Arguments to filter MasterRatings to count.
     * @example
     * // Count the number of MasterRatings
     * const count = await prisma.masterRatings.count({
     *   where: {
     *     // ... the filter for the MasterRatings we want to count
     *   }
     * })
    **/
    count<T extends MasterRatingsCountArgs>(
      args?: Subset<T, MasterRatingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterRatingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterRatingsAggregateArgs>(args: Subset<T, MasterRatingsAggregateArgs>): Prisma.PrismaPromise<GetMasterRatingsAggregateType<T>>

    /**
     * Group by MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterRatingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterRatingsGroupByArgs['orderBy'] }
        : { orderBy?: MasterRatingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterRatingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterRatingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterRatings model
   */
  readonly fields: MasterRatingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterRatings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterRatingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Master<T extends MasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDefaultArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Comment<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterRatings model
   */
  interface MasterRatingsFieldRefs {
    readonly id: FieldRef<"MasterRatings", 'String'>
    readonly star: FieldRef<"MasterRatings", 'Float'>
    readonly master_id: FieldRef<"MasterRatings", 'String'>
    readonly comment_id: FieldRef<"MasterRatings", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MasterRatings findUnique
   */
  export type MasterRatingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings findUniqueOrThrow
   */
  export type MasterRatingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings findFirst
   */
  export type MasterRatingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterRatings.
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterRatings.
     */
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * MasterRatings findFirstOrThrow
   */
  export type MasterRatingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterRatings.
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterRatings.
     */
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * MasterRatings findMany
   */
  export type MasterRatingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterRatings.
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * MasterRatings create
   */
  export type MasterRatingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterRatings.
     */
    data: XOR<MasterRatingsCreateInput, MasterRatingsUncheckedCreateInput>
  }

  /**
   * MasterRatings createMany
   */
  export type MasterRatingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterRatings.
     */
    data: MasterRatingsCreateManyInput | MasterRatingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterRatings createManyAndReturn
   */
  export type MasterRatingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * The data used to create many MasterRatings.
     */
    data: MasterRatingsCreateManyInput | MasterRatingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterRatings update
   */
  export type MasterRatingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterRatings.
     */
    data: XOR<MasterRatingsUpdateInput, MasterRatingsUncheckedUpdateInput>
    /**
     * Choose, which MasterRatings to update.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings updateMany
   */
  export type MasterRatingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterRatings.
     */
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyInput>
    /**
     * Filter which MasterRatings to update
     */
    where?: MasterRatingsWhereInput
    /**
     * Limit how many MasterRatings to update.
     */
    limit?: number
  }

  /**
   * MasterRatings updateManyAndReturn
   */
  export type MasterRatingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * The data used to update MasterRatings.
     */
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyInput>
    /**
     * Filter which MasterRatings to update
     */
    where?: MasterRatingsWhereInput
    /**
     * Limit how many MasterRatings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterRatings upsert
   */
  export type MasterRatingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterRatings to update in case it exists.
     */
    where: MasterRatingsWhereUniqueInput
    /**
     * In case the MasterRatings found by the `where` argument doesn't exist, create a new MasterRatings with this data.
     */
    create: XOR<MasterRatingsCreateInput, MasterRatingsUncheckedCreateInput>
    /**
     * In case the MasterRatings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterRatingsUpdateInput, MasterRatingsUncheckedUpdateInput>
  }

  /**
   * MasterRatings delete
   */
  export type MasterRatingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter which MasterRatings to delete.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings deleteMany
   */
  export type MasterRatingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterRatings to delete
     */
    where?: MasterRatingsWhereInput
    /**
     * Limit how many MasterRatings to delete.
     */
    limit?: number
  }

  /**
   * MasterRatings without action
   */
  export type MasterRatingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
  }


  /**
   * Model Info
   */

  export type AggregateInfo = {
    _count: InfoCountAggregateOutputType | null
    _min: InfoMinAggregateOutputType | null
    _max: InfoMaxAggregateOutputType | null
  }

  export type InfoMinAggregateOutputType = {
    id: string | null
    email: string | null
  }

  export type InfoMaxAggregateOutputType = {
    id: string | null
    email: string | null
  }

  export type InfoCountAggregateOutputType = {
    id: number
    email: number
    links: number
    phone: number
    _all: number
  }


  export type InfoMinAggregateInputType = {
    id?: true
    email?: true
  }

  export type InfoMaxAggregateInputType = {
    id?: true
    email?: true
  }

  export type InfoCountAggregateInputType = {
    id?: true
    email?: true
    links?: true
    phone?: true
    _all?: true
  }

  export type InfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Info to aggregate.
     */
    where?: InfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infos to fetch.
     */
    orderBy?: InfoOrderByWithRelationInput | InfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Infos
    **/
    _count?: true | InfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InfoMaxAggregateInputType
  }

  export type GetInfoAggregateType<T extends InfoAggregateArgs> = {
        [P in keyof T & keyof AggregateInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInfo[P]>
      : GetScalarType<T[P], AggregateInfo[P]>
  }




  export type InfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InfoWhereInput
    orderBy?: InfoOrderByWithAggregationInput | InfoOrderByWithAggregationInput[]
    by: InfoScalarFieldEnum[] | InfoScalarFieldEnum
    having?: InfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InfoCountAggregateInputType | true
    _min?: InfoMinAggregateInputType
    _max?: InfoMaxAggregateInputType
  }

  export type InfoGroupByOutputType = {
    id: string
    email: string
    links: JsonValue
    phone: string[]
    _count: InfoCountAggregateOutputType | null
    _min: InfoMinAggregateOutputType | null
    _max: InfoMaxAggregateOutputType | null
  }

  type GetInfoGroupByPayload<T extends InfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InfoGroupByOutputType[P]>
            : GetScalarType<T[P], InfoGroupByOutputType[P]>
        }
      >
    >


  export type InfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    links?: boolean
    phone?: boolean
  }, ExtArgs["result"]["info"]>

  export type InfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    links?: boolean
    phone?: boolean
  }, ExtArgs["result"]["info"]>

  export type InfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    links?: boolean
    phone?: boolean
  }, ExtArgs["result"]["info"]>

  export type InfoSelectScalar = {
    id?: boolean
    email?: boolean
    links?: boolean
    phone?: boolean
  }

  export type InfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "links" | "phone", ExtArgs["result"]["info"]>

  export type $InfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Info"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      links: Prisma.JsonValue
      phone: string[]
    }, ExtArgs["result"]["info"]>
    composites: {}
  }

  type InfoGetPayload<S extends boolean | null | undefined | InfoDefaultArgs> = $Result.GetResult<Prisma.$InfoPayload, S>

  type InfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InfoCountAggregateInputType | true
    }

  export interface InfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Info'], meta: { name: 'Info' } }
    /**
     * Find zero or one Info that matches the filter.
     * @param {InfoFindUniqueArgs} args - Arguments to find a Info
     * @example
     * // Get one Info
     * const info = await prisma.info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InfoFindUniqueArgs>(args: SelectSubset<T, InfoFindUniqueArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Info that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InfoFindUniqueOrThrowArgs} args - Arguments to find a Info
     * @example
     * // Get one Info
     * const info = await prisma.info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InfoFindUniqueOrThrowArgs>(args: SelectSubset<T, InfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoFindFirstArgs} args - Arguments to find a Info
     * @example
     * // Get one Info
     * const info = await prisma.info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InfoFindFirstArgs>(args?: SelectSubset<T, InfoFindFirstArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Info that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoFindFirstOrThrowArgs} args - Arguments to find a Info
     * @example
     * // Get one Info
     * const info = await prisma.info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InfoFindFirstOrThrowArgs>(args?: SelectSubset<T, InfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Infos
     * const infos = await prisma.info.findMany()
     * 
     * // Get first 10 Infos
     * const infos = await prisma.info.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const infoWithIdOnly = await prisma.info.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InfoFindManyArgs>(args?: SelectSubset<T, InfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Info.
     * @param {InfoCreateArgs} args - Arguments to create a Info.
     * @example
     * // Create one Info
     * const Info = await prisma.info.create({
     *   data: {
     *     // ... data to create a Info
     *   }
     * })
     * 
     */
    create<T extends InfoCreateArgs>(args: SelectSubset<T, InfoCreateArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Infos.
     * @param {InfoCreateManyArgs} args - Arguments to create many Infos.
     * @example
     * // Create many Infos
     * const info = await prisma.info.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InfoCreateManyArgs>(args?: SelectSubset<T, InfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Infos and returns the data saved in the database.
     * @param {InfoCreateManyAndReturnArgs} args - Arguments to create many Infos.
     * @example
     * // Create many Infos
     * const info = await prisma.info.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Infos and only return the `id`
     * const infoWithIdOnly = await prisma.info.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InfoCreateManyAndReturnArgs>(args?: SelectSubset<T, InfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Info.
     * @param {InfoDeleteArgs} args - Arguments to delete one Info.
     * @example
     * // Delete one Info
     * const Info = await prisma.info.delete({
     *   where: {
     *     // ... filter to delete one Info
     *   }
     * })
     * 
     */
    delete<T extends InfoDeleteArgs>(args: SelectSubset<T, InfoDeleteArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Info.
     * @param {InfoUpdateArgs} args - Arguments to update one Info.
     * @example
     * // Update one Info
     * const info = await prisma.info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InfoUpdateArgs>(args: SelectSubset<T, InfoUpdateArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Infos.
     * @param {InfoDeleteManyArgs} args - Arguments to filter Infos to delete.
     * @example
     * // Delete a few Infos
     * const { count } = await prisma.info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InfoDeleteManyArgs>(args?: SelectSubset<T, InfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Infos
     * const info = await prisma.info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InfoUpdateManyArgs>(args: SelectSubset<T, InfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Infos and returns the data updated in the database.
     * @param {InfoUpdateManyAndReturnArgs} args - Arguments to update many Infos.
     * @example
     * // Update many Infos
     * const info = await prisma.info.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Infos and only return the `id`
     * const infoWithIdOnly = await prisma.info.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InfoUpdateManyAndReturnArgs>(args: SelectSubset<T, InfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Info.
     * @param {InfoUpsertArgs} args - Arguments to update or create a Info.
     * @example
     * // Update or create a Info
     * const info = await prisma.info.upsert({
     *   create: {
     *     // ... data to create a Info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Info we want to update
     *   }
     * })
     */
    upsert<T extends InfoUpsertArgs>(args: SelectSubset<T, InfoUpsertArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoCountArgs} args - Arguments to filter Infos to count.
     * @example
     * // Count the number of Infos
     * const count = await prisma.info.count({
     *   where: {
     *     // ... the filter for the Infos we want to count
     *   }
     * })
    **/
    count<T extends InfoCountArgs>(
      args?: Subset<T, InfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InfoAggregateArgs>(args: Subset<T, InfoAggregateArgs>): Prisma.PrismaPromise<GetInfoAggregateType<T>>

    /**
     * Group by Info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InfoGroupByArgs['orderBy'] }
        : { orderBy?: InfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Info model
   */
  readonly fields: InfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Info model
   */
  interface InfoFieldRefs {
    readonly id: FieldRef<"Info", 'String'>
    readonly email: FieldRef<"Info", 'String'>
    readonly links: FieldRef<"Info", 'Json'>
    readonly phone: FieldRef<"Info", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Info findUnique
   */
  export type InfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * Filter, which Info to fetch.
     */
    where: InfoWhereUniqueInput
  }

  /**
   * Info findUniqueOrThrow
   */
  export type InfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * Filter, which Info to fetch.
     */
    where: InfoWhereUniqueInput
  }

  /**
   * Info findFirst
   */
  export type InfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * Filter, which Info to fetch.
     */
    where?: InfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infos to fetch.
     */
    orderBy?: InfoOrderByWithRelationInput | InfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Infos.
     */
    cursor?: InfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Infos.
     */
    distinct?: InfoScalarFieldEnum | InfoScalarFieldEnum[]
  }

  /**
   * Info findFirstOrThrow
   */
  export type InfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * Filter, which Info to fetch.
     */
    where?: InfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infos to fetch.
     */
    orderBy?: InfoOrderByWithRelationInput | InfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Infos.
     */
    cursor?: InfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Infos.
     */
    distinct?: InfoScalarFieldEnum | InfoScalarFieldEnum[]
  }

  /**
   * Info findMany
   */
  export type InfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * Filter, which Infos to fetch.
     */
    where?: InfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infos to fetch.
     */
    orderBy?: InfoOrderByWithRelationInput | InfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Infos.
     */
    cursor?: InfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infos.
     */
    skip?: number
    distinct?: InfoScalarFieldEnum | InfoScalarFieldEnum[]
  }

  /**
   * Info create
   */
  export type InfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * The data needed to create a Info.
     */
    data: XOR<InfoCreateInput, InfoUncheckedCreateInput>
  }

  /**
   * Info createMany
   */
  export type InfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Infos.
     */
    data: InfoCreateManyInput | InfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Info createManyAndReturn
   */
  export type InfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * The data used to create many Infos.
     */
    data: InfoCreateManyInput | InfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Info update
   */
  export type InfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * The data needed to update a Info.
     */
    data: XOR<InfoUpdateInput, InfoUncheckedUpdateInput>
    /**
     * Choose, which Info to update.
     */
    where: InfoWhereUniqueInput
  }

  /**
   * Info updateMany
   */
  export type InfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Infos.
     */
    data: XOR<InfoUpdateManyMutationInput, InfoUncheckedUpdateManyInput>
    /**
     * Filter which Infos to update
     */
    where?: InfoWhereInput
    /**
     * Limit how many Infos to update.
     */
    limit?: number
  }

  /**
   * Info updateManyAndReturn
   */
  export type InfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * The data used to update Infos.
     */
    data: XOR<InfoUpdateManyMutationInput, InfoUncheckedUpdateManyInput>
    /**
     * Filter which Infos to update
     */
    where?: InfoWhereInput
    /**
     * Limit how many Infos to update.
     */
    limit?: number
  }

  /**
   * Info upsert
   */
  export type InfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * The filter to search for the Info to update in case it exists.
     */
    where: InfoWhereUniqueInput
    /**
     * In case the Info found by the `where` argument doesn't exist, create a new Info with this data.
     */
    create: XOR<InfoCreateInput, InfoUncheckedCreateInput>
    /**
     * In case the Info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InfoUpdateInput, InfoUncheckedUpdateInput>
  }

  /**
   * Info delete
   */
  export type InfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
    /**
     * Filter which Info to delete.
     */
    where: InfoWhereUniqueInput
  }

  /**
   * Info deleteMany
   */
  export type InfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Infos to delete
     */
    where?: InfoWhereInput
    /**
     * Limit how many Infos to delete.
     */
    limit?: number
  }

  /**
   * Info without action
   */
  export type InfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Info
     */
    omit?: InfoOmit<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    full_name: string | null
    phone: string | null
    address: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    full_name: string | null
    phone: string | null
    address: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    full_name: number
    phone: number
    address: number
    message: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    address?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    address?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    address?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: string
    full_name: string
    phone: string
    address: string
    message: string
    createdAt: Date
    updatedAt: Date
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    full_name?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    full_name?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    full_name?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    full_name?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "full_name" | "phone" | "address" | "message" | "createdAt" | "updatedAt", ExtArgs["result"]["contact"]>

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      full_name: string
      phone: string
      address: string
      message: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'String'>
    readonly full_name: FieldRef<"Contact", 'String'>
    readonly phone: FieldRef<"Contact", 'String'>
    readonly address: FieldRef<"Contact", 'String'>
    readonly message: FieldRef<"Contact", 'String'>
    readonly createdAt: FieldRef<"Contact", 'DateTime'>
    readonly updatedAt: FieldRef<"Contact", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
  }


  /**
   * Model FAQ
   */

  export type AggregateFAQ = {
    _count: FAQCountAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  export type FAQMinAggregateOutputType = {
    id: string | null
    question: string | null
    answer: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FAQMaxAggregateOutputType = {
    id: string | null
    question: string | null
    answer: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FAQCountAggregateOutputType = {
    id: number
    question: number
    answer: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FAQMinAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FAQMaxAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FAQCountAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FAQAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQ to aggregate.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FAQS
    **/
    _count?: true | FAQCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FAQMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FAQMaxAggregateInputType
  }

  export type GetFAQAggregateType<T extends FAQAggregateArgs> = {
        [P in keyof T & keyof AggregateFAQ]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFAQ[P]>
      : GetScalarType<T[P], AggregateFAQ[P]>
  }




  export type FAQGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FAQWhereInput
    orderBy?: FAQOrderByWithAggregationInput | FAQOrderByWithAggregationInput[]
    by: FAQScalarFieldEnum[] | FAQScalarFieldEnum
    having?: FAQScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FAQCountAggregateInputType | true
    _min?: FAQMinAggregateInputType
    _max?: FAQMaxAggregateInputType
  }

  export type FAQGroupByOutputType = {
    id: string
    question: string
    answer: string
    createdAt: Date
    updatedAt: Date
    _count: FAQCountAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  type GetFAQGroupByPayload<T extends FAQGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FAQGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FAQGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FAQGroupByOutputType[P]>
            : GetScalarType<T[P], FAQGroupByOutputType[P]>
        }
      >
    >


  export type FAQSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectScalar = {
    id?: boolean
    question?: boolean
    answer?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FAQOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question" | "answer" | "createdAt" | "updatedAt", ExtArgs["result"]["fAQ"]>

  export type $FAQPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FAQ"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question: string
      answer: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fAQ"]>
    composites: {}
  }

  type FAQGetPayload<S extends boolean | null | undefined | FAQDefaultArgs> = $Result.GetResult<Prisma.$FAQPayload, S>

  type FAQCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FAQFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FAQCountAggregateInputType | true
    }

  export interface FAQDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FAQ'], meta: { name: 'FAQ' } }
    /**
     * Find zero or one FAQ that matches the filter.
     * @param {FAQFindUniqueArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FAQFindUniqueArgs>(args: SelectSubset<T, FAQFindUniqueArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FAQ that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FAQFindUniqueOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FAQFindUniqueOrThrowArgs>(args: SelectSubset<T, FAQFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FAQFindFirstArgs>(args?: SelectSubset<T, FAQFindFirstArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FAQFindFirstOrThrowArgs>(args?: SelectSubset<T, FAQFindFirstOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FAQS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FAQS
     * const fAQS = await prisma.fAQ.findMany()
     * 
     * // Get first 10 FAQS
     * const fAQS = await prisma.fAQ.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fAQWithIdOnly = await prisma.fAQ.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FAQFindManyArgs>(args?: SelectSubset<T, FAQFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FAQ.
     * @param {FAQCreateArgs} args - Arguments to create a FAQ.
     * @example
     * // Create one FAQ
     * const FAQ = await prisma.fAQ.create({
     *   data: {
     *     // ... data to create a FAQ
     *   }
     * })
     * 
     */
    create<T extends FAQCreateArgs>(args: SelectSubset<T, FAQCreateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FAQS.
     * @param {FAQCreateManyArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FAQCreateManyArgs>(args?: SelectSubset<T, FAQCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FAQS and returns the data saved in the database.
     * @param {FAQCreateManyAndReturnArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FAQCreateManyAndReturnArgs>(args?: SelectSubset<T, FAQCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FAQ.
     * @param {FAQDeleteArgs} args - Arguments to delete one FAQ.
     * @example
     * // Delete one FAQ
     * const FAQ = await prisma.fAQ.delete({
     *   where: {
     *     // ... filter to delete one FAQ
     *   }
     * })
     * 
     */
    delete<T extends FAQDeleteArgs>(args: SelectSubset<T, FAQDeleteArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FAQ.
     * @param {FAQUpdateArgs} args - Arguments to update one FAQ.
     * @example
     * // Update one FAQ
     * const fAQ = await prisma.fAQ.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FAQUpdateArgs>(args: SelectSubset<T, FAQUpdateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FAQS.
     * @param {FAQDeleteManyArgs} args - Arguments to filter FAQS to delete.
     * @example
     * // Delete a few FAQS
     * const { count } = await prisma.fAQ.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FAQDeleteManyArgs>(args?: SelectSubset<T, FAQDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FAQUpdateManyArgs>(args: SelectSubset<T, FAQUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS and returns the data updated in the database.
     * @param {FAQUpdateManyAndReturnArgs} args - Arguments to update many FAQS.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FAQUpdateManyAndReturnArgs>(args: SelectSubset<T, FAQUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FAQ.
     * @param {FAQUpsertArgs} args - Arguments to update or create a FAQ.
     * @example
     * // Update or create a FAQ
     * const fAQ = await prisma.fAQ.upsert({
     *   create: {
     *     // ... data to create a FAQ
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FAQ we want to update
     *   }
     * })
     */
    upsert<T extends FAQUpsertArgs>(args: SelectSubset<T, FAQUpsertArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQCountArgs} args - Arguments to filter FAQS to count.
     * @example
     * // Count the number of FAQS
     * const count = await prisma.fAQ.count({
     *   where: {
     *     // ... the filter for the FAQS we want to count
     *   }
     * })
    **/
    count<T extends FAQCountArgs>(
      args?: Subset<T, FAQCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FAQCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FAQAggregateArgs>(args: Subset<T, FAQAggregateArgs>): Prisma.PrismaPromise<GetFAQAggregateType<T>>

    /**
     * Group by FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FAQGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FAQGroupByArgs['orderBy'] }
        : { orderBy?: FAQGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FAQGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFAQGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FAQ model
   */
  readonly fields: FAQFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FAQ.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FAQClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FAQ model
   */
  interface FAQFieldRefs {
    readonly id: FieldRef<"FAQ", 'String'>
    readonly question: FieldRef<"FAQ", 'String'>
    readonly answer: FieldRef<"FAQ", 'String'>
    readonly createdAt: FieldRef<"FAQ", 'DateTime'>
    readonly updatedAt: FieldRef<"FAQ", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FAQ findUnique
   */
  export type FAQFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findUniqueOrThrow
   */
  export type FAQFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findFirst
   */
  export type FAQFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findFirstOrThrow
   */
  export type FAQFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findMany
   */
  export type FAQFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQS to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ create
   */
  export type FAQCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to create a FAQ.
     */
    data: XOR<FAQCreateInput, FAQUncheckedCreateInput>
  }

  /**
   * FAQ createMany
   */
  export type FAQCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ createManyAndReturn
   */
  export type FAQCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ update
   */
  export type FAQUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to update a FAQ.
     */
    data: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
    /**
     * Choose, which FAQ to update.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ updateMany
   */
  export type FAQUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ updateManyAndReturn
   */
  export type FAQUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ upsert
   */
  export type FAQUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The filter to search for the FAQ to update in case it exists.
     */
    where: FAQWhereUniqueInput
    /**
     * In case the FAQ found by the `where` argument doesn't exist, create a new FAQ with this data.
     */
    create: XOR<FAQCreateInput, FAQUncheckedCreateInput>
    /**
     * In case the FAQ was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
  }

  /**
   * FAQ delete
   */
  export type FAQDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter which FAQ to delete.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ deleteMany
   */
  export type FAQDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQS to delete
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to delete.
     */
    limit?: number
  }

  /**
   * FAQ without action
   */
  export type FAQDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
  }


  /**
   * Model Showcase
   */

  export type AggregateShowcase = {
    _count: ShowcaseCountAggregateOutputType | null
    _min: ShowcaseMinAggregateOutputType | null
    _max: ShowcaseMaxAggregateOutputType | null
  }

  export type ShowcaseMinAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
    description_uz: string | null
    description_ru: string | null
    description_en: string | null
    image: string | null
    link: string | null
  }

  export type ShowcaseMaxAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
    description_uz: string | null
    description_ru: string | null
    description_en: string | null
    image: string | null
    link: string | null
  }

  export type ShowcaseCountAggregateOutputType = {
    id: number
    name_uz: number
    name_ru: number
    name_en: number
    description_uz: number
    description_ru: number
    description_en: number
    image: number
    link: number
    _all: number
  }


  export type ShowcaseMinAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    description_uz?: true
    description_ru?: true
    description_en?: true
    image?: true
    link?: true
  }

  export type ShowcaseMaxAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    description_uz?: true
    description_ru?: true
    description_en?: true
    image?: true
    link?: true
  }

  export type ShowcaseCountAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    description_uz?: true
    description_ru?: true
    description_en?: true
    image?: true
    link?: true
    _all?: true
  }

  export type ShowcaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Showcase to aggregate.
     */
    where?: ShowcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Showcases to fetch.
     */
    orderBy?: ShowcaseOrderByWithRelationInput | ShowcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShowcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Showcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Showcases
    **/
    _count?: true | ShowcaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShowcaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShowcaseMaxAggregateInputType
  }

  export type GetShowcaseAggregateType<T extends ShowcaseAggregateArgs> = {
        [P in keyof T & keyof AggregateShowcase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShowcase[P]>
      : GetScalarType<T[P], AggregateShowcase[P]>
  }




  export type ShowcaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShowcaseWhereInput
    orderBy?: ShowcaseOrderByWithAggregationInput | ShowcaseOrderByWithAggregationInput[]
    by: ShowcaseScalarFieldEnum[] | ShowcaseScalarFieldEnum
    having?: ShowcaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShowcaseCountAggregateInputType | true
    _min?: ShowcaseMinAggregateInputType
    _max?: ShowcaseMaxAggregateInputType
  }

  export type ShowcaseGroupByOutputType = {
    id: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    image: string
    link: string
    _count: ShowcaseCountAggregateOutputType | null
    _min: ShowcaseMinAggregateOutputType | null
    _max: ShowcaseMaxAggregateOutputType | null
  }

  type GetShowcaseGroupByPayload<T extends ShowcaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShowcaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShowcaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShowcaseGroupByOutputType[P]>
            : GetScalarType<T[P], ShowcaseGroupByOutputType[P]>
        }
      >
    >


  export type ShowcaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    description_uz?: boolean
    description_ru?: boolean
    description_en?: boolean
    image?: boolean
    link?: boolean
  }, ExtArgs["result"]["showcase"]>

  export type ShowcaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    description_uz?: boolean
    description_ru?: boolean
    description_en?: boolean
    image?: boolean
    link?: boolean
  }, ExtArgs["result"]["showcase"]>

  export type ShowcaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    description_uz?: boolean
    description_ru?: boolean
    description_en?: boolean
    image?: boolean
    link?: boolean
  }, ExtArgs["result"]["showcase"]>

  export type ShowcaseSelectScalar = {
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    description_uz?: boolean
    description_ru?: boolean
    description_en?: boolean
    image?: boolean
    link?: boolean
  }

  export type ShowcaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name_uz" | "name_ru" | "name_en" | "description_uz" | "description_ru" | "description_en" | "image" | "link", ExtArgs["result"]["showcase"]>

  export type $ShowcasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Showcase"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name_uz: string
      name_ru: string
      name_en: string
      description_uz: string
      description_ru: string
      description_en: string
      image: string
      link: string
    }, ExtArgs["result"]["showcase"]>
    composites: {}
  }

  type ShowcaseGetPayload<S extends boolean | null | undefined | ShowcaseDefaultArgs> = $Result.GetResult<Prisma.$ShowcasePayload, S>

  type ShowcaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShowcaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShowcaseCountAggregateInputType | true
    }

  export interface ShowcaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Showcase'], meta: { name: 'Showcase' } }
    /**
     * Find zero or one Showcase that matches the filter.
     * @param {ShowcaseFindUniqueArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShowcaseFindUniqueArgs>(args: SelectSubset<T, ShowcaseFindUniqueArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Showcase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShowcaseFindUniqueOrThrowArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShowcaseFindUniqueOrThrowArgs>(args: SelectSubset<T, ShowcaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Showcase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseFindFirstArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShowcaseFindFirstArgs>(args?: SelectSubset<T, ShowcaseFindFirstArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Showcase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseFindFirstOrThrowArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShowcaseFindFirstOrThrowArgs>(args?: SelectSubset<T, ShowcaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Showcases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Showcases
     * const showcases = await prisma.showcase.findMany()
     * 
     * // Get first 10 Showcases
     * const showcases = await prisma.showcase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const showcaseWithIdOnly = await prisma.showcase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShowcaseFindManyArgs>(args?: SelectSubset<T, ShowcaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Showcase.
     * @param {ShowcaseCreateArgs} args - Arguments to create a Showcase.
     * @example
     * // Create one Showcase
     * const Showcase = await prisma.showcase.create({
     *   data: {
     *     // ... data to create a Showcase
     *   }
     * })
     * 
     */
    create<T extends ShowcaseCreateArgs>(args: SelectSubset<T, ShowcaseCreateArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Showcases.
     * @param {ShowcaseCreateManyArgs} args - Arguments to create many Showcases.
     * @example
     * // Create many Showcases
     * const showcase = await prisma.showcase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShowcaseCreateManyArgs>(args?: SelectSubset<T, ShowcaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Showcases and returns the data saved in the database.
     * @param {ShowcaseCreateManyAndReturnArgs} args - Arguments to create many Showcases.
     * @example
     * // Create many Showcases
     * const showcase = await prisma.showcase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Showcases and only return the `id`
     * const showcaseWithIdOnly = await prisma.showcase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShowcaseCreateManyAndReturnArgs>(args?: SelectSubset<T, ShowcaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Showcase.
     * @param {ShowcaseDeleteArgs} args - Arguments to delete one Showcase.
     * @example
     * // Delete one Showcase
     * const Showcase = await prisma.showcase.delete({
     *   where: {
     *     // ... filter to delete one Showcase
     *   }
     * })
     * 
     */
    delete<T extends ShowcaseDeleteArgs>(args: SelectSubset<T, ShowcaseDeleteArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Showcase.
     * @param {ShowcaseUpdateArgs} args - Arguments to update one Showcase.
     * @example
     * // Update one Showcase
     * const showcase = await prisma.showcase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShowcaseUpdateArgs>(args: SelectSubset<T, ShowcaseUpdateArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Showcases.
     * @param {ShowcaseDeleteManyArgs} args - Arguments to filter Showcases to delete.
     * @example
     * // Delete a few Showcases
     * const { count } = await prisma.showcase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShowcaseDeleteManyArgs>(args?: SelectSubset<T, ShowcaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Showcases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Showcases
     * const showcase = await prisma.showcase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShowcaseUpdateManyArgs>(args: SelectSubset<T, ShowcaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Showcases and returns the data updated in the database.
     * @param {ShowcaseUpdateManyAndReturnArgs} args - Arguments to update many Showcases.
     * @example
     * // Update many Showcases
     * const showcase = await prisma.showcase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Showcases and only return the `id`
     * const showcaseWithIdOnly = await prisma.showcase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShowcaseUpdateManyAndReturnArgs>(args: SelectSubset<T, ShowcaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Showcase.
     * @param {ShowcaseUpsertArgs} args - Arguments to update or create a Showcase.
     * @example
     * // Update or create a Showcase
     * const showcase = await prisma.showcase.upsert({
     *   create: {
     *     // ... data to create a Showcase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Showcase we want to update
     *   }
     * })
     */
    upsert<T extends ShowcaseUpsertArgs>(args: SelectSubset<T, ShowcaseUpsertArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Showcases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseCountArgs} args - Arguments to filter Showcases to count.
     * @example
     * // Count the number of Showcases
     * const count = await prisma.showcase.count({
     *   where: {
     *     // ... the filter for the Showcases we want to count
     *   }
     * })
    **/
    count<T extends ShowcaseCountArgs>(
      args?: Subset<T, ShowcaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShowcaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Showcase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShowcaseAggregateArgs>(args: Subset<T, ShowcaseAggregateArgs>): Prisma.PrismaPromise<GetShowcaseAggregateType<T>>

    /**
     * Group by Showcase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShowcaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShowcaseGroupByArgs['orderBy'] }
        : { orderBy?: ShowcaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShowcaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShowcaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Showcase model
   */
  readonly fields: ShowcaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Showcase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShowcaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Showcase model
   */
  interface ShowcaseFieldRefs {
    readonly id: FieldRef<"Showcase", 'String'>
    readonly name_uz: FieldRef<"Showcase", 'String'>
    readonly name_ru: FieldRef<"Showcase", 'String'>
    readonly name_en: FieldRef<"Showcase", 'String'>
    readonly description_uz: FieldRef<"Showcase", 'String'>
    readonly description_ru: FieldRef<"Showcase", 'String'>
    readonly description_en: FieldRef<"Showcase", 'String'>
    readonly image: FieldRef<"Showcase", 'String'>
    readonly link: FieldRef<"Showcase", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Showcase findUnique
   */
  export type ShowcaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter, which Showcase to fetch.
     */
    where: ShowcaseWhereUniqueInput
  }

  /**
   * Showcase findUniqueOrThrow
   */
  export type ShowcaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter, which Showcase to fetch.
     */
    where: ShowcaseWhereUniqueInput
  }

  /**
   * Showcase findFirst
   */
  export type ShowcaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter, which Showcase to fetch.
     */
    where?: ShowcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Showcases to fetch.
     */
    orderBy?: ShowcaseOrderByWithRelationInput | ShowcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Showcases.
     */
    cursor?: ShowcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Showcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Showcases.
     */
    distinct?: ShowcaseScalarFieldEnum | ShowcaseScalarFieldEnum[]
  }

  /**
   * Showcase findFirstOrThrow
   */
  export type ShowcaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter, which Showcase to fetch.
     */
    where?: ShowcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Showcases to fetch.
     */
    orderBy?: ShowcaseOrderByWithRelationInput | ShowcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Showcases.
     */
    cursor?: ShowcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Showcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Showcases.
     */
    distinct?: ShowcaseScalarFieldEnum | ShowcaseScalarFieldEnum[]
  }

  /**
   * Showcase findMany
   */
  export type ShowcaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter, which Showcases to fetch.
     */
    where?: ShowcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Showcases to fetch.
     */
    orderBy?: ShowcaseOrderByWithRelationInput | ShowcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Showcases.
     */
    cursor?: ShowcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Showcases.
     */
    skip?: number
    distinct?: ShowcaseScalarFieldEnum | ShowcaseScalarFieldEnum[]
  }

  /**
   * Showcase create
   */
  export type ShowcaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * The data needed to create a Showcase.
     */
    data: XOR<ShowcaseCreateInput, ShowcaseUncheckedCreateInput>
  }

  /**
   * Showcase createMany
   */
  export type ShowcaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Showcases.
     */
    data: ShowcaseCreateManyInput | ShowcaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Showcase createManyAndReturn
   */
  export type ShowcaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * The data used to create many Showcases.
     */
    data: ShowcaseCreateManyInput | ShowcaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Showcase update
   */
  export type ShowcaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * The data needed to update a Showcase.
     */
    data: XOR<ShowcaseUpdateInput, ShowcaseUncheckedUpdateInput>
    /**
     * Choose, which Showcase to update.
     */
    where: ShowcaseWhereUniqueInput
  }

  /**
   * Showcase updateMany
   */
  export type ShowcaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Showcases.
     */
    data: XOR<ShowcaseUpdateManyMutationInput, ShowcaseUncheckedUpdateManyInput>
    /**
     * Filter which Showcases to update
     */
    where?: ShowcaseWhereInput
    /**
     * Limit how many Showcases to update.
     */
    limit?: number
  }

  /**
   * Showcase updateManyAndReturn
   */
  export type ShowcaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * The data used to update Showcases.
     */
    data: XOR<ShowcaseUpdateManyMutationInput, ShowcaseUncheckedUpdateManyInput>
    /**
     * Filter which Showcases to update
     */
    where?: ShowcaseWhereInput
    /**
     * Limit how many Showcases to update.
     */
    limit?: number
  }

  /**
   * Showcase upsert
   */
  export type ShowcaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * The filter to search for the Showcase to update in case it exists.
     */
    where: ShowcaseWhereUniqueInput
    /**
     * In case the Showcase found by the `where` argument doesn't exist, create a new Showcase with this data.
     */
    create: XOR<ShowcaseCreateInput, ShowcaseUncheckedCreateInput>
    /**
     * In case the Showcase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShowcaseUpdateInput, ShowcaseUncheckedUpdateInput>
  }

  /**
   * Showcase delete
   */
  export type ShowcaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter which Showcase to delete.
     */
    where: ShowcaseWhereUniqueInput
  }

  /**
   * Showcase deleteMany
   */
  export type ShowcaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Showcases to delete
     */
    where?: ShowcaseWhereInput
    /**
     * Limit how many Showcases to delete.
     */
    limit?: number
  }

  /**
   * Showcase without action
   */
  export type ShowcaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
  }


  /**
   * Model Partners
   */

  export type AggregatePartners = {
    _count: PartnersCountAggregateOutputType | null
    _min: PartnersMinAggregateOutputType | null
    _max: PartnersMaxAggregateOutputType | null
  }

  export type PartnersMinAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
    image: string | null
  }

  export type PartnersMaxAggregateOutputType = {
    id: string | null
    name_uz: string | null
    name_ru: string | null
    name_en: string | null
    image: string | null
  }

  export type PartnersCountAggregateOutputType = {
    id: number
    name_uz: number
    name_ru: number
    name_en: number
    image: number
    _all: number
  }


  export type PartnersMinAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    image?: true
  }

  export type PartnersMaxAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    image?: true
  }

  export type PartnersCountAggregateInputType = {
    id?: true
    name_uz?: true
    name_ru?: true
    name_en?: true
    image?: true
    _all?: true
  }

  export type PartnersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partners to aggregate.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partners
    **/
    _count?: true | PartnersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartnersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartnersMaxAggregateInputType
  }

  export type GetPartnersAggregateType<T extends PartnersAggregateArgs> = {
        [P in keyof T & keyof AggregatePartners]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartners[P]>
      : GetScalarType<T[P], AggregatePartners[P]>
  }




  export type PartnersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartnersWhereInput
    orderBy?: PartnersOrderByWithAggregationInput | PartnersOrderByWithAggregationInput[]
    by: PartnersScalarFieldEnum[] | PartnersScalarFieldEnum
    having?: PartnersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartnersCountAggregateInputType | true
    _min?: PartnersMinAggregateInputType
    _max?: PartnersMaxAggregateInputType
  }

  export type PartnersGroupByOutputType = {
    id: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    _count: PartnersCountAggregateOutputType | null
    _min: PartnersMinAggregateOutputType | null
    _max: PartnersMaxAggregateOutputType | null
  }

  type GetPartnersGroupByPayload<T extends PartnersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartnersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartnersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartnersGroupByOutputType[P]>
            : GetScalarType<T[P], PartnersGroupByOutputType[P]>
        }
      >
    >


  export type PartnersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    image?: boolean
  }, ExtArgs["result"]["partners"]>

  export type PartnersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    image?: boolean
  }, ExtArgs["result"]["partners"]>

  export type PartnersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    image?: boolean
  }, ExtArgs["result"]["partners"]>

  export type PartnersSelectScalar = {
    id?: boolean
    name_uz?: boolean
    name_ru?: boolean
    name_en?: boolean
    image?: boolean
  }

  export type PartnersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name_uz" | "name_ru" | "name_en" | "image", ExtArgs["result"]["partners"]>

  export type $PartnersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partners"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name_uz: string
      name_ru: string
      name_en: string
      image: string
    }, ExtArgs["result"]["partners"]>
    composites: {}
  }

  type PartnersGetPayload<S extends boolean | null | undefined | PartnersDefaultArgs> = $Result.GetResult<Prisma.$PartnersPayload, S>

  type PartnersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartnersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartnersCountAggregateInputType | true
    }

  export interface PartnersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partners'], meta: { name: 'Partners' } }
    /**
     * Find zero or one Partners that matches the filter.
     * @param {PartnersFindUniqueArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartnersFindUniqueArgs>(args: SelectSubset<T, PartnersFindUniqueArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Partners that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartnersFindUniqueOrThrowArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartnersFindUniqueOrThrowArgs>(args: SelectSubset<T, PartnersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersFindFirstArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartnersFindFirstArgs>(args?: SelectSubset<T, PartnersFindFirstArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partners that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersFindFirstOrThrowArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartnersFindFirstOrThrowArgs>(args?: SelectSubset<T, PartnersFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Partners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partners
     * const partners = await prisma.partners.findMany()
     * 
     * // Get first 10 Partners
     * const partners = await prisma.partners.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partnersWithIdOnly = await prisma.partners.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartnersFindManyArgs>(args?: SelectSubset<T, PartnersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Partners.
     * @param {PartnersCreateArgs} args - Arguments to create a Partners.
     * @example
     * // Create one Partners
     * const Partners = await prisma.partners.create({
     *   data: {
     *     // ... data to create a Partners
     *   }
     * })
     * 
     */
    create<T extends PartnersCreateArgs>(args: SelectSubset<T, PartnersCreateArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Partners.
     * @param {PartnersCreateManyArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partners = await prisma.partners.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartnersCreateManyArgs>(args?: SelectSubset<T, PartnersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Partners and returns the data saved in the database.
     * @param {PartnersCreateManyAndReturnArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partners = await prisma.partners.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Partners and only return the `id`
     * const partnersWithIdOnly = await prisma.partners.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartnersCreateManyAndReturnArgs>(args?: SelectSubset<T, PartnersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Partners.
     * @param {PartnersDeleteArgs} args - Arguments to delete one Partners.
     * @example
     * // Delete one Partners
     * const Partners = await prisma.partners.delete({
     *   where: {
     *     // ... filter to delete one Partners
     *   }
     * })
     * 
     */
    delete<T extends PartnersDeleteArgs>(args: SelectSubset<T, PartnersDeleteArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Partners.
     * @param {PartnersUpdateArgs} args - Arguments to update one Partners.
     * @example
     * // Update one Partners
     * const partners = await prisma.partners.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartnersUpdateArgs>(args: SelectSubset<T, PartnersUpdateArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Partners.
     * @param {PartnersDeleteManyArgs} args - Arguments to filter Partners to delete.
     * @example
     * // Delete a few Partners
     * const { count } = await prisma.partners.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartnersDeleteManyArgs>(args?: SelectSubset<T, PartnersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partners
     * const partners = await prisma.partners.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartnersUpdateManyArgs>(args: SelectSubset<T, PartnersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners and returns the data updated in the database.
     * @param {PartnersUpdateManyAndReturnArgs} args - Arguments to update many Partners.
     * @example
     * // Update many Partners
     * const partners = await prisma.partners.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Partners and only return the `id`
     * const partnersWithIdOnly = await prisma.partners.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartnersUpdateManyAndReturnArgs>(args: SelectSubset<T, PartnersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Partners.
     * @param {PartnersUpsertArgs} args - Arguments to update or create a Partners.
     * @example
     * // Update or create a Partners
     * const partners = await prisma.partners.upsert({
     *   create: {
     *     // ... data to create a Partners
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partners we want to update
     *   }
     * })
     */
    upsert<T extends PartnersUpsertArgs>(args: SelectSubset<T, PartnersUpsertArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersCountArgs} args - Arguments to filter Partners to count.
     * @example
     * // Count the number of Partners
     * const count = await prisma.partners.count({
     *   where: {
     *     // ... the filter for the Partners we want to count
     *   }
     * })
    **/
    count<T extends PartnersCountArgs>(
      args?: Subset<T, PartnersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartnersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartnersAggregateArgs>(args: Subset<T, PartnersAggregateArgs>): Prisma.PrismaPromise<GetPartnersAggregateType<T>>

    /**
     * Group by Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartnersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartnersGroupByArgs['orderBy'] }
        : { orderBy?: PartnersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartnersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartnersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partners model
   */
  readonly fields: PartnersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partners.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartnersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partners model
   */
  interface PartnersFieldRefs {
    readonly id: FieldRef<"Partners", 'String'>
    readonly name_uz: FieldRef<"Partners", 'String'>
    readonly name_ru: FieldRef<"Partners", 'String'>
    readonly name_en: FieldRef<"Partners", 'String'>
    readonly image: FieldRef<"Partners", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Partners findUnique
   */
  export type PartnersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners findUniqueOrThrow
   */
  export type PartnersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners findFirst
   */
  export type PartnersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnersScalarFieldEnum | PartnersScalarFieldEnum[]
  }

  /**
   * Partners findFirstOrThrow
   */
  export type PartnersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnersScalarFieldEnum | PartnersScalarFieldEnum[]
  }

  /**
   * Partners findMany
   */
  export type PartnersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partners.
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    distinct?: PartnersScalarFieldEnum | PartnersScalarFieldEnum[]
  }

  /**
   * Partners create
   */
  export type PartnersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The data needed to create a Partners.
     */
    data: XOR<PartnersCreateInput, PartnersUncheckedCreateInput>
  }

  /**
   * Partners createMany
   */
  export type PartnersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partners.
     */
    data: PartnersCreateManyInput | PartnersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partners createManyAndReturn
   */
  export type PartnersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The data used to create many Partners.
     */
    data: PartnersCreateManyInput | PartnersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partners update
   */
  export type PartnersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The data needed to update a Partners.
     */
    data: XOR<PartnersUpdateInput, PartnersUncheckedUpdateInput>
    /**
     * Choose, which Partners to update.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners updateMany
   */
  export type PartnersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnersUpdateManyMutationInput, PartnersUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnersWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
  }

  /**
   * Partners updateManyAndReturn
   */
  export type PartnersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnersUpdateManyMutationInput, PartnersUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnersWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
  }

  /**
   * Partners upsert
   */
  export type PartnersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The filter to search for the Partners to update in case it exists.
     */
    where: PartnersWhereUniqueInput
    /**
     * In case the Partners found by the `where` argument doesn't exist, create a new Partners with this data.
     */
    create: XOR<PartnersCreateInput, PartnersUncheckedCreateInput>
    /**
     * In case the Partners was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartnersUpdateInput, PartnersUncheckedUpdateInput>
  }

  /**
   * Partners delete
   */
  export type PartnersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter which Partners to delete.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners deleteMany
   */
  export type PartnersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partners to delete
     */
    where?: PartnersWhereInput
    /**
     * Limit how many Partners to delete.
     */
    limit?: number
  }

  /**
   * Partners without action
   */
  export type PartnersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RegionScalarFieldEnum: {
    id: 'id',
    name_uz: 'name_uz',
    name_ru: 'name_ru',
    name_en: 'name_en'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    full_name: 'full_name',
    phone: 'phone',
    password: 'password',
    status: 'status',
    region_id: 'region_id',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    name: 'name',
    inn: 'inn',
    mfo: 'mfo',
    rs: 'rs',
    bank: 'bank',
    oked: 'oked',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    ip_address: 'ip_address',
    date: 'date',
    device: 'device'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    name_uz: 'name_uz',
    name_ru: 'name_ru',
    name_en: 'name_en'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const SizeScalarFieldEnum: {
    id: 'id',
    name_uz: 'name_uz',
    name_ru: 'name_ru',
    name_en: 'name_en'
  };

  export type SizeScalarFieldEnum = (typeof SizeScalarFieldEnum)[keyof typeof SizeScalarFieldEnum]


  export const CapacityScalarFieldEnum: {
    id: 'id',
    name_uz: 'name_uz',
    name_ru: 'name_ru',
    name_en: 'name_en'
  };

  export type CapacityScalarFieldEnum = (typeof CapacityScalarFieldEnum)[keyof typeof CapacityScalarFieldEnum]


  export const ToolScalarFieldEnum: {
    id: 'id',
    name_uz: 'name_uz',
    name_ru: 'name_ru',
    name_en: 'name_en',
    description_uz: 'description_uz',
    description_ru: 'description_ru',
    description_en: 'description_en',
    price: 'price',
    count: 'count',
    code: 'code',
    brand_id: 'brand_id',
    size_id: 'size_id',
    capacity_id: 'capacity_id',
    isActive: 'isActive',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ToolScalarFieldEnum = (typeof ToolScalarFieldEnum)[keyof typeof ToolScalarFieldEnum]


  export const LevelScalarFieldEnum: {
    id: 'id',
    name_uz: 'name_uz',
    name_ru: 'name_ru',
    name_en: 'name_en'
  };

  export type LevelScalarFieldEnum = (typeof LevelScalarFieldEnum)[keyof typeof LevelScalarFieldEnum]


  export const ProfessionScalarFieldEnum: {
    id: 'id',
    name_uz: 'name_uz',
    name_ru: 'name_ru',
    name_en: 'name_en',
    image: 'image',
    isActive: 'isActive'
  };

  export type ProfessionScalarFieldEnum = (typeof ProfessionScalarFieldEnum)[keyof typeof ProfessionScalarFieldEnum]


  export const LevelsProfessionsScalarFieldEnum: {
    id: 'id',
    profession_id: 'profession_id',
    level_id: 'level_id',
    min_work_hours: 'min_work_hours',
    price_hourly: 'price_hourly',
    price_daily: 'price_daily'
  };

  export type LevelsProfessionsScalarFieldEnum = (typeof LevelsProfessionsScalarFieldEnum)[keyof typeof LevelsProfessionsScalarFieldEnum]


  export const MasterScalarFieldEnum: {
    id: 'id',
    full_name: 'full_name',
    phone: 'phone',
    isActive: 'isActive',
    year: 'year',
    image: 'image',
    passport_image: 'passport_image',
    about: 'about',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MasterScalarFieldEnum = (typeof MasterScalarFieldEnum)[keyof typeof MasterScalarFieldEnum]


  export const MasterSkillsScalarFieldEnum: {
    id: 'id',
    min_work_hours: 'min_work_hours',
    price_hourly: 'price_hourly',
    price_daily: 'price_daily',
    experience: 'experience',
    level_id: 'level_id',
    profession_id: 'profession_id',
    master_id: 'master_id'
  };

  export type MasterSkillsScalarFieldEnum = (typeof MasterSkillsScalarFieldEnum)[keyof typeof MasterSkillsScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    total_sum: 'total_sum',
    location: 'location',
    address: 'address',
    dete: 'dete',
    payment_type: 'payment_type',
    paid: 'paid',
    status: 'status',
    with_delivery: 'with_delivery',
    comment_delivery: 'comment_delivery',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemsScalarFieldEnum: {
    id: 'id',
    order_id: 'order_id',
    tool_id: 'tool_id',
    profession_id: 'profession_id',
    level_id: 'level_id',
    count: 'count',
    measure: 'measure',
    time: 'time',
    total_sum: 'total_sum'
  };

  export type OrderItemsScalarFieldEnum = (typeof OrderItemsScalarFieldEnum)[keyof typeof OrderItemsScalarFieldEnum]


  export const BacketItemsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    profession_id: 'profession_id',
    tool_id: 'tool_id',
    level_id: 'level_id',
    count: 'count',
    measure: 'measure',
    time: 'time'
  };

  export type BacketItemsScalarFieldEnum = (typeof BacketItemsScalarFieldEnum)[keyof typeof BacketItemsScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    text: 'text',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const MasterRatingsScalarFieldEnum: {
    id: 'id',
    star: 'star',
    master_id: 'master_id',
    comment_id: 'comment_id'
  };

  export type MasterRatingsScalarFieldEnum = (typeof MasterRatingsScalarFieldEnum)[keyof typeof MasterRatingsScalarFieldEnum]


  export const InfoScalarFieldEnum: {
    id: 'id',
    email: 'email',
    links: 'links',
    phone: 'phone'
  };

  export type InfoScalarFieldEnum = (typeof InfoScalarFieldEnum)[keyof typeof InfoScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    full_name: 'full_name',
    phone: 'phone',
    address: 'address',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const FAQScalarFieldEnum: {
    id: 'id',
    question: 'question',
    answer: 'answer',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FAQScalarFieldEnum = (typeof FAQScalarFieldEnum)[keyof typeof FAQScalarFieldEnum]


  export const ShowcaseScalarFieldEnum: {
    id: 'id',
    name_uz: 'name_uz',
    name_ru: 'name_ru',
    name_en: 'name_en',
    description_uz: 'description_uz',
    description_ru: 'description_ru',
    description_en: 'description_en',
    image: 'image',
    link: 'link'
  };

  export type ShowcaseScalarFieldEnum = (typeof ShowcaseScalarFieldEnum)[keyof typeof ShowcaseScalarFieldEnum]


  export const PartnersScalarFieldEnum: {
    id: 'id',
    name_uz: 'name_uz',
    name_ru: 'name_ru',
    name_en: 'name_en',
    image: 'image'
  };

  export type PartnersScalarFieldEnum = (typeof PartnersScalarFieldEnum)[keyof typeof PartnersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'StatusOrder'
   */
  export type EnumStatusOrderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusOrder'>
    


  /**
   * Reference to a field of type 'StatusOrder[]'
   */
  export type ListEnumStatusOrderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusOrder[]'>
    


  /**
   * Reference to a field of type 'Measure'
   */
  export type EnumMeasureFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Measure'>
    


  /**
   * Reference to a field of type 'Measure[]'
   */
  export type ListEnumMeasureFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Measure[]'>
    
  /**
   * Deep Input Types
   */


  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    id?: StringFilter<"Region"> | string
    name_uz?: StringFilter<"Region"> | string
    name_ru?: StringFilter<"Region"> | string
    name_en?: StringFilter<"Region"> | string
    Users?: UserListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    Users?: UserOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_uz?: string
    name_ru?: string
    name_en?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    Users?: UserListRelationFilter
  }, "id" | "name_uz" | "name_ru" | "name_en">

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Region"> | string
    name_uz?: StringWithAggregatesFilter<"Region"> | string
    name_ru?: StringWithAggregatesFilter<"Region"> | string
    name_en?: StringWithAggregatesFilter<"Region"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    full_name?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: BoolFilter<"User"> | boolean
    region_id?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    Company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    Session?: SessionListRelationFilter
    Order?: OrderListRelationFilter
    BacketItems?: BacketItemsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    status?: SortOrder
    region_id?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Region?: RegionOrderByWithRelationInput
    Company?: CompanyOrderByWithRelationInput
    Session?: SessionOrderByRelationAggregateInput
    Order?: OrderOrderByRelationAggregateInput
    BacketItems?: BacketItemsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    full_name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: BoolFilter<"User"> | boolean
    region_id?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    Company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    Session?: SessionListRelationFilter
    Order?: OrderListRelationFilter
    BacketItems?: BacketItemsListRelationFilter
  }, "id" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    status?: SortOrder
    region_id?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    full_name?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    status?: BoolWithAggregatesFilter<"User"> | boolean
    region_id?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    user_id?: StringNullableFilter<"Company"> | string | null
    name?: StringFilter<"Company"> | string
    inn?: StringFilter<"Company"> | string
    mfo?: StringFilter<"Company"> | string
    rs?: StringFilter<"Company"> | string
    bank?: StringFilter<"Company"> | string
    oked?: StringFilter<"Company"> | string
    address?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    name?: SortOrder
    inn?: SortOrder
    mfo?: SortOrder
    rs?: SortOrder
    bank?: SortOrder
    oked?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    inn?: StringFilter<"Company"> | string
    mfo?: StringFilter<"Company"> | string
    rs?: StringFilter<"Company"> | string
    bank?: StringFilter<"Company"> | string
    oked?: StringFilter<"Company"> | string
    address?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "user_id">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    name?: SortOrder
    inn?: SortOrder
    mfo?: SortOrder
    rs?: SortOrder
    bank?: SortOrder
    oked?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    user_id?: StringNullableWithAggregatesFilter<"Company"> | string | null
    name?: StringWithAggregatesFilter<"Company"> | string
    inn?: StringWithAggregatesFilter<"Company"> | string
    mfo?: StringWithAggregatesFilter<"Company"> | string
    rs?: StringWithAggregatesFilter<"Company"> | string
    bank?: StringWithAggregatesFilter<"Company"> | string
    oked?: StringWithAggregatesFilter<"Company"> | string
    address?: StringWithAggregatesFilter<"Company"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    user_id?: StringFilter<"Session"> | string
    ip_address?: StringFilter<"Session"> | string
    date?: DateTimeFilter<"Session"> | Date | string
    device?: JsonFilter<"Session">
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    ip_address?: SortOrder
    date?: SortOrder
    device?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    user_id?: StringFilter<"Session"> | string
    ip_address?: StringFilter<"Session"> | string
    date?: DateTimeFilter<"Session"> | Date | string
    device?: JsonFilter<"Session">
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    ip_address?: SortOrder
    date?: SortOrder
    device?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    user_id?: StringWithAggregatesFilter<"Session"> | string
    ip_address?: StringWithAggregatesFilter<"Session"> | string
    date?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    device?: JsonWithAggregatesFilter<"Session">
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: StringFilter<"Brand"> | string
    name_uz?: StringFilter<"Brand"> | string
    name_ru?: StringFilter<"Brand"> | string
    name_en?: StringFilter<"Brand"> | string
    Tool?: ToolListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    Tool?: ToolOrderByRelationAggregateInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    name_uz?: StringFilter<"Brand"> | string
    name_ru?: StringFilter<"Brand"> | string
    name_en?: StringFilter<"Brand"> | string
    Tool?: ToolListRelationFilter
  }, "id">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    _count?: BrandCountOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Brand"> | string
    name_uz?: StringWithAggregatesFilter<"Brand"> | string
    name_ru?: StringWithAggregatesFilter<"Brand"> | string
    name_en?: StringWithAggregatesFilter<"Brand"> | string
  }

  export type SizeWhereInput = {
    AND?: SizeWhereInput | SizeWhereInput[]
    OR?: SizeWhereInput[]
    NOT?: SizeWhereInput | SizeWhereInput[]
    id?: StringFilter<"Size"> | string
    name_uz?: StringFilter<"Size"> | string
    name_ru?: StringFilter<"Size"> | string
    name_en?: StringFilter<"Size"> | string
    Tool?: ToolListRelationFilter
  }

  export type SizeOrderByWithRelationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    Tool?: ToolOrderByRelationAggregateInput
  }

  export type SizeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SizeWhereInput | SizeWhereInput[]
    OR?: SizeWhereInput[]
    NOT?: SizeWhereInput | SizeWhereInput[]
    name_uz?: StringFilter<"Size"> | string
    name_ru?: StringFilter<"Size"> | string
    name_en?: StringFilter<"Size"> | string
    Tool?: ToolListRelationFilter
  }, "id">

  export type SizeOrderByWithAggregationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    _count?: SizeCountOrderByAggregateInput
    _max?: SizeMaxOrderByAggregateInput
    _min?: SizeMinOrderByAggregateInput
  }

  export type SizeScalarWhereWithAggregatesInput = {
    AND?: SizeScalarWhereWithAggregatesInput | SizeScalarWhereWithAggregatesInput[]
    OR?: SizeScalarWhereWithAggregatesInput[]
    NOT?: SizeScalarWhereWithAggregatesInput | SizeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Size"> | string
    name_uz?: StringWithAggregatesFilter<"Size"> | string
    name_ru?: StringWithAggregatesFilter<"Size"> | string
    name_en?: StringWithAggregatesFilter<"Size"> | string
  }

  export type CapacityWhereInput = {
    AND?: CapacityWhereInput | CapacityWhereInput[]
    OR?: CapacityWhereInput[]
    NOT?: CapacityWhereInput | CapacityWhereInput[]
    id?: StringFilter<"Capacity"> | string
    name_uz?: StringFilter<"Capacity"> | string
    name_ru?: StringFilter<"Capacity"> | string
    name_en?: StringFilter<"Capacity"> | string
    Tool?: ToolListRelationFilter
  }

  export type CapacityOrderByWithRelationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    Tool?: ToolOrderByRelationAggregateInput
  }

  export type CapacityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CapacityWhereInput | CapacityWhereInput[]
    OR?: CapacityWhereInput[]
    NOT?: CapacityWhereInput | CapacityWhereInput[]
    name_uz?: StringFilter<"Capacity"> | string
    name_ru?: StringFilter<"Capacity"> | string
    name_en?: StringFilter<"Capacity"> | string
    Tool?: ToolListRelationFilter
  }, "id">

  export type CapacityOrderByWithAggregationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    _count?: CapacityCountOrderByAggregateInput
    _max?: CapacityMaxOrderByAggregateInput
    _min?: CapacityMinOrderByAggregateInput
  }

  export type CapacityScalarWhereWithAggregatesInput = {
    AND?: CapacityScalarWhereWithAggregatesInput | CapacityScalarWhereWithAggregatesInput[]
    OR?: CapacityScalarWhereWithAggregatesInput[]
    NOT?: CapacityScalarWhereWithAggregatesInput | CapacityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Capacity"> | string
    name_uz?: StringWithAggregatesFilter<"Capacity"> | string
    name_ru?: StringWithAggregatesFilter<"Capacity"> | string
    name_en?: StringWithAggregatesFilter<"Capacity"> | string
  }

  export type ToolWhereInput = {
    AND?: ToolWhereInput | ToolWhereInput[]
    OR?: ToolWhereInput[]
    NOT?: ToolWhereInput | ToolWhereInput[]
    id?: StringFilter<"Tool"> | string
    name_uz?: StringFilter<"Tool"> | string
    name_ru?: StringFilter<"Tool"> | string
    name_en?: StringFilter<"Tool"> | string
    description_uz?: StringFilter<"Tool"> | string
    description_ru?: StringFilter<"Tool"> | string
    description_en?: StringFilter<"Tool"> | string
    price?: FloatFilter<"Tool"> | number
    count?: IntFilter<"Tool"> | number
    code?: StringFilter<"Tool"> | string
    brand_id?: StringNullableFilter<"Tool"> | string | null
    size_id?: StringNullableFilter<"Tool"> | string | null
    capacity_id?: StringNullableFilter<"Tool"> | string | null
    isActive?: BoolFilter<"Tool"> | boolean
    image?: StringFilter<"Tool"> | string
    createdAt?: DateTimeFilter<"Tool"> | Date | string
    updatedAt?: DateTimeFilter<"Tool"> | Date | string
    Brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    Size?: XOR<SizeNullableScalarRelationFilter, SizeWhereInput> | null
    Capacity?: XOR<CapacityNullableScalarRelationFilter, CapacityWhereInput> | null
    Professions?: ProfessionListRelationFilter
    OrderItems?: OrderItemsListRelationFilter
    BacketItems?: BacketItemsListRelationFilter
  }

  export type ToolOrderByWithRelationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    description_uz?: SortOrder
    description_ru?: SortOrder
    description_en?: SortOrder
    price?: SortOrder
    count?: SortOrder
    code?: SortOrder
    brand_id?: SortOrderInput | SortOrder
    size_id?: SortOrderInput | SortOrder
    capacity_id?: SortOrderInput | SortOrder
    isActive?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Brand?: BrandOrderByWithRelationInput
    Size?: SizeOrderByWithRelationInput
    Capacity?: CapacityOrderByWithRelationInput
    Professions?: ProfessionOrderByRelationAggregateInput
    OrderItems?: OrderItemsOrderByRelationAggregateInput
    BacketItems?: BacketItemsOrderByRelationAggregateInput
  }

  export type ToolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: ToolWhereInput | ToolWhereInput[]
    OR?: ToolWhereInput[]
    NOT?: ToolWhereInput | ToolWhereInput[]
    name_uz?: StringFilter<"Tool"> | string
    name_ru?: StringFilter<"Tool"> | string
    name_en?: StringFilter<"Tool"> | string
    description_uz?: StringFilter<"Tool"> | string
    description_ru?: StringFilter<"Tool"> | string
    description_en?: StringFilter<"Tool"> | string
    price?: FloatFilter<"Tool"> | number
    count?: IntFilter<"Tool"> | number
    brand_id?: StringNullableFilter<"Tool"> | string | null
    size_id?: StringNullableFilter<"Tool"> | string | null
    capacity_id?: StringNullableFilter<"Tool"> | string | null
    isActive?: BoolFilter<"Tool"> | boolean
    image?: StringFilter<"Tool"> | string
    createdAt?: DateTimeFilter<"Tool"> | Date | string
    updatedAt?: DateTimeFilter<"Tool"> | Date | string
    Brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    Size?: XOR<SizeNullableScalarRelationFilter, SizeWhereInput> | null
    Capacity?: XOR<CapacityNullableScalarRelationFilter, CapacityWhereInput> | null
    Professions?: ProfessionListRelationFilter
    OrderItems?: OrderItemsListRelationFilter
    BacketItems?: BacketItemsListRelationFilter
  }, "id" | "code">

  export type ToolOrderByWithAggregationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    description_uz?: SortOrder
    description_ru?: SortOrder
    description_en?: SortOrder
    price?: SortOrder
    count?: SortOrder
    code?: SortOrder
    brand_id?: SortOrderInput | SortOrder
    size_id?: SortOrderInput | SortOrder
    capacity_id?: SortOrderInput | SortOrder
    isActive?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ToolCountOrderByAggregateInput
    _avg?: ToolAvgOrderByAggregateInput
    _max?: ToolMaxOrderByAggregateInput
    _min?: ToolMinOrderByAggregateInput
    _sum?: ToolSumOrderByAggregateInput
  }

  export type ToolScalarWhereWithAggregatesInput = {
    AND?: ToolScalarWhereWithAggregatesInput | ToolScalarWhereWithAggregatesInput[]
    OR?: ToolScalarWhereWithAggregatesInput[]
    NOT?: ToolScalarWhereWithAggregatesInput | ToolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tool"> | string
    name_uz?: StringWithAggregatesFilter<"Tool"> | string
    name_ru?: StringWithAggregatesFilter<"Tool"> | string
    name_en?: StringWithAggregatesFilter<"Tool"> | string
    description_uz?: StringWithAggregatesFilter<"Tool"> | string
    description_ru?: StringWithAggregatesFilter<"Tool"> | string
    description_en?: StringWithAggregatesFilter<"Tool"> | string
    price?: FloatWithAggregatesFilter<"Tool"> | number
    count?: IntWithAggregatesFilter<"Tool"> | number
    code?: StringWithAggregatesFilter<"Tool"> | string
    brand_id?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    size_id?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    capacity_id?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    isActive?: BoolWithAggregatesFilter<"Tool"> | boolean
    image?: StringWithAggregatesFilter<"Tool"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tool"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tool"> | Date | string
  }

  export type LevelWhereInput = {
    AND?: LevelWhereInput | LevelWhereInput[]
    OR?: LevelWhereInput[]
    NOT?: LevelWhereInput | LevelWhereInput[]
    id?: StringFilter<"Level"> | string
    name_uz?: StringFilter<"Level"> | string
    name_ru?: StringFilter<"Level"> | string
    name_en?: StringFilter<"Level"> | string
    MasterSkills?: MasterSkillsListRelationFilter
    LevelsProfessions?: LevelsProfessionsListRelationFilter
    OrderItems?: OrderItemsListRelationFilter
    BacketItems?: BacketItemsListRelationFilter
  }

  export type LevelOrderByWithRelationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    MasterSkills?: MasterSkillsOrderByRelationAggregateInput
    LevelsProfessions?: LevelsProfessionsOrderByRelationAggregateInput
    OrderItems?: OrderItemsOrderByRelationAggregateInput
    BacketItems?: BacketItemsOrderByRelationAggregateInput
  }

  export type LevelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LevelWhereInput | LevelWhereInput[]
    OR?: LevelWhereInput[]
    NOT?: LevelWhereInput | LevelWhereInput[]
    name_uz?: StringFilter<"Level"> | string
    name_ru?: StringFilter<"Level"> | string
    name_en?: StringFilter<"Level"> | string
    MasterSkills?: MasterSkillsListRelationFilter
    LevelsProfessions?: LevelsProfessionsListRelationFilter
    OrderItems?: OrderItemsListRelationFilter
    BacketItems?: BacketItemsListRelationFilter
  }, "id">

  export type LevelOrderByWithAggregationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    _count?: LevelCountOrderByAggregateInput
    _max?: LevelMaxOrderByAggregateInput
    _min?: LevelMinOrderByAggregateInput
  }

  export type LevelScalarWhereWithAggregatesInput = {
    AND?: LevelScalarWhereWithAggregatesInput | LevelScalarWhereWithAggregatesInput[]
    OR?: LevelScalarWhereWithAggregatesInput[]
    NOT?: LevelScalarWhereWithAggregatesInput | LevelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Level"> | string
    name_uz?: StringWithAggregatesFilter<"Level"> | string
    name_ru?: StringWithAggregatesFilter<"Level"> | string
    name_en?: StringWithAggregatesFilter<"Level"> | string
  }

  export type ProfessionWhereInput = {
    AND?: ProfessionWhereInput | ProfessionWhereInput[]
    OR?: ProfessionWhereInput[]
    NOT?: ProfessionWhereInput | ProfessionWhereInput[]
    id?: StringFilter<"Profession"> | string
    name_uz?: StringFilter<"Profession"> | string
    name_ru?: StringFilter<"Profession"> | string
    name_en?: StringFilter<"Profession"> | string
    image?: StringFilter<"Profession"> | string
    isActive?: BoolFilter<"Profession"> | boolean
    Tools?: ToolListRelationFilter
    MasterSkills?: MasterSkillsListRelationFilter
    LevelsProfessions?: LevelsProfessionsListRelationFilter
    OrderItems?: OrderItemsListRelationFilter
    BacketItems?: BacketItemsListRelationFilter
  }

  export type ProfessionOrderByWithRelationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    Tools?: ToolOrderByRelationAggregateInput
    MasterSkills?: MasterSkillsOrderByRelationAggregateInput
    LevelsProfessions?: LevelsProfessionsOrderByRelationAggregateInput
    OrderItems?: OrderItemsOrderByRelationAggregateInput
    BacketItems?: BacketItemsOrderByRelationAggregateInput
  }

  export type ProfessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfessionWhereInput | ProfessionWhereInput[]
    OR?: ProfessionWhereInput[]
    NOT?: ProfessionWhereInput | ProfessionWhereInput[]
    name_uz?: StringFilter<"Profession"> | string
    name_ru?: StringFilter<"Profession"> | string
    name_en?: StringFilter<"Profession"> | string
    image?: StringFilter<"Profession"> | string
    isActive?: BoolFilter<"Profession"> | boolean
    Tools?: ToolListRelationFilter
    MasterSkills?: MasterSkillsListRelationFilter
    LevelsProfessions?: LevelsProfessionsListRelationFilter
    OrderItems?: OrderItemsListRelationFilter
    BacketItems?: BacketItemsListRelationFilter
  }, "id">

  export type ProfessionOrderByWithAggregationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    _count?: ProfessionCountOrderByAggregateInput
    _max?: ProfessionMaxOrderByAggregateInput
    _min?: ProfessionMinOrderByAggregateInput
  }

  export type ProfessionScalarWhereWithAggregatesInput = {
    AND?: ProfessionScalarWhereWithAggregatesInput | ProfessionScalarWhereWithAggregatesInput[]
    OR?: ProfessionScalarWhereWithAggregatesInput[]
    NOT?: ProfessionScalarWhereWithAggregatesInput | ProfessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profession"> | string
    name_uz?: StringWithAggregatesFilter<"Profession"> | string
    name_ru?: StringWithAggregatesFilter<"Profession"> | string
    name_en?: StringWithAggregatesFilter<"Profession"> | string
    image?: StringWithAggregatesFilter<"Profession"> | string
    isActive?: BoolWithAggregatesFilter<"Profession"> | boolean
  }

  export type LevelsProfessionsWhereInput = {
    AND?: LevelsProfessionsWhereInput | LevelsProfessionsWhereInput[]
    OR?: LevelsProfessionsWhereInput[]
    NOT?: LevelsProfessionsWhereInput | LevelsProfessionsWhereInput[]
    id?: StringFilter<"LevelsProfessions"> | string
    profession_id?: StringFilter<"LevelsProfessions"> | string
    level_id?: StringNullableFilter<"LevelsProfessions"> | string | null
    min_work_hours?: IntFilter<"LevelsProfessions"> | number
    price_hourly?: FloatFilter<"LevelsProfessions"> | number
    price_daily?: FloatFilter<"LevelsProfessions"> | number
    Profession?: XOR<ProfessionScalarRelationFilter, ProfessionWhereInput>
    Level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
  }

  export type LevelsProfessionsOrderByWithRelationInput = {
    id?: SortOrder
    profession_id?: SortOrder
    level_id?: SortOrderInput | SortOrder
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
    Profession?: ProfessionOrderByWithRelationInput
    Level?: LevelOrderByWithRelationInput
  }

  export type LevelsProfessionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LevelsProfessionsWhereInput | LevelsProfessionsWhereInput[]
    OR?: LevelsProfessionsWhereInput[]
    NOT?: LevelsProfessionsWhereInput | LevelsProfessionsWhereInput[]
    profession_id?: StringFilter<"LevelsProfessions"> | string
    level_id?: StringNullableFilter<"LevelsProfessions"> | string | null
    min_work_hours?: IntFilter<"LevelsProfessions"> | number
    price_hourly?: FloatFilter<"LevelsProfessions"> | number
    price_daily?: FloatFilter<"LevelsProfessions"> | number
    Profession?: XOR<ProfessionScalarRelationFilter, ProfessionWhereInput>
    Level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
  }, "id">

  export type LevelsProfessionsOrderByWithAggregationInput = {
    id?: SortOrder
    profession_id?: SortOrder
    level_id?: SortOrderInput | SortOrder
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
    _count?: LevelsProfessionsCountOrderByAggregateInput
    _avg?: LevelsProfessionsAvgOrderByAggregateInput
    _max?: LevelsProfessionsMaxOrderByAggregateInput
    _min?: LevelsProfessionsMinOrderByAggregateInput
    _sum?: LevelsProfessionsSumOrderByAggregateInput
  }

  export type LevelsProfessionsScalarWhereWithAggregatesInput = {
    AND?: LevelsProfessionsScalarWhereWithAggregatesInput | LevelsProfessionsScalarWhereWithAggregatesInput[]
    OR?: LevelsProfessionsScalarWhereWithAggregatesInput[]
    NOT?: LevelsProfessionsScalarWhereWithAggregatesInput | LevelsProfessionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LevelsProfessions"> | string
    profession_id?: StringWithAggregatesFilter<"LevelsProfessions"> | string
    level_id?: StringNullableWithAggregatesFilter<"LevelsProfessions"> | string | null
    min_work_hours?: IntWithAggregatesFilter<"LevelsProfessions"> | number
    price_hourly?: FloatWithAggregatesFilter<"LevelsProfessions"> | number
    price_daily?: FloatWithAggregatesFilter<"LevelsProfessions"> | number
  }

  export type MasterWhereInput = {
    AND?: MasterWhereInput | MasterWhereInput[]
    OR?: MasterWhereInput[]
    NOT?: MasterWhereInput | MasterWhereInput[]
    id?: StringFilter<"Master"> | string
    full_name?: StringFilter<"Master"> | string
    phone?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    year?: DateTimeFilter<"Master"> | Date | string
    image?: StringFilter<"Master"> | string
    passport_image?: StringFilter<"Master"> | string
    about?: StringFilter<"Master"> | string
    createdAt?: DateTimeFilter<"Master"> | Date | string
    updatedAt?: DateTimeFilter<"Master"> | Date | string
    MasterSkills?: MasterSkillsListRelationFilter
    Orders?: OrderListRelationFilter
    MasterRatings?: MasterRatingsListRelationFilter
  }

  export type MasterOrderByWithRelationInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    year?: SortOrder
    image?: SortOrder
    passport_image?: SortOrder
    about?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    MasterSkills?: MasterSkillsOrderByRelationAggregateInput
    Orders?: OrderOrderByRelationAggregateInput
    MasterRatings?: MasterRatingsOrderByRelationAggregateInput
  }

  export type MasterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterWhereInput | MasterWhereInput[]
    OR?: MasterWhereInput[]
    NOT?: MasterWhereInput | MasterWhereInput[]
    full_name?: StringFilter<"Master"> | string
    phone?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    year?: DateTimeFilter<"Master"> | Date | string
    image?: StringFilter<"Master"> | string
    passport_image?: StringFilter<"Master"> | string
    about?: StringFilter<"Master"> | string
    createdAt?: DateTimeFilter<"Master"> | Date | string
    updatedAt?: DateTimeFilter<"Master"> | Date | string
    MasterSkills?: MasterSkillsListRelationFilter
    Orders?: OrderListRelationFilter
    MasterRatings?: MasterRatingsListRelationFilter
  }, "id">

  export type MasterOrderByWithAggregationInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    year?: SortOrder
    image?: SortOrder
    passport_image?: SortOrder
    about?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MasterCountOrderByAggregateInput
    _max?: MasterMaxOrderByAggregateInput
    _min?: MasterMinOrderByAggregateInput
  }

  export type MasterScalarWhereWithAggregatesInput = {
    AND?: MasterScalarWhereWithAggregatesInput | MasterScalarWhereWithAggregatesInput[]
    OR?: MasterScalarWhereWithAggregatesInput[]
    NOT?: MasterScalarWhereWithAggregatesInput | MasterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Master"> | string
    full_name?: StringWithAggregatesFilter<"Master"> | string
    phone?: StringWithAggregatesFilter<"Master"> | string
    isActive?: BoolWithAggregatesFilter<"Master"> | boolean
    year?: DateTimeWithAggregatesFilter<"Master"> | Date | string
    image?: StringWithAggregatesFilter<"Master"> | string
    passport_image?: StringWithAggregatesFilter<"Master"> | string
    about?: StringWithAggregatesFilter<"Master"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Master"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Master"> | Date | string
  }

  export type MasterSkillsWhereInput = {
    AND?: MasterSkillsWhereInput | MasterSkillsWhereInput[]
    OR?: MasterSkillsWhereInput[]
    NOT?: MasterSkillsWhereInput | MasterSkillsWhereInput[]
    id?: StringFilter<"MasterSkills"> | string
    min_work_hours?: IntFilter<"MasterSkills"> | number
    price_hourly?: FloatFilter<"MasterSkills"> | number
    price_daily?: FloatFilter<"MasterSkills"> | number
    experience?: IntFilter<"MasterSkills"> | number
    level_id?: StringNullableFilter<"MasterSkills"> | string | null
    profession_id?: StringNullableFilter<"MasterSkills"> | string | null
    master_id?: StringFilter<"MasterSkills"> | string
    Level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
    Profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    Master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }

  export type MasterSkillsOrderByWithRelationInput = {
    id?: SortOrder
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
    experience?: SortOrder
    level_id?: SortOrderInput | SortOrder
    profession_id?: SortOrderInput | SortOrder
    master_id?: SortOrder
    Level?: LevelOrderByWithRelationInput
    Profession?: ProfessionOrderByWithRelationInput
    Master?: MasterOrderByWithRelationInput
  }

  export type MasterSkillsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterSkillsWhereInput | MasterSkillsWhereInput[]
    OR?: MasterSkillsWhereInput[]
    NOT?: MasterSkillsWhereInput | MasterSkillsWhereInput[]
    min_work_hours?: IntFilter<"MasterSkills"> | number
    price_hourly?: FloatFilter<"MasterSkills"> | number
    price_daily?: FloatFilter<"MasterSkills"> | number
    experience?: IntFilter<"MasterSkills"> | number
    level_id?: StringNullableFilter<"MasterSkills"> | string | null
    profession_id?: StringNullableFilter<"MasterSkills"> | string | null
    master_id?: StringFilter<"MasterSkills"> | string
    Level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
    Profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    Master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }, "id">

  export type MasterSkillsOrderByWithAggregationInput = {
    id?: SortOrder
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
    experience?: SortOrder
    level_id?: SortOrderInput | SortOrder
    profession_id?: SortOrderInput | SortOrder
    master_id?: SortOrder
    _count?: MasterSkillsCountOrderByAggregateInput
    _avg?: MasterSkillsAvgOrderByAggregateInput
    _max?: MasterSkillsMaxOrderByAggregateInput
    _min?: MasterSkillsMinOrderByAggregateInput
    _sum?: MasterSkillsSumOrderByAggregateInput
  }

  export type MasterSkillsScalarWhereWithAggregatesInput = {
    AND?: MasterSkillsScalarWhereWithAggregatesInput | MasterSkillsScalarWhereWithAggregatesInput[]
    OR?: MasterSkillsScalarWhereWithAggregatesInput[]
    NOT?: MasterSkillsScalarWhereWithAggregatesInput | MasterSkillsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MasterSkills"> | string
    min_work_hours?: IntWithAggregatesFilter<"MasterSkills"> | number
    price_hourly?: FloatWithAggregatesFilter<"MasterSkills"> | number
    price_daily?: FloatWithAggregatesFilter<"MasterSkills"> | number
    experience?: IntWithAggregatesFilter<"MasterSkills"> | number
    level_id?: StringNullableWithAggregatesFilter<"MasterSkills"> | string | null
    profession_id?: StringNullableWithAggregatesFilter<"MasterSkills"> | string | null
    master_id?: StringWithAggregatesFilter<"MasterSkills"> | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    user_id?: StringFilter<"Order"> | string
    total_sum?: FloatFilter<"Order"> | number
    location?: JsonFilter<"Order">
    address?: StringFilter<"Order"> | string
    dete?: DateTimeFilter<"Order"> | Date | string
    payment_type?: EnumPaymentTypeFilter<"Order"> | $Enums.PaymentType
    paid?: BoolFilter<"Order"> | boolean
    status?: EnumStatusOrderFilter<"Order"> | $Enums.StatusOrder
    with_delivery?: BoolFilter<"Order"> | boolean
    comment_delivery?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    Masters?: MasterListRelationFilter
    OrderItems?: OrderItemsListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_sum?: SortOrder
    location?: SortOrder
    address?: SortOrder
    dete?: SortOrder
    payment_type?: SortOrder
    paid?: SortOrder
    status?: SortOrder
    with_delivery?: SortOrder
    comment_delivery?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    User?: UserOrderByWithRelationInput
    Masters?: MasterOrderByRelationAggregateInput
    OrderItems?: OrderItemsOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    user_id?: StringFilter<"Order"> | string
    total_sum?: FloatFilter<"Order"> | number
    location?: JsonFilter<"Order">
    address?: StringFilter<"Order"> | string
    dete?: DateTimeFilter<"Order"> | Date | string
    payment_type?: EnumPaymentTypeFilter<"Order"> | $Enums.PaymentType
    paid?: BoolFilter<"Order"> | boolean
    status?: EnumStatusOrderFilter<"Order"> | $Enums.StatusOrder
    with_delivery?: BoolFilter<"Order"> | boolean
    comment_delivery?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    Masters?: MasterListRelationFilter
    OrderItems?: OrderItemsListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_sum?: SortOrder
    location?: SortOrder
    address?: SortOrder
    dete?: SortOrder
    payment_type?: SortOrder
    paid?: SortOrder
    status?: SortOrder
    with_delivery?: SortOrder
    comment_delivery?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    user_id?: StringWithAggregatesFilter<"Order"> | string
    total_sum?: FloatWithAggregatesFilter<"Order"> | number
    location?: JsonWithAggregatesFilter<"Order">
    address?: StringWithAggregatesFilter<"Order"> | string
    dete?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    payment_type?: EnumPaymentTypeWithAggregatesFilter<"Order"> | $Enums.PaymentType
    paid?: BoolWithAggregatesFilter<"Order"> | boolean
    status?: EnumStatusOrderWithAggregatesFilter<"Order"> | $Enums.StatusOrder
    with_delivery?: BoolWithAggregatesFilter<"Order"> | boolean
    comment_delivery?: StringWithAggregatesFilter<"Order"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type OrderItemsWhereInput = {
    AND?: OrderItemsWhereInput | OrderItemsWhereInput[]
    OR?: OrderItemsWhereInput[]
    NOT?: OrderItemsWhereInput | OrderItemsWhereInput[]
    id?: StringFilter<"OrderItems"> | string
    order_id?: StringFilter<"OrderItems"> | string
    tool_id?: StringNullableFilter<"OrderItems"> | string | null
    profession_id?: StringNullableFilter<"OrderItems"> | string | null
    level_id?: StringNullableFilter<"OrderItems"> | string | null
    count?: IntFilter<"OrderItems"> | number
    measure?: EnumMeasureFilter<"OrderItems"> | $Enums.Measure
    time?: IntFilter<"OrderItems"> | number
    total_sum?: FloatFilter<"OrderItems"> | number
    Order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    Tool?: XOR<ToolNullableScalarRelationFilter, ToolWhereInput> | null
    Profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    Level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
  }

  export type OrderItemsOrderByWithRelationInput = {
    id?: SortOrder
    order_id?: SortOrder
    tool_id?: SortOrderInput | SortOrder
    profession_id?: SortOrderInput | SortOrder
    level_id?: SortOrderInput | SortOrder
    count?: SortOrder
    measure?: SortOrder
    time?: SortOrder
    total_sum?: SortOrder
    Order?: OrderOrderByWithRelationInput
    Tool?: ToolOrderByWithRelationInput
    Profession?: ProfessionOrderByWithRelationInput
    Level?: LevelOrderByWithRelationInput
  }

  export type OrderItemsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderItemsWhereInput | OrderItemsWhereInput[]
    OR?: OrderItemsWhereInput[]
    NOT?: OrderItemsWhereInput | OrderItemsWhereInput[]
    order_id?: StringFilter<"OrderItems"> | string
    tool_id?: StringNullableFilter<"OrderItems"> | string | null
    profession_id?: StringNullableFilter<"OrderItems"> | string | null
    level_id?: StringNullableFilter<"OrderItems"> | string | null
    count?: IntFilter<"OrderItems"> | number
    measure?: EnumMeasureFilter<"OrderItems"> | $Enums.Measure
    time?: IntFilter<"OrderItems"> | number
    total_sum?: FloatFilter<"OrderItems"> | number
    Order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    Tool?: XOR<ToolNullableScalarRelationFilter, ToolWhereInput> | null
    Profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    Level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
  }, "id">

  export type OrderItemsOrderByWithAggregationInput = {
    id?: SortOrder
    order_id?: SortOrder
    tool_id?: SortOrderInput | SortOrder
    profession_id?: SortOrderInput | SortOrder
    level_id?: SortOrderInput | SortOrder
    count?: SortOrder
    measure?: SortOrder
    time?: SortOrder
    total_sum?: SortOrder
    _count?: OrderItemsCountOrderByAggregateInput
    _avg?: OrderItemsAvgOrderByAggregateInput
    _max?: OrderItemsMaxOrderByAggregateInput
    _min?: OrderItemsMinOrderByAggregateInput
    _sum?: OrderItemsSumOrderByAggregateInput
  }

  export type OrderItemsScalarWhereWithAggregatesInput = {
    AND?: OrderItemsScalarWhereWithAggregatesInput | OrderItemsScalarWhereWithAggregatesInput[]
    OR?: OrderItemsScalarWhereWithAggregatesInput[]
    NOT?: OrderItemsScalarWhereWithAggregatesInput | OrderItemsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrderItems"> | string
    order_id?: StringWithAggregatesFilter<"OrderItems"> | string
    tool_id?: StringNullableWithAggregatesFilter<"OrderItems"> | string | null
    profession_id?: StringNullableWithAggregatesFilter<"OrderItems"> | string | null
    level_id?: StringNullableWithAggregatesFilter<"OrderItems"> | string | null
    count?: IntWithAggregatesFilter<"OrderItems"> | number
    measure?: EnumMeasureWithAggregatesFilter<"OrderItems"> | $Enums.Measure
    time?: IntWithAggregatesFilter<"OrderItems"> | number
    total_sum?: FloatWithAggregatesFilter<"OrderItems"> | number
  }

  export type BacketItemsWhereInput = {
    AND?: BacketItemsWhereInput | BacketItemsWhereInput[]
    OR?: BacketItemsWhereInput[]
    NOT?: BacketItemsWhereInput | BacketItemsWhereInput[]
    id?: StringFilter<"BacketItems"> | string
    user_id?: StringFilter<"BacketItems"> | string
    profession_id?: StringNullableFilter<"BacketItems"> | string | null
    tool_id?: StringNullableFilter<"BacketItems"> | string | null
    level_id?: StringNullableFilter<"BacketItems"> | string | null
    count?: IntFilter<"BacketItems"> | number
    measure?: EnumMeasureFilter<"BacketItems"> | $Enums.Measure
    time?: IntFilter<"BacketItems"> | number
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    Pofession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    Tool?: XOR<ToolNullableScalarRelationFilter, ToolWhereInput> | null
    Level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
  }

  export type BacketItemsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    profession_id?: SortOrderInput | SortOrder
    tool_id?: SortOrderInput | SortOrder
    level_id?: SortOrderInput | SortOrder
    count?: SortOrder
    measure?: SortOrder
    time?: SortOrder
    User?: UserOrderByWithRelationInput
    Pofession?: ProfessionOrderByWithRelationInput
    Tool?: ToolOrderByWithRelationInput
    Level?: LevelOrderByWithRelationInput
  }

  export type BacketItemsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BacketItemsWhereInput | BacketItemsWhereInput[]
    OR?: BacketItemsWhereInput[]
    NOT?: BacketItemsWhereInput | BacketItemsWhereInput[]
    user_id?: StringFilter<"BacketItems"> | string
    profession_id?: StringNullableFilter<"BacketItems"> | string | null
    tool_id?: StringNullableFilter<"BacketItems"> | string | null
    level_id?: StringNullableFilter<"BacketItems"> | string | null
    count?: IntFilter<"BacketItems"> | number
    measure?: EnumMeasureFilter<"BacketItems"> | $Enums.Measure
    time?: IntFilter<"BacketItems"> | number
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    Pofession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    Tool?: XOR<ToolNullableScalarRelationFilter, ToolWhereInput> | null
    Level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
  }, "id">

  export type BacketItemsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    profession_id?: SortOrderInput | SortOrder
    tool_id?: SortOrderInput | SortOrder
    level_id?: SortOrderInput | SortOrder
    count?: SortOrder
    measure?: SortOrder
    time?: SortOrder
    _count?: BacketItemsCountOrderByAggregateInput
    _avg?: BacketItemsAvgOrderByAggregateInput
    _max?: BacketItemsMaxOrderByAggregateInput
    _min?: BacketItemsMinOrderByAggregateInput
    _sum?: BacketItemsSumOrderByAggregateInput
  }

  export type BacketItemsScalarWhereWithAggregatesInput = {
    AND?: BacketItemsScalarWhereWithAggregatesInput | BacketItemsScalarWhereWithAggregatesInput[]
    OR?: BacketItemsScalarWhereWithAggregatesInput[]
    NOT?: BacketItemsScalarWhereWithAggregatesInput | BacketItemsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BacketItems"> | string
    user_id?: StringWithAggregatesFilter<"BacketItems"> | string
    profession_id?: StringNullableWithAggregatesFilter<"BacketItems"> | string | null
    tool_id?: StringNullableWithAggregatesFilter<"BacketItems"> | string | null
    level_id?: StringNullableWithAggregatesFilter<"BacketItems"> | string | null
    count?: IntWithAggregatesFilter<"BacketItems"> | number
    measure?: EnumMeasureWithAggregatesFilter<"BacketItems"> | $Enums.Measure
    time?: IntWithAggregatesFilter<"BacketItems"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    MasterRatings?: MasterRatingsListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    MasterRatings?: MasterRatingsOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    MasterRatings?: MasterRatingsListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    text?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type MasterRatingsWhereInput = {
    AND?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    OR?: MasterRatingsWhereInput[]
    NOT?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    id?: StringFilter<"MasterRatings"> | string
    star?: FloatFilter<"MasterRatings"> | number
    master_id?: StringFilter<"MasterRatings"> | string
    comment_id?: StringFilter<"MasterRatings"> | string
    Master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
    Comment?: XOR<CommentScalarRelationFilter, CommentWhereInput>
  }

  export type MasterRatingsOrderByWithRelationInput = {
    id?: SortOrder
    star?: SortOrder
    master_id?: SortOrder
    comment_id?: SortOrder
    Master?: MasterOrderByWithRelationInput
    Comment?: CommentOrderByWithRelationInput
  }

  export type MasterRatingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    OR?: MasterRatingsWhereInput[]
    NOT?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    star?: FloatFilter<"MasterRatings"> | number
    master_id?: StringFilter<"MasterRatings"> | string
    comment_id?: StringFilter<"MasterRatings"> | string
    Master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
    Comment?: XOR<CommentScalarRelationFilter, CommentWhereInput>
  }, "id">

  export type MasterRatingsOrderByWithAggregationInput = {
    id?: SortOrder
    star?: SortOrder
    master_id?: SortOrder
    comment_id?: SortOrder
    _count?: MasterRatingsCountOrderByAggregateInput
    _avg?: MasterRatingsAvgOrderByAggregateInput
    _max?: MasterRatingsMaxOrderByAggregateInput
    _min?: MasterRatingsMinOrderByAggregateInput
    _sum?: MasterRatingsSumOrderByAggregateInput
  }

  export type MasterRatingsScalarWhereWithAggregatesInput = {
    AND?: MasterRatingsScalarWhereWithAggregatesInput | MasterRatingsScalarWhereWithAggregatesInput[]
    OR?: MasterRatingsScalarWhereWithAggregatesInput[]
    NOT?: MasterRatingsScalarWhereWithAggregatesInput | MasterRatingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MasterRatings"> | string
    star?: FloatWithAggregatesFilter<"MasterRatings"> | number
    master_id?: StringWithAggregatesFilter<"MasterRatings"> | string
    comment_id?: StringWithAggregatesFilter<"MasterRatings"> | string
  }

  export type InfoWhereInput = {
    AND?: InfoWhereInput | InfoWhereInput[]
    OR?: InfoWhereInput[]
    NOT?: InfoWhereInput | InfoWhereInput[]
    id?: StringFilter<"Info"> | string
    email?: StringFilter<"Info"> | string
    links?: JsonFilter<"Info">
    phone?: StringNullableListFilter<"Info">
  }

  export type InfoOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    links?: SortOrder
    phone?: SortOrder
  }

  export type InfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InfoWhereInput | InfoWhereInput[]
    OR?: InfoWhereInput[]
    NOT?: InfoWhereInput | InfoWhereInput[]
    email?: StringFilter<"Info"> | string
    links?: JsonFilter<"Info">
    phone?: StringNullableListFilter<"Info">
  }, "id">

  export type InfoOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    links?: SortOrder
    phone?: SortOrder
    _count?: InfoCountOrderByAggregateInput
    _max?: InfoMaxOrderByAggregateInput
    _min?: InfoMinOrderByAggregateInput
  }

  export type InfoScalarWhereWithAggregatesInput = {
    AND?: InfoScalarWhereWithAggregatesInput | InfoScalarWhereWithAggregatesInput[]
    OR?: InfoScalarWhereWithAggregatesInput[]
    NOT?: InfoScalarWhereWithAggregatesInput | InfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Info"> | string
    email?: StringWithAggregatesFilter<"Info"> | string
    links?: JsonWithAggregatesFilter<"Info">
    phone?: StringNullableListFilter<"Info">
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: StringFilter<"Contact"> | string
    full_name?: StringFilter<"Contact"> | string
    phone?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    full_name?: StringFilter<"Contact"> | string
    phone?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contact"> | string
    full_name?: StringWithAggregatesFilter<"Contact"> | string
    phone?: StringWithAggregatesFilter<"Contact"> | string
    address?: StringWithAggregatesFilter<"Contact"> | string
    message?: StringWithAggregatesFilter<"Contact"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
  }

  export type FAQWhereInput = {
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    id?: StringFilter<"FAQ"> | string
    question?: StringFilter<"FAQ"> | string
    answer?: StringFilter<"FAQ"> | string
    createdAt?: DateTimeFilter<"FAQ"> | Date | string
    updatedAt?: DateTimeFilter<"FAQ"> | Date | string
  }

  export type FAQOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    question?: StringFilter<"FAQ"> | string
    answer?: StringFilter<"FAQ"> | string
    createdAt?: DateTimeFilter<"FAQ"> | Date | string
    updatedAt?: DateTimeFilter<"FAQ"> | Date | string
  }, "id">

  export type FAQOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FAQCountOrderByAggregateInput
    _max?: FAQMaxOrderByAggregateInput
    _min?: FAQMinOrderByAggregateInput
  }

  export type FAQScalarWhereWithAggregatesInput = {
    AND?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    OR?: FAQScalarWhereWithAggregatesInput[]
    NOT?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FAQ"> | string
    question?: StringWithAggregatesFilter<"FAQ"> | string
    answer?: StringWithAggregatesFilter<"FAQ"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FAQ"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FAQ"> | Date | string
  }

  export type ShowcaseWhereInput = {
    AND?: ShowcaseWhereInput | ShowcaseWhereInput[]
    OR?: ShowcaseWhereInput[]
    NOT?: ShowcaseWhereInput | ShowcaseWhereInput[]
    id?: StringFilter<"Showcase"> | string
    name_uz?: StringFilter<"Showcase"> | string
    name_ru?: StringFilter<"Showcase"> | string
    name_en?: StringFilter<"Showcase"> | string
    description_uz?: StringFilter<"Showcase"> | string
    description_ru?: StringFilter<"Showcase"> | string
    description_en?: StringFilter<"Showcase"> | string
    image?: StringFilter<"Showcase"> | string
    link?: StringFilter<"Showcase"> | string
  }

  export type ShowcaseOrderByWithRelationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    description_uz?: SortOrder
    description_ru?: SortOrder
    description_en?: SortOrder
    image?: SortOrder
    link?: SortOrder
  }

  export type ShowcaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShowcaseWhereInput | ShowcaseWhereInput[]
    OR?: ShowcaseWhereInput[]
    NOT?: ShowcaseWhereInput | ShowcaseWhereInput[]
    name_uz?: StringFilter<"Showcase"> | string
    name_ru?: StringFilter<"Showcase"> | string
    name_en?: StringFilter<"Showcase"> | string
    description_uz?: StringFilter<"Showcase"> | string
    description_ru?: StringFilter<"Showcase"> | string
    description_en?: StringFilter<"Showcase"> | string
    image?: StringFilter<"Showcase"> | string
    link?: StringFilter<"Showcase"> | string
  }, "id">

  export type ShowcaseOrderByWithAggregationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    description_uz?: SortOrder
    description_ru?: SortOrder
    description_en?: SortOrder
    image?: SortOrder
    link?: SortOrder
    _count?: ShowcaseCountOrderByAggregateInput
    _max?: ShowcaseMaxOrderByAggregateInput
    _min?: ShowcaseMinOrderByAggregateInput
  }

  export type ShowcaseScalarWhereWithAggregatesInput = {
    AND?: ShowcaseScalarWhereWithAggregatesInput | ShowcaseScalarWhereWithAggregatesInput[]
    OR?: ShowcaseScalarWhereWithAggregatesInput[]
    NOT?: ShowcaseScalarWhereWithAggregatesInput | ShowcaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Showcase"> | string
    name_uz?: StringWithAggregatesFilter<"Showcase"> | string
    name_ru?: StringWithAggregatesFilter<"Showcase"> | string
    name_en?: StringWithAggregatesFilter<"Showcase"> | string
    description_uz?: StringWithAggregatesFilter<"Showcase"> | string
    description_ru?: StringWithAggregatesFilter<"Showcase"> | string
    description_en?: StringWithAggregatesFilter<"Showcase"> | string
    image?: StringWithAggregatesFilter<"Showcase"> | string
    link?: StringWithAggregatesFilter<"Showcase"> | string
  }

  export type PartnersWhereInput = {
    AND?: PartnersWhereInput | PartnersWhereInput[]
    OR?: PartnersWhereInput[]
    NOT?: PartnersWhereInput | PartnersWhereInput[]
    id?: StringFilter<"Partners"> | string
    name_uz?: StringFilter<"Partners"> | string
    name_ru?: StringFilter<"Partners"> | string
    name_en?: StringFilter<"Partners"> | string
    image?: StringFilter<"Partners"> | string
  }

  export type PartnersOrderByWithRelationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    image?: SortOrder
  }

  export type PartnersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PartnersWhereInput | PartnersWhereInput[]
    OR?: PartnersWhereInput[]
    NOT?: PartnersWhereInput | PartnersWhereInput[]
    name_uz?: StringFilter<"Partners"> | string
    name_ru?: StringFilter<"Partners"> | string
    name_en?: StringFilter<"Partners"> | string
    image?: StringFilter<"Partners"> | string
  }, "id">

  export type PartnersOrderByWithAggregationInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    image?: SortOrder
    _count?: PartnersCountOrderByAggregateInput
    _max?: PartnersMaxOrderByAggregateInput
    _min?: PartnersMinOrderByAggregateInput
  }

  export type PartnersScalarWhereWithAggregatesInput = {
    AND?: PartnersScalarWhereWithAggregatesInput | PartnersScalarWhereWithAggregatesInput[]
    OR?: PartnersScalarWhereWithAggregatesInput[]
    NOT?: PartnersScalarWhereWithAggregatesInput | PartnersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Partners"> | string
    name_uz?: StringWithAggregatesFilter<"Partners"> | string
    name_ru?: StringWithAggregatesFilter<"Partners"> | string
    name_en?: StringWithAggregatesFilter<"Partners"> | string
    image?: StringWithAggregatesFilter<"Partners"> | string
  }

  export type RegionCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    Users?: UserCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    Users?: UserUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    Users?: UserUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    Users?: UserUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type RegionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Region?: RegionCreateNestedOneWithoutUsersInput
    Company?: CompanyCreateNestedOneWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    Order?: OrderCreateNestedManyWithoutUserInput
    BacketItems?: BacketItemsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    region_id?: string | null
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Company?: CompanyUncheckedCreateNestedOneWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Order?: OrderUncheckedCreateNestedManyWithoutUserInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Region?: RegionUpdateOneWithoutUsersNestedInput
    Company?: CompanyUpdateOneWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    Order?: OrderUpdateManyWithoutUserNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    region_id?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Company?: CompanyUncheckedUpdateOneWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Order?: OrderUncheckedUpdateManyWithoutUserNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    region_id?: string | null
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    region_id?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    inn: string
    mfo: string
    rs: string
    bank: string
    oked: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
    User?: UserCreateNestedOneWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    user_id?: string | null
    name: string
    inn: string
    mfo: string
    rs: string
    bank: string
    oked: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    mfo?: StringFieldUpdateOperationsInput | string
    rs?: StringFieldUpdateOperationsInput | string
    bank?: StringFieldUpdateOperationsInput | string
    oked?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    mfo?: StringFieldUpdateOperationsInput | string
    rs?: StringFieldUpdateOperationsInput | string
    bank?: StringFieldUpdateOperationsInput | string
    oked?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateManyInput = {
    id?: string
    user_id?: string | null
    name: string
    inn: string
    mfo: string
    rs: string
    bank: string
    oked: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    mfo?: StringFieldUpdateOperationsInput | string
    rs?: StringFieldUpdateOperationsInput | string
    bank?: StringFieldUpdateOperationsInput | string
    oked?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    mfo?: StringFieldUpdateOperationsInput | string
    rs?: StringFieldUpdateOperationsInput | string
    bank?: StringFieldUpdateOperationsInput | string
    oked?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    ip_address: string
    date?: Date | string
    device: JsonNullValueInput | InputJsonValue
    User: UserCreateNestedOneWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    user_id: string
    ip_address: string
    date?: Date | string
    device: JsonNullValueInput | InputJsonValue
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: JsonNullValueInput | InputJsonValue
    User?: UserUpdateOneRequiredWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: JsonNullValueInput | InputJsonValue
  }

  export type SessionCreateManyInput = {
    id?: string
    user_id: string
    ip_address: string
    date?: Date | string
    device: JsonNullValueInput | InputJsonValue
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: JsonNullValueInput | InputJsonValue
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: JsonNullValueInput | InputJsonValue
  }

  export type BrandCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    Tool?: ToolCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    Tool?: ToolUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    Tool?: ToolUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    Tool?: ToolUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type BrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type SizeCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    Tool?: ToolCreateNestedManyWithoutSizeInput
  }

  export type SizeUncheckedCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    Tool?: ToolUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    Tool?: ToolUpdateManyWithoutSizeNestedInput
  }

  export type SizeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    Tool?: ToolUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type SizeCreateManyInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type SizeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    Tool?: ToolCreateNestedManyWithoutCapacityInput
  }

  export type CapacityUncheckedCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    Tool?: ToolUncheckedCreateNestedManyWithoutCapacityInput
  }

  export type CapacityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    Tool?: ToolUpdateManyWithoutCapacityNestedInput
  }

  export type CapacityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    Tool?: ToolUncheckedUpdateManyWithoutCapacityNestedInput
  }

  export type CapacityCreateManyInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type CapacityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type ToolCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Brand?: BrandCreateNestedOneWithoutToolInput
    Size?: SizeCreateNestedOneWithoutToolInput
    Capacity?: CapacityCreateNestedOneWithoutToolInput
    Professions?: ProfessionCreateNestedManyWithoutToolsInput
    OrderItems?: OrderItemsCreateNestedManyWithoutToolInput
    BacketItems?: BacketItemsCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    brand_id?: string | null
    size_id?: string | null
    capacity_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutToolInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Brand?: BrandUpdateOneWithoutToolNestedInput
    Size?: SizeUpdateOneWithoutToolNestedInput
    Capacity?: CapacityUpdateOneWithoutToolNestedInput
    Professions?: ProfessionUpdateManyWithoutToolsNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutToolNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brand_id?: NullableStringFieldUpdateOperationsInput | string | null
    size_id?: NullableStringFieldUpdateOperationsInput | string | null
    capacity_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutToolNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolCreateManyInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    brand_id?: string | null
    size_id?: string | null
    capacity_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brand_id?: NullableStringFieldUpdateOperationsInput | string | null
    size_id?: NullableStringFieldUpdateOperationsInput | string | null
    capacity_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    MasterSkills?: MasterSkillsCreateNestedManyWithoutLevelInput
    LevelsProfessions?: LevelsProfessionsCreateNestedManyWithoutLevelInput
    OrderItems?: OrderItemsCreateNestedManyWithoutLevelInput
    BacketItems?: BacketItemsCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutLevelInput
    LevelsProfessions?: LevelsProfessionsUncheckedCreateNestedManyWithoutLevelInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutLevelInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    MasterSkills?: MasterSkillsUpdateManyWithoutLevelNestedInput
    LevelsProfessions?: LevelsProfessionsUpdateManyWithoutLevelNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutLevelNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutLevelNestedInput
    LevelsProfessions?: LevelsProfessionsUncheckedUpdateManyWithoutLevelNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutLevelNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type LevelCreateManyInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type LevelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type LevelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    Tools?: ToolCreateNestedManyWithoutProfessionsInput
    MasterSkills?: MasterSkillsCreateNestedManyWithoutProfessionInput
    LevelsProfessions?: LevelsProfessionsCreateNestedManyWithoutProfessionInput
    OrderItems?: OrderItemsCreateNestedManyWithoutProfessionInput
    BacketItems?: BacketItemsCreateNestedManyWithoutPofessionInput
  }

  export type ProfessionUncheckedCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    Tools?: ToolUncheckedCreateNestedManyWithoutProfessionsInput
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutProfessionInput
    LevelsProfessions?: LevelsProfessionsUncheckedCreateNestedManyWithoutProfessionInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutProfessionInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutPofessionInput
  }

  export type ProfessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Tools?: ToolUpdateManyWithoutProfessionsNestedInput
    MasterSkills?: MasterSkillsUpdateManyWithoutProfessionNestedInput
    LevelsProfessions?: LevelsProfessionsUpdateManyWithoutProfessionNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutProfessionNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutPofessionNestedInput
  }

  export type ProfessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Tools?: ToolUncheckedUpdateManyWithoutProfessionsNestedInput
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutProfessionNestedInput
    LevelsProfessions?: LevelsProfessionsUncheckedUpdateManyWithoutProfessionNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutProfessionNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutPofessionNestedInput
  }

  export type ProfessionCreateManyInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
  }

  export type ProfessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LevelsProfessionsCreateInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    Profession: ProfessionCreateNestedOneWithoutLevelsProfessionsInput
    Level?: LevelCreateNestedOneWithoutLevelsProfessionsInput
  }

  export type LevelsProfessionsUncheckedCreateInput = {
    id?: string
    profession_id: string
    level_id?: string | null
    min_work_hours: number
    price_hourly: number
    price_daily: number
  }

  export type LevelsProfessionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    Profession?: ProfessionUpdateOneRequiredWithoutLevelsProfessionsNestedInput
    Level?: LevelUpdateOneWithoutLevelsProfessionsNestedInput
  }

  export type LevelsProfessionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profession_id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
  }

  export type LevelsProfessionsCreateManyInput = {
    id?: string
    profession_id: string
    level_id?: string | null
    min_work_hours: number
    price_hourly: number
    price_daily: number
  }

  export type LevelsProfessionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
  }

  export type LevelsProfessionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profession_id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
  }

  export type MasterCreateInput = {
    id?: string
    full_name: string
    phone: string
    isActive: boolean
    year: Date | string
    image: string
    passport_image: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterSkills?: MasterSkillsCreateNestedManyWithoutMasterInput
    Orders?: OrderCreateNestedManyWithoutMastersInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateInput = {
    id?: string
    full_name: string
    phone: string
    isActive: boolean
    year: Date | string
    image: string
    passport_image: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutMasterInput
    Orders?: OrderUncheckedCreateNestedManyWithoutMastersInput
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterSkills?: MasterSkillsUpdateManyWithoutMasterNestedInput
    Orders?: OrderUpdateManyWithoutMastersNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutMasterNestedInput
    Orders?: OrderUncheckedUpdateManyWithoutMastersNestedInput
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type MasterCreateManyInput = {
    id?: string
    full_name: string
    phone: string
    isActive: boolean
    year: Date | string
    image: string
    passport_image: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterSkillsCreateInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    Level?: LevelCreateNestedOneWithoutMasterSkillsInput
    Profession?: ProfessionCreateNestedOneWithoutMasterSkillsInput
    Master: MasterCreateNestedOneWithoutMasterSkillsInput
  }

  export type MasterSkillsUncheckedCreateInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    level_id?: string | null
    profession_id?: string | null
    master_id: string
  }

  export type MasterSkillsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    Level?: LevelUpdateOneWithoutMasterSkillsNestedInput
    Profession?: ProfessionUpdateOneWithoutMasterSkillsNestedInput
    Master?: MasterUpdateOneRequiredWithoutMasterSkillsNestedInput
  }

  export type MasterSkillsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    master_id?: StringFieldUpdateOperationsInput | string
  }

  export type MasterSkillsCreateManyInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    level_id?: string | null
    profession_id?: string | null
    master_id: string
  }

  export type MasterSkillsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type MasterSkillsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    master_id?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateInput = {
    id?: string
    total_sum: number
    location: JsonNullValueInput | InputJsonValue
    address: string
    dete: Date | string
    payment_type?: $Enums.PaymentType
    paid?: boolean
    status?: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutOrderInput
    Masters?: MasterCreateNestedManyWithoutOrdersInput
    OrderItems?: OrderItemsCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    user_id: string
    total_sum: number
    location: JsonNullValueInput | InputJsonValue
    address: string
    dete: Date | string
    payment_type?: $Enums.PaymentType
    paid?: boolean
    status?: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Masters?: MasterUncheckedCreateNestedManyWithoutOrdersInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutOrderNestedInput
    Masters?: MasterUpdateManyWithoutOrdersNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Masters?: MasterUncheckedUpdateManyWithoutOrdersNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    user_id: string
    total_sum: number
    location: JsonNullValueInput | InputJsonValue
    address: string
    dete: Date | string
    payment_type?: $Enums.PaymentType
    paid?: boolean
    status?: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemsCreateInput = {
    id?: string
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
    Order: OrderCreateNestedOneWithoutOrderItemsInput
    Tool?: ToolCreateNestedOneWithoutOrderItemsInput
    Profession?: ProfessionCreateNestedOneWithoutOrderItemsInput
    Level?: LevelCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemsUncheckedCreateInput = {
    id?: string
    order_id: string
    tool_id?: string | null
    profession_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
  }

  export type OrderItemsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
    Order?: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
    Tool?: ToolUpdateOneWithoutOrderItemsNestedInput
    Profession?: ProfessionUpdateOneWithoutOrderItemsNestedInput
    Level?: LevelUpdateOneWithoutOrderItemsNestedInput
  }

  export type OrderItemsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_id?: StringFieldUpdateOperationsInput | string
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemsCreateManyInput = {
    id?: string
    order_id: string
    tool_id?: string | null
    profession_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
  }

  export type OrderItemsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_id?: StringFieldUpdateOperationsInput | string
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type BacketItemsCreateInput = {
    id?: string
    count: number
    measure: $Enums.Measure
    time: number
    User: UserCreateNestedOneWithoutBacketItemsInput
    Pofession?: ProfessionCreateNestedOneWithoutBacketItemsInput
    Tool?: ToolCreateNestedOneWithoutBacketItemsInput
    Level?: LevelCreateNestedOneWithoutBacketItemsInput
  }

  export type BacketItemsUncheckedCreateInput = {
    id?: string
    user_id: string
    profession_id?: string | null
    tool_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
  }

  export type BacketItemsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutBacketItemsNestedInput
    Pofession?: ProfessionUpdateOneWithoutBacketItemsNestedInput
    Tool?: ToolUpdateOneWithoutBacketItemsNestedInput
    Level?: LevelUpdateOneWithoutBacketItemsNestedInput
  }

  export type BacketItemsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type BacketItemsCreateManyInput = {
    id?: string
    user_id: string
    profession_id?: string | null
    tool_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
  }

  export type BacketItemsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type BacketItemsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    id?: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterRatings?: MasterRatingsCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterRatings?: MasterRatingsUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterRatingsCreateInput = {
    id?: string
    star: number
    Master: MasterCreateNestedOneWithoutMasterRatingsInput
    Comment: CommentCreateNestedOneWithoutMasterRatingsInput
  }

  export type MasterRatingsUncheckedCreateInput = {
    id?: string
    star: number
    master_id: string
    comment_id: string
  }

  export type MasterRatingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    Master?: MasterUpdateOneRequiredWithoutMasterRatingsNestedInput
    Comment?: CommentUpdateOneRequiredWithoutMasterRatingsNestedInput
  }

  export type MasterRatingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    master_id?: StringFieldUpdateOperationsInput | string
    comment_id?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsCreateManyInput = {
    id?: string
    star: number
    master_id: string
    comment_id: string
  }

  export type MasterRatingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
  }

  export type MasterRatingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    master_id?: StringFieldUpdateOperationsInput | string
    comment_id?: StringFieldUpdateOperationsInput | string
  }

  export type InfoCreateInput = {
    id?: string
    email: string
    links: JsonNullValueInput | InputJsonValue
    phone?: InfoCreatephoneInput | string[]
  }

  export type InfoUncheckedCreateInput = {
    id?: string
    email: string
    links: JsonNullValueInput | InputJsonValue
    phone?: InfoCreatephoneInput | string[]
  }

  export type InfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    links?: JsonNullValueInput | InputJsonValue
    phone?: InfoUpdatephoneInput | string[]
  }

  export type InfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    links?: JsonNullValueInput | InputJsonValue
    phone?: InfoUpdatephoneInput | string[]
  }

  export type InfoCreateManyInput = {
    id?: string
    email: string
    links: JsonNullValueInput | InputJsonValue
    phone?: InfoCreatephoneInput | string[]
  }

  export type InfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    links?: JsonNullValueInput | InputJsonValue
    phone?: InfoUpdatephoneInput | string[]
  }

  export type InfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    links?: JsonNullValueInput | InputJsonValue
    phone?: InfoUpdatephoneInput | string[]
  }

  export type ContactCreateInput = {
    id?: string
    full_name: string
    phone: string
    address: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    full_name: string
    phone: string
    address: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateManyInput = {
    id?: string
    full_name: string
    phone: string
    address: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQCreateInput = {
    id?: string
    question: string
    answer: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FAQUncheckedCreateInput = {
    id?: string
    question: string
    answer: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FAQUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQCreateManyInput = {
    id?: string
    question: string
    answer: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FAQUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShowcaseCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    image: string
    link: string
  }

  export type ShowcaseUncheckedCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    image: string
    link: string
  }

  export type ShowcaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type ShowcaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type ShowcaseCreateManyInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    image: string
    link: string
  }

  export type ShowcaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type ShowcaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
  }

  export type PartnersUncheckedCreateInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
  }

  export type PartnersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersCreateManyInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
  }

  export type PartnersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RegionNullableScalarRelationFilter = {
    is?: RegionWhereInput | null
    isNot?: RegionWhereInput | null
  }

  export type CompanyNullableScalarRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type BacketItemsListRelationFilter = {
    every?: BacketItemsWhereInput
    some?: BacketItemsWhereInput
    none?: BacketItemsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BacketItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    status?: SortOrder
    region_id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    status?: SortOrder
    region_id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    status?: SortOrder
    region_id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    inn?: SortOrder
    mfo?: SortOrder
    rs?: SortOrder
    bank?: SortOrder
    oked?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    inn?: SortOrder
    mfo?: SortOrder
    rs?: SortOrder
    bank?: SortOrder
    oked?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    inn?: SortOrder
    mfo?: SortOrder
    rs?: SortOrder
    bank?: SortOrder
    oked?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ip_address?: SortOrder
    date?: SortOrder
    device?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ip_address?: SortOrder
    date?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ip_address?: SortOrder
    date?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ToolListRelationFilter = {
    every?: ToolWhereInput
    some?: ToolWhereInput
    none?: ToolWhereInput
  }

  export type ToolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type SizeCountOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type SizeMaxOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type SizeMinOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type CapacityCountOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type CapacityMaxOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type CapacityMinOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BrandNullableScalarRelationFilter = {
    is?: BrandWhereInput | null
    isNot?: BrandWhereInput | null
  }

  export type SizeNullableScalarRelationFilter = {
    is?: SizeWhereInput | null
    isNot?: SizeWhereInput | null
  }

  export type CapacityNullableScalarRelationFilter = {
    is?: CapacityWhereInput | null
    isNot?: CapacityWhereInput | null
  }

  export type ProfessionListRelationFilter = {
    every?: ProfessionWhereInput
    some?: ProfessionWhereInput
    none?: ProfessionWhereInput
  }

  export type OrderItemsListRelationFilter = {
    every?: OrderItemsWhereInput
    some?: OrderItemsWhereInput
    none?: OrderItemsWhereInput
  }

  export type ProfessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ToolCountOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    description_uz?: SortOrder
    description_ru?: SortOrder
    description_en?: SortOrder
    price?: SortOrder
    count?: SortOrder
    code?: SortOrder
    brand_id?: SortOrder
    size_id?: SortOrder
    capacity_id?: SortOrder
    isActive?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ToolAvgOrderByAggregateInput = {
    price?: SortOrder
    count?: SortOrder
  }

  export type ToolMaxOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    description_uz?: SortOrder
    description_ru?: SortOrder
    description_en?: SortOrder
    price?: SortOrder
    count?: SortOrder
    code?: SortOrder
    brand_id?: SortOrder
    size_id?: SortOrder
    capacity_id?: SortOrder
    isActive?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ToolMinOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    description_uz?: SortOrder
    description_ru?: SortOrder
    description_en?: SortOrder
    price?: SortOrder
    count?: SortOrder
    code?: SortOrder
    brand_id?: SortOrder
    size_id?: SortOrder
    capacity_id?: SortOrder
    isActive?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ToolSumOrderByAggregateInput = {
    price?: SortOrder
    count?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type MasterSkillsListRelationFilter = {
    every?: MasterSkillsWhereInput
    some?: MasterSkillsWhereInput
    none?: MasterSkillsWhereInput
  }

  export type LevelsProfessionsListRelationFilter = {
    every?: LevelsProfessionsWhereInput
    some?: LevelsProfessionsWhereInput
    none?: LevelsProfessionsWhereInput
  }

  export type MasterSkillsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LevelsProfessionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LevelCountOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type LevelMaxOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type LevelMinOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
  }

  export type ProfessionCountOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ProfessionMaxOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ProfessionMinOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ProfessionScalarRelationFilter = {
    is?: ProfessionWhereInput
    isNot?: ProfessionWhereInput
  }

  export type LevelNullableScalarRelationFilter = {
    is?: LevelWhereInput | null
    isNot?: LevelWhereInput | null
  }

  export type LevelsProfessionsCountOrderByAggregateInput = {
    id?: SortOrder
    profession_id?: SortOrder
    level_id?: SortOrder
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
  }

  export type LevelsProfessionsAvgOrderByAggregateInput = {
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
  }

  export type LevelsProfessionsMaxOrderByAggregateInput = {
    id?: SortOrder
    profession_id?: SortOrder
    level_id?: SortOrder
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
  }

  export type LevelsProfessionsMinOrderByAggregateInput = {
    id?: SortOrder
    profession_id?: SortOrder
    level_id?: SortOrder
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
  }

  export type LevelsProfessionsSumOrderByAggregateInput = {
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
  }

  export type MasterRatingsListRelationFilter = {
    every?: MasterRatingsWhereInput
    some?: MasterRatingsWhereInput
    none?: MasterRatingsWhereInput
  }

  export type MasterRatingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MasterCountOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    year?: SortOrder
    image?: SortOrder
    passport_image?: SortOrder
    about?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterMaxOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    year?: SortOrder
    image?: SortOrder
    passport_image?: SortOrder
    about?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterMinOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    year?: SortOrder
    image?: SortOrder
    passport_image?: SortOrder
    about?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionNullableScalarRelationFilter = {
    is?: ProfessionWhereInput | null
    isNot?: ProfessionWhereInput | null
  }

  export type MasterScalarRelationFilter = {
    is?: MasterWhereInput
    isNot?: MasterWhereInput
  }

  export type MasterSkillsCountOrderByAggregateInput = {
    id?: SortOrder
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
    experience?: SortOrder
    level_id?: SortOrder
    profession_id?: SortOrder
    master_id?: SortOrder
  }

  export type MasterSkillsAvgOrderByAggregateInput = {
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
    experience?: SortOrder
  }

  export type MasterSkillsMaxOrderByAggregateInput = {
    id?: SortOrder
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
    experience?: SortOrder
    level_id?: SortOrder
    profession_id?: SortOrder
    master_id?: SortOrder
  }

  export type MasterSkillsMinOrderByAggregateInput = {
    id?: SortOrder
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
    experience?: SortOrder
    level_id?: SortOrder
    profession_id?: SortOrder
    master_id?: SortOrder
  }

  export type MasterSkillsSumOrderByAggregateInput = {
    min_work_hours?: SortOrder
    price_hourly?: SortOrder
    price_daily?: SortOrder
    experience?: SortOrder
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type EnumStatusOrderFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOrder | EnumStatusOrderFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOrder[] | ListEnumStatusOrderFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOrder[] | ListEnumStatusOrderFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOrderFilter<$PrismaModel> | $Enums.StatusOrder
  }

  export type MasterListRelationFilter = {
    every?: MasterWhereInput
    some?: MasterWhereInput
    none?: MasterWhereInput
  }

  export type MasterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_sum?: SortOrder
    location?: SortOrder
    address?: SortOrder
    dete?: SortOrder
    payment_type?: SortOrder
    paid?: SortOrder
    status?: SortOrder
    with_delivery?: SortOrder
    comment_delivery?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    total_sum?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_sum?: SortOrder
    address?: SortOrder
    dete?: SortOrder
    payment_type?: SortOrder
    paid?: SortOrder
    status?: SortOrder
    with_delivery?: SortOrder
    comment_delivery?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_sum?: SortOrder
    address?: SortOrder
    dete?: SortOrder
    payment_type?: SortOrder
    paid?: SortOrder
    status?: SortOrder
    with_delivery?: SortOrder
    comment_delivery?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    total_sum?: SortOrder
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type EnumStatusOrderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOrder | EnumStatusOrderFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOrder[] | ListEnumStatusOrderFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOrder[] | ListEnumStatusOrderFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOrderWithAggregatesFilter<$PrismaModel> | $Enums.StatusOrder
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusOrderFilter<$PrismaModel>
    _max?: NestedEnumStatusOrderFilter<$PrismaModel>
  }

  export type EnumMeasureFilter<$PrismaModel = never> = {
    equals?: $Enums.Measure | EnumMeasureFieldRefInput<$PrismaModel>
    in?: $Enums.Measure[] | ListEnumMeasureFieldRefInput<$PrismaModel>
    notIn?: $Enums.Measure[] | ListEnumMeasureFieldRefInput<$PrismaModel>
    not?: NestedEnumMeasureFilter<$PrismaModel> | $Enums.Measure
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type ToolNullableScalarRelationFilter = {
    is?: ToolWhereInput | null
    isNot?: ToolWhereInput | null
  }

  export type OrderItemsCountOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    tool_id?: SortOrder
    profession_id?: SortOrder
    level_id?: SortOrder
    count?: SortOrder
    measure?: SortOrder
    time?: SortOrder
    total_sum?: SortOrder
  }

  export type OrderItemsAvgOrderByAggregateInput = {
    count?: SortOrder
    time?: SortOrder
    total_sum?: SortOrder
  }

  export type OrderItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    tool_id?: SortOrder
    profession_id?: SortOrder
    level_id?: SortOrder
    count?: SortOrder
    measure?: SortOrder
    time?: SortOrder
    total_sum?: SortOrder
  }

  export type OrderItemsMinOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    tool_id?: SortOrder
    profession_id?: SortOrder
    level_id?: SortOrder
    count?: SortOrder
    measure?: SortOrder
    time?: SortOrder
    total_sum?: SortOrder
  }

  export type OrderItemsSumOrderByAggregateInput = {
    count?: SortOrder
    time?: SortOrder
    total_sum?: SortOrder
  }

  export type EnumMeasureWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Measure | EnumMeasureFieldRefInput<$PrismaModel>
    in?: $Enums.Measure[] | ListEnumMeasureFieldRefInput<$PrismaModel>
    notIn?: $Enums.Measure[] | ListEnumMeasureFieldRefInput<$PrismaModel>
    not?: NestedEnumMeasureWithAggregatesFilter<$PrismaModel> | $Enums.Measure
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMeasureFilter<$PrismaModel>
    _max?: NestedEnumMeasureFilter<$PrismaModel>
  }

  export type BacketItemsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    profession_id?: SortOrder
    tool_id?: SortOrder
    level_id?: SortOrder
    count?: SortOrder
    measure?: SortOrder
    time?: SortOrder
  }

  export type BacketItemsAvgOrderByAggregateInput = {
    count?: SortOrder
    time?: SortOrder
  }

  export type BacketItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    profession_id?: SortOrder
    tool_id?: SortOrder
    level_id?: SortOrder
    count?: SortOrder
    measure?: SortOrder
    time?: SortOrder
  }

  export type BacketItemsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    profession_id?: SortOrder
    tool_id?: SortOrder
    level_id?: SortOrder
    count?: SortOrder
    measure?: SortOrder
    time?: SortOrder
  }

  export type BacketItemsSumOrderByAggregateInput = {
    count?: SortOrder
    time?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentScalarRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type MasterRatingsCountOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    master_id?: SortOrder
    comment_id?: SortOrder
  }

  export type MasterRatingsAvgOrderByAggregateInput = {
    star?: SortOrder
  }

  export type MasterRatingsMaxOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    master_id?: SortOrder
    comment_id?: SortOrder
  }

  export type MasterRatingsMinOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    master_id?: SortOrder
    comment_id?: SortOrder
  }

  export type MasterRatingsSumOrderByAggregateInput = {
    star?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type InfoCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    links?: SortOrder
    phone?: SortOrder
  }

  export type InfoMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type InfoMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShowcaseCountOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    description_uz?: SortOrder
    description_ru?: SortOrder
    description_en?: SortOrder
    image?: SortOrder
    link?: SortOrder
  }

  export type ShowcaseMaxOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    description_uz?: SortOrder
    description_ru?: SortOrder
    description_en?: SortOrder
    image?: SortOrder
    link?: SortOrder
  }

  export type ShowcaseMinOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    description_uz?: SortOrder
    description_ru?: SortOrder
    description_en?: SortOrder
    image?: SortOrder
    link?: SortOrder
  }

  export type PartnersCountOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    image?: SortOrder
  }

  export type PartnersMaxOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    image?: SortOrder
  }

  export type PartnersMinOrderByAggregateInput = {
    id?: SortOrder
    name_uz?: SortOrder
    name_ru?: SortOrder
    name_en?: SortOrder
    image?: SortOrder
  }

  export type UserCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RegionCreateNestedOneWithoutUsersInput = {
    create?: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUsersInput
    connect?: RegionWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutUserInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    connect?: CompanyWhereUniqueInput
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type BacketItemsCreateNestedManyWithoutUserInput = {
    create?: XOR<BacketItemsCreateWithoutUserInput, BacketItemsUncheckedCreateWithoutUserInput> | BacketItemsCreateWithoutUserInput[] | BacketItemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutUserInput | BacketItemsCreateOrConnectWithoutUserInput[]
    createMany?: BacketItemsCreateManyUserInputEnvelope
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    connect?: CompanyWhereUniqueInput
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type BacketItemsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BacketItemsCreateWithoutUserInput, BacketItemsUncheckedCreateWithoutUserInput> | BacketItemsCreateWithoutUserInput[] | BacketItemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutUserInput | BacketItemsCreateOrConnectWithoutUserInput[]
    createMany?: BacketItemsCreateManyUserInputEnvelope
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RegionUpdateOneWithoutUsersNestedInput = {
    create?: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUsersInput
    upsert?: RegionUpsertWithoutUsersInput
    disconnect?: RegionWhereInput | boolean
    delete?: RegionWhereInput | boolean
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutUsersInput, RegionUpdateWithoutUsersInput>, RegionUncheckedUpdateWithoutUsersInput>
  }

  export type CompanyUpdateOneWithoutUserNestedInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    upsert?: CompanyUpsertWithoutUserInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUserInput, CompanyUpdateWithoutUserInput>, CompanyUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type BacketItemsUpdateManyWithoutUserNestedInput = {
    create?: XOR<BacketItemsCreateWithoutUserInput, BacketItemsUncheckedCreateWithoutUserInput> | BacketItemsCreateWithoutUserInput[] | BacketItemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutUserInput | BacketItemsCreateOrConnectWithoutUserInput[]
    upsert?: BacketItemsUpsertWithWhereUniqueWithoutUserInput | BacketItemsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BacketItemsCreateManyUserInputEnvelope
    set?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    disconnect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    delete?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    update?: BacketItemsUpdateWithWhereUniqueWithoutUserInput | BacketItemsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BacketItemsUpdateManyWithWhereWithoutUserInput | BacketItemsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BacketItemsScalarWhereInput | BacketItemsScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CompanyUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    upsert?: CompanyUpsertWithoutUserInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUserInput, CompanyUpdateWithoutUserInput>, CompanyUncheckedUpdateWithoutUserInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type BacketItemsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BacketItemsCreateWithoutUserInput, BacketItemsUncheckedCreateWithoutUserInput> | BacketItemsCreateWithoutUserInput[] | BacketItemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutUserInput | BacketItemsCreateOrConnectWithoutUserInput[]
    upsert?: BacketItemsUpsertWithWhereUniqueWithoutUserInput | BacketItemsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BacketItemsCreateManyUserInputEnvelope
    set?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    disconnect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    delete?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    update?: BacketItemsUpdateWithWhereUniqueWithoutUserInput | BacketItemsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BacketItemsUpdateManyWithWhereWithoutUserInput | BacketItemsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BacketItemsScalarWhereInput | BacketItemsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput
    upsert?: UserUpsertWithoutCompanyInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompanyInput, UserUpdateWithoutCompanyInput>, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserCreateNestedOneWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionNestedInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    upsert?: UserUpsertWithoutSessionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionInput, UserUpdateWithoutSessionInput>, UserUncheckedUpdateWithoutSessionInput>
  }

  export type ToolCreateNestedManyWithoutBrandInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutBrandInput | ToolUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutBrandInput | ToolUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutBrandInput | ToolUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutBrandInput | ToolUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutBrandInput | ToolUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutBrandInput | ToolUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolCreateNestedManyWithoutSizeInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUncheckedCreateNestedManyWithoutSizeInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUpdateManyWithoutSizeNestedInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutSizeInput | ToolUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutSizeInput | ToolUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutSizeInput | ToolUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolUncheckedUpdateManyWithoutSizeNestedInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutSizeInput | ToolUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutSizeInput | ToolUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutSizeInput | ToolUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolCreateNestedManyWithoutCapacityInput = {
    create?: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput> | ToolCreateWithoutCapacityInput[] | ToolUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutCapacityInput | ToolCreateOrConnectWithoutCapacityInput[]
    createMany?: ToolCreateManyCapacityInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUncheckedCreateNestedManyWithoutCapacityInput = {
    create?: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput> | ToolCreateWithoutCapacityInput[] | ToolUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutCapacityInput | ToolCreateOrConnectWithoutCapacityInput[]
    createMany?: ToolCreateManyCapacityInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUpdateManyWithoutCapacityNestedInput = {
    create?: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput> | ToolCreateWithoutCapacityInput[] | ToolUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutCapacityInput | ToolCreateOrConnectWithoutCapacityInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutCapacityInput | ToolUpsertWithWhereUniqueWithoutCapacityInput[]
    createMany?: ToolCreateManyCapacityInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutCapacityInput | ToolUpdateWithWhereUniqueWithoutCapacityInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutCapacityInput | ToolUpdateManyWithWhereWithoutCapacityInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolUncheckedUpdateManyWithoutCapacityNestedInput = {
    create?: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput> | ToolCreateWithoutCapacityInput[] | ToolUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutCapacityInput | ToolCreateOrConnectWithoutCapacityInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutCapacityInput | ToolUpsertWithWhereUniqueWithoutCapacityInput[]
    createMany?: ToolCreateManyCapacityInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutCapacityInput | ToolUpdateWithWhereUniqueWithoutCapacityInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutCapacityInput | ToolUpdateManyWithWhereWithoutCapacityInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type BrandCreateNestedOneWithoutToolInput = {
    create?: XOR<BrandCreateWithoutToolInput, BrandUncheckedCreateWithoutToolInput>
    connectOrCreate?: BrandCreateOrConnectWithoutToolInput
    connect?: BrandWhereUniqueInput
  }

  export type SizeCreateNestedOneWithoutToolInput = {
    create?: XOR<SizeCreateWithoutToolInput, SizeUncheckedCreateWithoutToolInput>
    connectOrCreate?: SizeCreateOrConnectWithoutToolInput
    connect?: SizeWhereUniqueInput
  }

  export type CapacityCreateNestedOneWithoutToolInput = {
    create?: XOR<CapacityCreateWithoutToolInput, CapacityUncheckedCreateWithoutToolInput>
    connectOrCreate?: CapacityCreateOrConnectWithoutToolInput
    connect?: CapacityWhereUniqueInput
  }

  export type ProfessionCreateNestedManyWithoutToolsInput = {
    create?: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput> | ProfessionCreateWithoutToolsInput[] | ProfessionUncheckedCreateWithoutToolsInput[]
    connectOrCreate?: ProfessionCreateOrConnectWithoutToolsInput | ProfessionCreateOrConnectWithoutToolsInput[]
    connect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
  }

  export type OrderItemsCreateNestedManyWithoutToolInput = {
    create?: XOR<OrderItemsCreateWithoutToolInput, OrderItemsUncheckedCreateWithoutToolInput> | OrderItemsCreateWithoutToolInput[] | OrderItemsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutToolInput | OrderItemsCreateOrConnectWithoutToolInput[]
    createMany?: OrderItemsCreateManyToolInputEnvelope
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
  }

  export type BacketItemsCreateNestedManyWithoutToolInput = {
    create?: XOR<BacketItemsCreateWithoutToolInput, BacketItemsUncheckedCreateWithoutToolInput> | BacketItemsCreateWithoutToolInput[] | BacketItemsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutToolInput | BacketItemsCreateOrConnectWithoutToolInput[]
    createMany?: BacketItemsCreateManyToolInputEnvelope
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
  }

  export type ProfessionUncheckedCreateNestedManyWithoutToolsInput = {
    create?: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput> | ProfessionCreateWithoutToolsInput[] | ProfessionUncheckedCreateWithoutToolsInput[]
    connectOrCreate?: ProfessionCreateOrConnectWithoutToolsInput | ProfessionCreateOrConnectWithoutToolsInput[]
    connect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
  }

  export type OrderItemsUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<OrderItemsCreateWithoutToolInput, OrderItemsUncheckedCreateWithoutToolInput> | OrderItemsCreateWithoutToolInput[] | OrderItemsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutToolInput | OrderItemsCreateOrConnectWithoutToolInput[]
    createMany?: OrderItemsCreateManyToolInputEnvelope
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
  }

  export type BacketItemsUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<BacketItemsCreateWithoutToolInput, BacketItemsUncheckedCreateWithoutToolInput> | BacketItemsCreateWithoutToolInput[] | BacketItemsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutToolInput | BacketItemsCreateOrConnectWithoutToolInput[]
    createMany?: BacketItemsCreateManyToolInputEnvelope
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BrandUpdateOneWithoutToolNestedInput = {
    create?: XOR<BrandCreateWithoutToolInput, BrandUncheckedCreateWithoutToolInput>
    connectOrCreate?: BrandCreateOrConnectWithoutToolInput
    upsert?: BrandUpsertWithoutToolInput
    disconnect?: BrandWhereInput | boolean
    delete?: BrandWhereInput | boolean
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutToolInput, BrandUpdateWithoutToolInput>, BrandUncheckedUpdateWithoutToolInput>
  }

  export type SizeUpdateOneWithoutToolNestedInput = {
    create?: XOR<SizeCreateWithoutToolInput, SizeUncheckedCreateWithoutToolInput>
    connectOrCreate?: SizeCreateOrConnectWithoutToolInput
    upsert?: SizeUpsertWithoutToolInput
    disconnect?: SizeWhereInput | boolean
    delete?: SizeWhereInput | boolean
    connect?: SizeWhereUniqueInput
    update?: XOR<XOR<SizeUpdateToOneWithWhereWithoutToolInput, SizeUpdateWithoutToolInput>, SizeUncheckedUpdateWithoutToolInput>
  }

  export type CapacityUpdateOneWithoutToolNestedInput = {
    create?: XOR<CapacityCreateWithoutToolInput, CapacityUncheckedCreateWithoutToolInput>
    connectOrCreate?: CapacityCreateOrConnectWithoutToolInput
    upsert?: CapacityUpsertWithoutToolInput
    disconnect?: CapacityWhereInput | boolean
    delete?: CapacityWhereInput | boolean
    connect?: CapacityWhereUniqueInput
    update?: XOR<XOR<CapacityUpdateToOneWithWhereWithoutToolInput, CapacityUpdateWithoutToolInput>, CapacityUncheckedUpdateWithoutToolInput>
  }

  export type ProfessionUpdateManyWithoutToolsNestedInput = {
    create?: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput> | ProfessionCreateWithoutToolsInput[] | ProfessionUncheckedCreateWithoutToolsInput[]
    connectOrCreate?: ProfessionCreateOrConnectWithoutToolsInput | ProfessionCreateOrConnectWithoutToolsInput[]
    upsert?: ProfessionUpsertWithWhereUniqueWithoutToolsInput | ProfessionUpsertWithWhereUniqueWithoutToolsInput[]
    set?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    disconnect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    delete?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    connect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    update?: ProfessionUpdateWithWhereUniqueWithoutToolsInput | ProfessionUpdateWithWhereUniqueWithoutToolsInput[]
    updateMany?: ProfessionUpdateManyWithWhereWithoutToolsInput | ProfessionUpdateManyWithWhereWithoutToolsInput[]
    deleteMany?: ProfessionScalarWhereInput | ProfessionScalarWhereInput[]
  }

  export type OrderItemsUpdateManyWithoutToolNestedInput = {
    create?: XOR<OrderItemsCreateWithoutToolInput, OrderItemsUncheckedCreateWithoutToolInput> | OrderItemsCreateWithoutToolInput[] | OrderItemsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutToolInput | OrderItemsCreateOrConnectWithoutToolInput[]
    upsert?: OrderItemsUpsertWithWhereUniqueWithoutToolInput | OrderItemsUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: OrderItemsCreateManyToolInputEnvelope
    set?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    disconnect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    delete?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    update?: OrderItemsUpdateWithWhereUniqueWithoutToolInput | OrderItemsUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: OrderItemsUpdateManyWithWhereWithoutToolInput | OrderItemsUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: OrderItemsScalarWhereInput | OrderItemsScalarWhereInput[]
  }

  export type BacketItemsUpdateManyWithoutToolNestedInput = {
    create?: XOR<BacketItemsCreateWithoutToolInput, BacketItemsUncheckedCreateWithoutToolInput> | BacketItemsCreateWithoutToolInput[] | BacketItemsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutToolInput | BacketItemsCreateOrConnectWithoutToolInput[]
    upsert?: BacketItemsUpsertWithWhereUniqueWithoutToolInput | BacketItemsUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: BacketItemsCreateManyToolInputEnvelope
    set?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    disconnect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    delete?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    update?: BacketItemsUpdateWithWhereUniqueWithoutToolInput | BacketItemsUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: BacketItemsUpdateManyWithWhereWithoutToolInput | BacketItemsUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: BacketItemsScalarWhereInput | BacketItemsScalarWhereInput[]
  }

  export type ProfessionUncheckedUpdateManyWithoutToolsNestedInput = {
    create?: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput> | ProfessionCreateWithoutToolsInput[] | ProfessionUncheckedCreateWithoutToolsInput[]
    connectOrCreate?: ProfessionCreateOrConnectWithoutToolsInput | ProfessionCreateOrConnectWithoutToolsInput[]
    upsert?: ProfessionUpsertWithWhereUniqueWithoutToolsInput | ProfessionUpsertWithWhereUniqueWithoutToolsInput[]
    set?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    disconnect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    delete?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    connect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    update?: ProfessionUpdateWithWhereUniqueWithoutToolsInput | ProfessionUpdateWithWhereUniqueWithoutToolsInput[]
    updateMany?: ProfessionUpdateManyWithWhereWithoutToolsInput | ProfessionUpdateManyWithWhereWithoutToolsInput[]
    deleteMany?: ProfessionScalarWhereInput | ProfessionScalarWhereInput[]
  }

  export type OrderItemsUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<OrderItemsCreateWithoutToolInput, OrderItemsUncheckedCreateWithoutToolInput> | OrderItemsCreateWithoutToolInput[] | OrderItemsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutToolInput | OrderItemsCreateOrConnectWithoutToolInput[]
    upsert?: OrderItemsUpsertWithWhereUniqueWithoutToolInput | OrderItemsUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: OrderItemsCreateManyToolInputEnvelope
    set?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    disconnect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    delete?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    update?: OrderItemsUpdateWithWhereUniqueWithoutToolInput | OrderItemsUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: OrderItemsUpdateManyWithWhereWithoutToolInput | OrderItemsUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: OrderItemsScalarWhereInput | OrderItemsScalarWhereInput[]
  }

  export type BacketItemsUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<BacketItemsCreateWithoutToolInput, BacketItemsUncheckedCreateWithoutToolInput> | BacketItemsCreateWithoutToolInput[] | BacketItemsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutToolInput | BacketItemsCreateOrConnectWithoutToolInput[]
    upsert?: BacketItemsUpsertWithWhereUniqueWithoutToolInput | BacketItemsUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: BacketItemsCreateManyToolInputEnvelope
    set?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    disconnect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    delete?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    update?: BacketItemsUpdateWithWhereUniqueWithoutToolInput | BacketItemsUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: BacketItemsUpdateManyWithWhereWithoutToolInput | BacketItemsUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: BacketItemsScalarWhereInput | BacketItemsScalarWhereInput[]
  }

  export type MasterSkillsCreateNestedManyWithoutLevelInput = {
    create?: XOR<MasterSkillsCreateWithoutLevelInput, MasterSkillsUncheckedCreateWithoutLevelInput> | MasterSkillsCreateWithoutLevelInput[] | MasterSkillsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutLevelInput | MasterSkillsCreateOrConnectWithoutLevelInput[]
    createMany?: MasterSkillsCreateManyLevelInputEnvelope
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
  }

  export type LevelsProfessionsCreateNestedManyWithoutLevelInput = {
    create?: XOR<LevelsProfessionsCreateWithoutLevelInput, LevelsProfessionsUncheckedCreateWithoutLevelInput> | LevelsProfessionsCreateWithoutLevelInput[] | LevelsProfessionsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: LevelsProfessionsCreateOrConnectWithoutLevelInput | LevelsProfessionsCreateOrConnectWithoutLevelInput[]
    createMany?: LevelsProfessionsCreateManyLevelInputEnvelope
    connect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
  }

  export type OrderItemsCreateNestedManyWithoutLevelInput = {
    create?: XOR<OrderItemsCreateWithoutLevelInput, OrderItemsUncheckedCreateWithoutLevelInput> | OrderItemsCreateWithoutLevelInput[] | OrderItemsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutLevelInput | OrderItemsCreateOrConnectWithoutLevelInput[]
    createMany?: OrderItemsCreateManyLevelInputEnvelope
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
  }

  export type BacketItemsCreateNestedManyWithoutLevelInput = {
    create?: XOR<BacketItemsCreateWithoutLevelInput, BacketItemsUncheckedCreateWithoutLevelInput> | BacketItemsCreateWithoutLevelInput[] | BacketItemsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutLevelInput | BacketItemsCreateOrConnectWithoutLevelInput[]
    createMany?: BacketItemsCreateManyLevelInputEnvelope
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
  }

  export type MasterSkillsUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<MasterSkillsCreateWithoutLevelInput, MasterSkillsUncheckedCreateWithoutLevelInput> | MasterSkillsCreateWithoutLevelInput[] | MasterSkillsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutLevelInput | MasterSkillsCreateOrConnectWithoutLevelInput[]
    createMany?: MasterSkillsCreateManyLevelInputEnvelope
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
  }

  export type LevelsProfessionsUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<LevelsProfessionsCreateWithoutLevelInput, LevelsProfessionsUncheckedCreateWithoutLevelInput> | LevelsProfessionsCreateWithoutLevelInput[] | LevelsProfessionsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: LevelsProfessionsCreateOrConnectWithoutLevelInput | LevelsProfessionsCreateOrConnectWithoutLevelInput[]
    createMany?: LevelsProfessionsCreateManyLevelInputEnvelope
    connect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
  }

  export type OrderItemsUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<OrderItemsCreateWithoutLevelInput, OrderItemsUncheckedCreateWithoutLevelInput> | OrderItemsCreateWithoutLevelInput[] | OrderItemsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutLevelInput | OrderItemsCreateOrConnectWithoutLevelInput[]
    createMany?: OrderItemsCreateManyLevelInputEnvelope
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
  }

  export type BacketItemsUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<BacketItemsCreateWithoutLevelInput, BacketItemsUncheckedCreateWithoutLevelInput> | BacketItemsCreateWithoutLevelInput[] | BacketItemsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutLevelInput | BacketItemsCreateOrConnectWithoutLevelInput[]
    createMany?: BacketItemsCreateManyLevelInputEnvelope
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
  }

  export type MasterSkillsUpdateManyWithoutLevelNestedInput = {
    create?: XOR<MasterSkillsCreateWithoutLevelInput, MasterSkillsUncheckedCreateWithoutLevelInput> | MasterSkillsCreateWithoutLevelInput[] | MasterSkillsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutLevelInput | MasterSkillsCreateOrConnectWithoutLevelInput[]
    upsert?: MasterSkillsUpsertWithWhereUniqueWithoutLevelInput | MasterSkillsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: MasterSkillsCreateManyLevelInputEnvelope
    set?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    disconnect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    delete?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    update?: MasterSkillsUpdateWithWhereUniqueWithoutLevelInput | MasterSkillsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: MasterSkillsUpdateManyWithWhereWithoutLevelInput | MasterSkillsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: MasterSkillsScalarWhereInput | MasterSkillsScalarWhereInput[]
  }

  export type LevelsProfessionsUpdateManyWithoutLevelNestedInput = {
    create?: XOR<LevelsProfessionsCreateWithoutLevelInput, LevelsProfessionsUncheckedCreateWithoutLevelInput> | LevelsProfessionsCreateWithoutLevelInput[] | LevelsProfessionsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: LevelsProfessionsCreateOrConnectWithoutLevelInput | LevelsProfessionsCreateOrConnectWithoutLevelInput[]
    upsert?: LevelsProfessionsUpsertWithWhereUniqueWithoutLevelInput | LevelsProfessionsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: LevelsProfessionsCreateManyLevelInputEnvelope
    set?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    disconnect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    delete?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    connect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    update?: LevelsProfessionsUpdateWithWhereUniqueWithoutLevelInput | LevelsProfessionsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: LevelsProfessionsUpdateManyWithWhereWithoutLevelInput | LevelsProfessionsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: LevelsProfessionsScalarWhereInput | LevelsProfessionsScalarWhereInput[]
  }

  export type OrderItemsUpdateManyWithoutLevelNestedInput = {
    create?: XOR<OrderItemsCreateWithoutLevelInput, OrderItemsUncheckedCreateWithoutLevelInput> | OrderItemsCreateWithoutLevelInput[] | OrderItemsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutLevelInput | OrderItemsCreateOrConnectWithoutLevelInput[]
    upsert?: OrderItemsUpsertWithWhereUniqueWithoutLevelInput | OrderItemsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: OrderItemsCreateManyLevelInputEnvelope
    set?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    disconnect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    delete?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    update?: OrderItemsUpdateWithWhereUniqueWithoutLevelInput | OrderItemsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: OrderItemsUpdateManyWithWhereWithoutLevelInput | OrderItemsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: OrderItemsScalarWhereInput | OrderItemsScalarWhereInput[]
  }

  export type BacketItemsUpdateManyWithoutLevelNestedInput = {
    create?: XOR<BacketItemsCreateWithoutLevelInput, BacketItemsUncheckedCreateWithoutLevelInput> | BacketItemsCreateWithoutLevelInput[] | BacketItemsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutLevelInput | BacketItemsCreateOrConnectWithoutLevelInput[]
    upsert?: BacketItemsUpsertWithWhereUniqueWithoutLevelInput | BacketItemsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: BacketItemsCreateManyLevelInputEnvelope
    set?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    disconnect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    delete?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    update?: BacketItemsUpdateWithWhereUniqueWithoutLevelInput | BacketItemsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: BacketItemsUpdateManyWithWhereWithoutLevelInput | BacketItemsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: BacketItemsScalarWhereInput | BacketItemsScalarWhereInput[]
  }

  export type MasterSkillsUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<MasterSkillsCreateWithoutLevelInput, MasterSkillsUncheckedCreateWithoutLevelInput> | MasterSkillsCreateWithoutLevelInput[] | MasterSkillsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutLevelInput | MasterSkillsCreateOrConnectWithoutLevelInput[]
    upsert?: MasterSkillsUpsertWithWhereUniqueWithoutLevelInput | MasterSkillsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: MasterSkillsCreateManyLevelInputEnvelope
    set?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    disconnect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    delete?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    update?: MasterSkillsUpdateWithWhereUniqueWithoutLevelInput | MasterSkillsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: MasterSkillsUpdateManyWithWhereWithoutLevelInput | MasterSkillsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: MasterSkillsScalarWhereInput | MasterSkillsScalarWhereInput[]
  }

  export type LevelsProfessionsUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<LevelsProfessionsCreateWithoutLevelInput, LevelsProfessionsUncheckedCreateWithoutLevelInput> | LevelsProfessionsCreateWithoutLevelInput[] | LevelsProfessionsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: LevelsProfessionsCreateOrConnectWithoutLevelInput | LevelsProfessionsCreateOrConnectWithoutLevelInput[]
    upsert?: LevelsProfessionsUpsertWithWhereUniqueWithoutLevelInput | LevelsProfessionsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: LevelsProfessionsCreateManyLevelInputEnvelope
    set?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    disconnect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    delete?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    connect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    update?: LevelsProfessionsUpdateWithWhereUniqueWithoutLevelInput | LevelsProfessionsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: LevelsProfessionsUpdateManyWithWhereWithoutLevelInput | LevelsProfessionsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: LevelsProfessionsScalarWhereInput | LevelsProfessionsScalarWhereInput[]
  }

  export type OrderItemsUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<OrderItemsCreateWithoutLevelInput, OrderItemsUncheckedCreateWithoutLevelInput> | OrderItemsCreateWithoutLevelInput[] | OrderItemsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutLevelInput | OrderItemsCreateOrConnectWithoutLevelInput[]
    upsert?: OrderItemsUpsertWithWhereUniqueWithoutLevelInput | OrderItemsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: OrderItemsCreateManyLevelInputEnvelope
    set?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    disconnect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    delete?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    update?: OrderItemsUpdateWithWhereUniqueWithoutLevelInput | OrderItemsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: OrderItemsUpdateManyWithWhereWithoutLevelInput | OrderItemsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: OrderItemsScalarWhereInput | OrderItemsScalarWhereInput[]
  }

  export type BacketItemsUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<BacketItemsCreateWithoutLevelInput, BacketItemsUncheckedCreateWithoutLevelInput> | BacketItemsCreateWithoutLevelInput[] | BacketItemsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutLevelInput | BacketItemsCreateOrConnectWithoutLevelInput[]
    upsert?: BacketItemsUpsertWithWhereUniqueWithoutLevelInput | BacketItemsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: BacketItemsCreateManyLevelInputEnvelope
    set?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    disconnect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    delete?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    update?: BacketItemsUpdateWithWhereUniqueWithoutLevelInput | BacketItemsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: BacketItemsUpdateManyWithWhereWithoutLevelInput | BacketItemsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: BacketItemsScalarWhereInput | BacketItemsScalarWhereInput[]
  }

  export type ToolCreateNestedManyWithoutProfessionsInput = {
    create?: XOR<ToolCreateWithoutProfessionsInput, ToolUncheckedCreateWithoutProfessionsInput> | ToolCreateWithoutProfessionsInput[] | ToolUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutProfessionsInput | ToolCreateOrConnectWithoutProfessionsInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type MasterSkillsCreateNestedManyWithoutProfessionInput = {
    create?: XOR<MasterSkillsCreateWithoutProfessionInput, MasterSkillsUncheckedCreateWithoutProfessionInput> | MasterSkillsCreateWithoutProfessionInput[] | MasterSkillsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutProfessionInput | MasterSkillsCreateOrConnectWithoutProfessionInput[]
    createMany?: MasterSkillsCreateManyProfessionInputEnvelope
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
  }

  export type LevelsProfessionsCreateNestedManyWithoutProfessionInput = {
    create?: XOR<LevelsProfessionsCreateWithoutProfessionInput, LevelsProfessionsUncheckedCreateWithoutProfessionInput> | LevelsProfessionsCreateWithoutProfessionInput[] | LevelsProfessionsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: LevelsProfessionsCreateOrConnectWithoutProfessionInput | LevelsProfessionsCreateOrConnectWithoutProfessionInput[]
    createMany?: LevelsProfessionsCreateManyProfessionInputEnvelope
    connect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
  }

  export type OrderItemsCreateNestedManyWithoutProfessionInput = {
    create?: XOR<OrderItemsCreateWithoutProfessionInput, OrderItemsUncheckedCreateWithoutProfessionInput> | OrderItemsCreateWithoutProfessionInput[] | OrderItemsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutProfessionInput | OrderItemsCreateOrConnectWithoutProfessionInput[]
    createMany?: OrderItemsCreateManyProfessionInputEnvelope
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
  }

  export type BacketItemsCreateNestedManyWithoutPofessionInput = {
    create?: XOR<BacketItemsCreateWithoutPofessionInput, BacketItemsUncheckedCreateWithoutPofessionInput> | BacketItemsCreateWithoutPofessionInput[] | BacketItemsUncheckedCreateWithoutPofessionInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutPofessionInput | BacketItemsCreateOrConnectWithoutPofessionInput[]
    createMany?: BacketItemsCreateManyPofessionInputEnvelope
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
  }

  export type ToolUncheckedCreateNestedManyWithoutProfessionsInput = {
    create?: XOR<ToolCreateWithoutProfessionsInput, ToolUncheckedCreateWithoutProfessionsInput> | ToolCreateWithoutProfessionsInput[] | ToolUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutProfessionsInput | ToolCreateOrConnectWithoutProfessionsInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type MasterSkillsUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<MasterSkillsCreateWithoutProfessionInput, MasterSkillsUncheckedCreateWithoutProfessionInput> | MasterSkillsCreateWithoutProfessionInput[] | MasterSkillsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutProfessionInput | MasterSkillsCreateOrConnectWithoutProfessionInput[]
    createMany?: MasterSkillsCreateManyProfessionInputEnvelope
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
  }

  export type LevelsProfessionsUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<LevelsProfessionsCreateWithoutProfessionInput, LevelsProfessionsUncheckedCreateWithoutProfessionInput> | LevelsProfessionsCreateWithoutProfessionInput[] | LevelsProfessionsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: LevelsProfessionsCreateOrConnectWithoutProfessionInput | LevelsProfessionsCreateOrConnectWithoutProfessionInput[]
    createMany?: LevelsProfessionsCreateManyProfessionInputEnvelope
    connect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
  }

  export type OrderItemsUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<OrderItemsCreateWithoutProfessionInput, OrderItemsUncheckedCreateWithoutProfessionInput> | OrderItemsCreateWithoutProfessionInput[] | OrderItemsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutProfessionInput | OrderItemsCreateOrConnectWithoutProfessionInput[]
    createMany?: OrderItemsCreateManyProfessionInputEnvelope
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
  }

  export type BacketItemsUncheckedCreateNestedManyWithoutPofessionInput = {
    create?: XOR<BacketItemsCreateWithoutPofessionInput, BacketItemsUncheckedCreateWithoutPofessionInput> | BacketItemsCreateWithoutPofessionInput[] | BacketItemsUncheckedCreateWithoutPofessionInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutPofessionInput | BacketItemsCreateOrConnectWithoutPofessionInput[]
    createMany?: BacketItemsCreateManyPofessionInputEnvelope
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
  }

  export type ToolUpdateManyWithoutProfessionsNestedInput = {
    create?: XOR<ToolCreateWithoutProfessionsInput, ToolUncheckedCreateWithoutProfessionsInput> | ToolCreateWithoutProfessionsInput[] | ToolUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutProfessionsInput | ToolCreateOrConnectWithoutProfessionsInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutProfessionsInput | ToolUpsertWithWhereUniqueWithoutProfessionsInput[]
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutProfessionsInput | ToolUpdateWithWhereUniqueWithoutProfessionsInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutProfessionsInput | ToolUpdateManyWithWhereWithoutProfessionsInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type MasterSkillsUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<MasterSkillsCreateWithoutProfessionInput, MasterSkillsUncheckedCreateWithoutProfessionInput> | MasterSkillsCreateWithoutProfessionInput[] | MasterSkillsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutProfessionInput | MasterSkillsCreateOrConnectWithoutProfessionInput[]
    upsert?: MasterSkillsUpsertWithWhereUniqueWithoutProfessionInput | MasterSkillsUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: MasterSkillsCreateManyProfessionInputEnvelope
    set?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    disconnect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    delete?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    update?: MasterSkillsUpdateWithWhereUniqueWithoutProfessionInput | MasterSkillsUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: MasterSkillsUpdateManyWithWhereWithoutProfessionInput | MasterSkillsUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: MasterSkillsScalarWhereInput | MasterSkillsScalarWhereInput[]
  }

  export type LevelsProfessionsUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<LevelsProfessionsCreateWithoutProfessionInput, LevelsProfessionsUncheckedCreateWithoutProfessionInput> | LevelsProfessionsCreateWithoutProfessionInput[] | LevelsProfessionsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: LevelsProfessionsCreateOrConnectWithoutProfessionInput | LevelsProfessionsCreateOrConnectWithoutProfessionInput[]
    upsert?: LevelsProfessionsUpsertWithWhereUniqueWithoutProfessionInput | LevelsProfessionsUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: LevelsProfessionsCreateManyProfessionInputEnvelope
    set?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    disconnect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    delete?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    connect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    update?: LevelsProfessionsUpdateWithWhereUniqueWithoutProfessionInput | LevelsProfessionsUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: LevelsProfessionsUpdateManyWithWhereWithoutProfessionInput | LevelsProfessionsUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: LevelsProfessionsScalarWhereInput | LevelsProfessionsScalarWhereInput[]
  }

  export type OrderItemsUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<OrderItemsCreateWithoutProfessionInput, OrderItemsUncheckedCreateWithoutProfessionInput> | OrderItemsCreateWithoutProfessionInput[] | OrderItemsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutProfessionInput | OrderItemsCreateOrConnectWithoutProfessionInput[]
    upsert?: OrderItemsUpsertWithWhereUniqueWithoutProfessionInput | OrderItemsUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: OrderItemsCreateManyProfessionInputEnvelope
    set?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    disconnect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    delete?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    update?: OrderItemsUpdateWithWhereUniqueWithoutProfessionInput | OrderItemsUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: OrderItemsUpdateManyWithWhereWithoutProfessionInput | OrderItemsUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: OrderItemsScalarWhereInput | OrderItemsScalarWhereInput[]
  }

  export type BacketItemsUpdateManyWithoutPofessionNestedInput = {
    create?: XOR<BacketItemsCreateWithoutPofessionInput, BacketItemsUncheckedCreateWithoutPofessionInput> | BacketItemsCreateWithoutPofessionInput[] | BacketItemsUncheckedCreateWithoutPofessionInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutPofessionInput | BacketItemsCreateOrConnectWithoutPofessionInput[]
    upsert?: BacketItemsUpsertWithWhereUniqueWithoutPofessionInput | BacketItemsUpsertWithWhereUniqueWithoutPofessionInput[]
    createMany?: BacketItemsCreateManyPofessionInputEnvelope
    set?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    disconnect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    delete?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    update?: BacketItemsUpdateWithWhereUniqueWithoutPofessionInput | BacketItemsUpdateWithWhereUniqueWithoutPofessionInput[]
    updateMany?: BacketItemsUpdateManyWithWhereWithoutPofessionInput | BacketItemsUpdateManyWithWhereWithoutPofessionInput[]
    deleteMany?: BacketItemsScalarWhereInput | BacketItemsScalarWhereInput[]
  }

  export type ToolUncheckedUpdateManyWithoutProfessionsNestedInput = {
    create?: XOR<ToolCreateWithoutProfessionsInput, ToolUncheckedCreateWithoutProfessionsInput> | ToolCreateWithoutProfessionsInput[] | ToolUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutProfessionsInput | ToolCreateOrConnectWithoutProfessionsInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutProfessionsInput | ToolUpsertWithWhereUniqueWithoutProfessionsInput[]
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutProfessionsInput | ToolUpdateWithWhereUniqueWithoutProfessionsInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutProfessionsInput | ToolUpdateManyWithWhereWithoutProfessionsInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type MasterSkillsUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<MasterSkillsCreateWithoutProfessionInput, MasterSkillsUncheckedCreateWithoutProfessionInput> | MasterSkillsCreateWithoutProfessionInput[] | MasterSkillsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutProfessionInput | MasterSkillsCreateOrConnectWithoutProfessionInput[]
    upsert?: MasterSkillsUpsertWithWhereUniqueWithoutProfessionInput | MasterSkillsUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: MasterSkillsCreateManyProfessionInputEnvelope
    set?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    disconnect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    delete?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    update?: MasterSkillsUpdateWithWhereUniqueWithoutProfessionInput | MasterSkillsUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: MasterSkillsUpdateManyWithWhereWithoutProfessionInput | MasterSkillsUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: MasterSkillsScalarWhereInput | MasterSkillsScalarWhereInput[]
  }

  export type LevelsProfessionsUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<LevelsProfessionsCreateWithoutProfessionInput, LevelsProfessionsUncheckedCreateWithoutProfessionInput> | LevelsProfessionsCreateWithoutProfessionInput[] | LevelsProfessionsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: LevelsProfessionsCreateOrConnectWithoutProfessionInput | LevelsProfessionsCreateOrConnectWithoutProfessionInput[]
    upsert?: LevelsProfessionsUpsertWithWhereUniqueWithoutProfessionInput | LevelsProfessionsUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: LevelsProfessionsCreateManyProfessionInputEnvelope
    set?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    disconnect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    delete?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    connect?: LevelsProfessionsWhereUniqueInput | LevelsProfessionsWhereUniqueInput[]
    update?: LevelsProfessionsUpdateWithWhereUniqueWithoutProfessionInput | LevelsProfessionsUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: LevelsProfessionsUpdateManyWithWhereWithoutProfessionInput | LevelsProfessionsUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: LevelsProfessionsScalarWhereInput | LevelsProfessionsScalarWhereInput[]
  }

  export type OrderItemsUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<OrderItemsCreateWithoutProfessionInput, OrderItemsUncheckedCreateWithoutProfessionInput> | OrderItemsCreateWithoutProfessionInput[] | OrderItemsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutProfessionInput | OrderItemsCreateOrConnectWithoutProfessionInput[]
    upsert?: OrderItemsUpsertWithWhereUniqueWithoutProfessionInput | OrderItemsUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: OrderItemsCreateManyProfessionInputEnvelope
    set?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    disconnect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    delete?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    update?: OrderItemsUpdateWithWhereUniqueWithoutProfessionInput | OrderItemsUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: OrderItemsUpdateManyWithWhereWithoutProfessionInput | OrderItemsUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: OrderItemsScalarWhereInput | OrderItemsScalarWhereInput[]
  }

  export type BacketItemsUncheckedUpdateManyWithoutPofessionNestedInput = {
    create?: XOR<BacketItemsCreateWithoutPofessionInput, BacketItemsUncheckedCreateWithoutPofessionInput> | BacketItemsCreateWithoutPofessionInput[] | BacketItemsUncheckedCreateWithoutPofessionInput[]
    connectOrCreate?: BacketItemsCreateOrConnectWithoutPofessionInput | BacketItemsCreateOrConnectWithoutPofessionInput[]
    upsert?: BacketItemsUpsertWithWhereUniqueWithoutPofessionInput | BacketItemsUpsertWithWhereUniqueWithoutPofessionInput[]
    createMany?: BacketItemsCreateManyPofessionInputEnvelope
    set?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    disconnect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    delete?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    connect?: BacketItemsWhereUniqueInput | BacketItemsWhereUniqueInput[]
    update?: BacketItemsUpdateWithWhereUniqueWithoutPofessionInput | BacketItemsUpdateWithWhereUniqueWithoutPofessionInput[]
    updateMany?: BacketItemsUpdateManyWithWhereWithoutPofessionInput | BacketItemsUpdateManyWithWhereWithoutPofessionInput[]
    deleteMany?: BacketItemsScalarWhereInput | BacketItemsScalarWhereInput[]
  }

  export type ProfessionCreateNestedOneWithoutLevelsProfessionsInput = {
    create?: XOR<ProfessionCreateWithoutLevelsProfessionsInput, ProfessionUncheckedCreateWithoutLevelsProfessionsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutLevelsProfessionsInput
    connect?: ProfessionWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutLevelsProfessionsInput = {
    create?: XOR<LevelCreateWithoutLevelsProfessionsInput, LevelUncheckedCreateWithoutLevelsProfessionsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutLevelsProfessionsInput
    connect?: LevelWhereUniqueInput
  }

  export type ProfessionUpdateOneRequiredWithoutLevelsProfessionsNestedInput = {
    create?: XOR<ProfessionCreateWithoutLevelsProfessionsInput, ProfessionUncheckedCreateWithoutLevelsProfessionsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutLevelsProfessionsInput
    upsert?: ProfessionUpsertWithoutLevelsProfessionsInput
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutLevelsProfessionsInput, ProfessionUpdateWithoutLevelsProfessionsInput>, ProfessionUncheckedUpdateWithoutLevelsProfessionsInput>
  }

  export type LevelUpdateOneWithoutLevelsProfessionsNestedInput = {
    create?: XOR<LevelCreateWithoutLevelsProfessionsInput, LevelUncheckedCreateWithoutLevelsProfessionsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutLevelsProfessionsInput
    upsert?: LevelUpsertWithoutLevelsProfessionsInput
    disconnect?: LevelWhereInput | boolean
    delete?: LevelWhereInput | boolean
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutLevelsProfessionsInput, LevelUpdateWithoutLevelsProfessionsInput>, LevelUncheckedUpdateWithoutLevelsProfessionsInput>
  }

  export type MasterSkillsCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterSkillsCreateWithoutMasterInput, MasterSkillsUncheckedCreateWithoutMasterInput> | MasterSkillsCreateWithoutMasterInput[] | MasterSkillsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutMasterInput | MasterSkillsCreateOrConnectWithoutMasterInput[]
    createMany?: MasterSkillsCreateManyMasterInputEnvelope
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutMastersInput = {
    create?: XOR<OrderCreateWithoutMastersInput, OrderUncheckedCreateWithoutMastersInput> | OrderCreateWithoutMastersInput[] | OrderUncheckedCreateWithoutMastersInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutMastersInput | OrderCreateOrConnectWithoutMastersInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type MasterRatingsCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type MasterSkillsUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterSkillsCreateWithoutMasterInput, MasterSkillsUncheckedCreateWithoutMasterInput> | MasterSkillsCreateWithoutMasterInput[] | MasterSkillsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutMasterInput | MasterSkillsCreateOrConnectWithoutMasterInput[]
    createMany?: MasterSkillsCreateManyMasterInputEnvelope
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutMastersInput = {
    create?: XOR<OrderCreateWithoutMastersInput, OrderUncheckedCreateWithoutMastersInput> | OrderCreateWithoutMastersInput[] | OrderUncheckedCreateWithoutMastersInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutMastersInput | OrderCreateOrConnectWithoutMastersInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type MasterRatingsUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type MasterSkillsUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterSkillsCreateWithoutMasterInput, MasterSkillsUncheckedCreateWithoutMasterInput> | MasterSkillsCreateWithoutMasterInput[] | MasterSkillsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutMasterInput | MasterSkillsCreateOrConnectWithoutMasterInput[]
    upsert?: MasterSkillsUpsertWithWhereUniqueWithoutMasterInput | MasterSkillsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterSkillsCreateManyMasterInputEnvelope
    set?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    disconnect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    delete?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    update?: MasterSkillsUpdateWithWhereUniqueWithoutMasterInput | MasterSkillsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterSkillsUpdateManyWithWhereWithoutMasterInput | MasterSkillsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterSkillsScalarWhereInput | MasterSkillsScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutMastersNestedInput = {
    create?: XOR<OrderCreateWithoutMastersInput, OrderUncheckedCreateWithoutMastersInput> | OrderCreateWithoutMastersInput[] | OrderUncheckedCreateWithoutMastersInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutMastersInput | OrderCreateOrConnectWithoutMastersInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutMastersInput | OrderUpsertWithWhereUniqueWithoutMastersInput[]
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutMastersInput | OrderUpdateWithWhereUniqueWithoutMastersInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutMastersInput | OrderUpdateManyWithWhereWithoutMastersInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type MasterRatingsUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutMasterInput | MasterRatingsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutMasterInput | MasterRatingsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutMasterInput | MasterRatingsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type MasterSkillsUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterSkillsCreateWithoutMasterInput, MasterSkillsUncheckedCreateWithoutMasterInput> | MasterSkillsCreateWithoutMasterInput[] | MasterSkillsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterSkillsCreateOrConnectWithoutMasterInput | MasterSkillsCreateOrConnectWithoutMasterInput[]
    upsert?: MasterSkillsUpsertWithWhereUniqueWithoutMasterInput | MasterSkillsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterSkillsCreateManyMasterInputEnvelope
    set?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    disconnect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    delete?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    connect?: MasterSkillsWhereUniqueInput | MasterSkillsWhereUniqueInput[]
    update?: MasterSkillsUpdateWithWhereUniqueWithoutMasterInput | MasterSkillsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterSkillsUpdateManyWithWhereWithoutMasterInput | MasterSkillsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterSkillsScalarWhereInput | MasterSkillsScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutMastersNestedInput = {
    create?: XOR<OrderCreateWithoutMastersInput, OrderUncheckedCreateWithoutMastersInput> | OrderCreateWithoutMastersInput[] | OrderUncheckedCreateWithoutMastersInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutMastersInput | OrderCreateOrConnectWithoutMastersInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutMastersInput | OrderUpsertWithWhereUniqueWithoutMastersInput[]
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutMastersInput | OrderUpdateWithWhereUniqueWithoutMastersInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutMastersInput | OrderUpdateManyWithWhereWithoutMastersInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutMasterInput | MasterRatingsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutMasterInput | MasterRatingsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutMasterInput | MasterRatingsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type LevelCreateNestedOneWithoutMasterSkillsInput = {
    create?: XOR<LevelCreateWithoutMasterSkillsInput, LevelUncheckedCreateWithoutMasterSkillsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutMasterSkillsInput
    connect?: LevelWhereUniqueInput
  }

  export type ProfessionCreateNestedOneWithoutMasterSkillsInput = {
    create?: XOR<ProfessionCreateWithoutMasterSkillsInput, ProfessionUncheckedCreateWithoutMasterSkillsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutMasterSkillsInput
    connect?: ProfessionWhereUniqueInput
  }

  export type MasterCreateNestedOneWithoutMasterSkillsInput = {
    create?: XOR<MasterCreateWithoutMasterSkillsInput, MasterUncheckedCreateWithoutMasterSkillsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterSkillsInput
    connect?: MasterWhereUniqueInput
  }

  export type LevelUpdateOneWithoutMasterSkillsNestedInput = {
    create?: XOR<LevelCreateWithoutMasterSkillsInput, LevelUncheckedCreateWithoutMasterSkillsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutMasterSkillsInput
    upsert?: LevelUpsertWithoutMasterSkillsInput
    disconnect?: LevelWhereInput | boolean
    delete?: LevelWhereInput | boolean
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutMasterSkillsInput, LevelUpdateWithoutMasterSkillsInput>, LevelUncheckedUpdateWithoutMasterSkillsInput>
  }

  export type ProfessionUpdateOneWithoutMasterSkillsNestedInput = {
    create?: XOR<ProfessionCreateWithoutMasterSkillsInput, ProfessionUncheckedCreateWithoutMasterSkillsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutMasterSkillsInput
    upsert?: ProfessionUpsertWithoutMasterSkillsInput
    disconnect?: ProfessionWhereInput | boolean
    delete?: ProfessionWhereInput | boolean
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutMasterSkillsInput, ProfessionUpdateWithoutMasterSkillsInput>, ProfessionUncheckedUpdateWithoutMasterSkillsInput>
  }

  export type MasterUpdateOneRequiredWithoutMasterSkillsNestedInput = {
    create?: XOR<MasterCreateWithoutMasterSkillsInput, MasterUncheckedCreateWithoutMasterSkillsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterSkillsInput
    upsert?: MasterUpsertWithoutMasterSkillsInput
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutMasterSkillsInput, MasterUpdateWithoutMasterSkillsInput>, MasterUncheckedUpdateWithoutMasterSkillsInput>
  }

  export type UserCreateNestedOneWithoutOrderInput = {
    create?: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderInput
    connect?: UserWhereUniqueInput
  }

  export type MasterCreateNestedManyWithoutOrdersInput = {
    create?: XOR<MasterCreateWithoutOrdersInput, MasterUncheckedCreateWithoutOrdersInput> | MasterCreateWithoutOrdersInput[] | MasterUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: MasterCreateOrConnectWithoutOrdersInput | MasterCreateOrConnectWithoutOrdersInput[]
    connect?: MasterWhereUniqueInput | MasterWhereUniqueInput[]
  }

  export type OrderItemsCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemsCreateWithoutOrderInput, OrderItemsUncheckedCreateWithoutOrderInput> | OrderItemsCreateWithoutOrderInput[] | OrderItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutOrderInput | OrderItemsCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemsCreateManyOrderInputEnvelope
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
  }

  export type MasterUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<MasterCreateWithoutOrdersInput, MasterUncheckedCreateWithoutOrdersInput> | MasterCreateWithoutOrdersInput[] | MasterUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: MasterCreateOrConnectWithoutOrdersInput | MasterCreateOrConnectWithoutOrdersInput[]
    connect?: MasterWhereUniqueInput | MasterWhereUniqueInput[]
  }

  export type OrderItemsUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemsCreateWithoutOrderInput, OrderItemsUncheckedCreateWithoutOrderInput> | OrderItemsCreateWithoutOrderInput[] | OrderItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutOrderInput | OrderItemsCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemsCreateManyOrderInputEnvelope
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type EnumStatusOrderFieldUpdateOperationsInput = {
    set?: $Enums.StatusOrder
  }

  export type UserUpdateOneRequiredWithoutOrderNestedInput = {
    create?: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderInput
    upsert?: UserUpsertWithoutOrderInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrderInput, UserUpdateWithoutOrderInput>, UserUncheckedUpdateWithoutOrderInput>
  }

  export type MasterUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<MasterCreateWithoutOrdersInput, MasterUncheckedCreateWithoutOrdersInput> | MasterCreateWithoutOrdersInput[] | MasterUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: MasterCreateOrConnectWithoutOrdersInput | MasterCreateOrConnectWithoutOrdersInput[]
    upsert?: MasterUpsertWithWhereUniqueWithoutOrdersInput | MasterUpsertWithWhereUniqueWithoutOrdersInput[]
    set?: MasterWhereUniqueInput | MasterWhereUniqueInput[]
    disconnect?: MasterWhereUniqueInput | MasterWhereUniqueInput[]
    delete?: MasterWhereUniqueInput | MasterWhereUniqueInput[]
    connect?: MasterWhereUniqueInput | MasterWhereUniqueInput[]
    update?: MasterUpdateWithWhereUniqueWithoutOrdersInput | MasterUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: MasterUpdateManyWithWhereWithoutOrdersInput | MasterUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: MasterScalarWhereInput | MasterScalarWhereInput[]
  }

  export type OrderItemsUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemsCreateWithoutOrderInput, OrderItemsUncheckedCreateWithoutOrderInput> | OrderItemsCreateWithoutOrderInput[] | OrderItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutOrderInput | OrderItemsCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemsUpsertWithWhereUniqueWithoutOrderInput | OrderItemsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemsCreateManyOrderInputEnvelope
    set?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    disconnect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    delete?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    update?: OrderItemsUpdateWithWhereUniqueWithoutOrderInput | OrderItemsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemsUpdateManyWithWhereWithoutOrderInput | OrderItemsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemsScalarWhereInput | OrderItemsScalarWhereInput[]
  }

  export type MasterUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<MasterCreateWithoutOrdersInput, MasterUncheckedCreateWithoutOrdersInput> | MasterCreateWithoutOrdersInput[] | MasterUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: MasterCreateOrConnectWithoutOrdersInput | MasterCreateOrConnectWithoutOrdersInput[]
    upsert?: MasterUpsertWithWhereUniqueWithoutOrdersInput | MasterUpsertWithWhereUniqueWithoutOrdersInput[]
    set?: MasterWhereUniqueInput | MasterWhereUniqueInput[]
    disconnect?: MasterWhereUniqueInput | MasterWhereUniqueInput[]
    delete?: MasterWhereUniqueInput | MasterWhereUniqueInput[]
    connect?: MasterWhereUniqueInput | MasterWhereUniqueInput[]
    update?: MasterUpdateWithWhereUniqueWithoutOrdersInput | MasterUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: MasterUpdateManyWithWhereWithoutOrdersInput | MasterUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: MasterScalarWhereInput | MasterScalarWhereInput[]
  }

  export type OrderItemsUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemsCreateWithoutOrderInput, OrderItemsUncheckedCreateWithoutOrderInput> | OrderItemsCreateWithoutOrderInput[] | OrderItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemsCreateOrConnectWithoutOrderInput | OrderItemsCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemsUpsertWithWhereUniqueWithoutOrderInput | OrderItemsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemsCreateManyOrderInputEnvelope
    set?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    disconnect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    delete?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    connect?: OrderItemsWhereUniqueInput | OrderItemsWhereUniqueInput[]
    update?: OrderItemsUpdateWithWhereUniqueWithoutOrderInput | OrderItemsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemsUpdateManyWithWhereWithoutOrderInput | OrderItemsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemsScalarWhereInput | OrderItemsScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type ToolCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<ToolCreateWithoutOrderItemsInput, ToolUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutOrderItemsInput
    connect?: ToolWhereUniqueInput
  }

  export type ProfessionCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<ProfessionCreateWithoutOrderItemsInput, ProfessionUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutOrderItemsInput
    connect?: ProfessionWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<LevelCreateWithoutOrderItemsInput, LevelUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutOrderItemsInput
    connect?: LevelWhereUniqueInput
  }

  export type EnumMeasureFieldUpdateOperationsInput = {
    set?: $Enums.Measure
  }

  export type OrderUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    upsert?: OrderUpsertWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderItemsInput, OrderUpdateWithoutOrderItemsInput>, OrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ToolUpdateOneWithoutOrderItemsNestedInput = {
    create?: XOR<ToolCreateWithoutOrderItemsInput, ToolUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutOrderItemsInput
    upsert?: ToolUpsertWithoutOrderItemsInput
    disconnect?: ToolWhereInput | boolean
    delete?: ToolWhereInput | boolean
    connect?: ToolWhereUniqueInput
    update?: XOR<XOR<ToolUpdateToOneWithWhereWithoutOrderItemsInput, ToolUpdateWithoutOrderItemsInput>, ToolUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProfessionUpdateOneWithoutOrderItemsNestedInput = {
    create?: XOR<ProfessionCreateWithoutOrderItemsInput, ProfessionUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutOrderItemsInput
    upsert?: ProfessionUpsertWithoutOrderItemsInput
    disconnect?: ProfessionWhereInput | boolean
    delete?: ProfessionWhereInput | boolean
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutOrderItemsInput, ProfessionUpdateWithoutOrderItemsInput>, ProfessionUncheckedUpdateWithoutOrderItemsInput>
  }

  export type LevelUpdateOneWithoutOrderItemsNestedInput = {
    create?: XOR<LevelCreateWithoutOrderItemsInput, LevelUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutOrderItemsInput
    upsert?: LevelUpsertWithoutOrderItemsInput
    disconnect?: LevelWhereInput | boolean
    delete?: LevelWhereInput | boolean
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutOrderItemsInput, LevelUpdateWithoutOrderItemsInput>, LevelUncheckedUpdateWithoutOrderItemsInput>
  }

  export type UserCreateNestedOneWithoutBacketItemsInput = {
    create?: XOR<UserCreateWithoutBacketItemsInput, UserUncheckedCreateWithoutBacketItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBacketItemsInput
    connect?: UserWhereUniqueInput
  }

  export type ProfessionCreateNestedOneWithoutBacketItemsInput = {
    create?: XOR<ProfessionCreateWithoutBacketItemsInput, ProfessionUncheckedCreateWithoutBacketItemsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutBacketItemsInput
    connect?: ProfessionWhereUniqueInput
  }

  export type ToolCreateNestedOneWithoutBacketItemsInput = {
    create?: XOR<ToolCreateWithoutBacketItemsInput, ToolUncheckedCreateWithoutBacketItemsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutBacketItemsInput
    connect?: ToolWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutBacketItemsInput = {
    create?: XOR<LevelCreateWithoutBacketItemsInput, LevelUncheckedCreateWithoutBacketItemsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutBacketItemsInput
    connect?: LevelWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBacketItemsNestedInput = {
    create?: XOR<UserCreateWithoutBacketItemsInput, UserUncheckedCreateWithoutBacketItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBacketItemsInput
    upsert?: UserUpsertWithoutBacketItemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBacketItemsInput, UserUpdateWithoutBacketItemsInput>, UserUncheckedUpdateWithoutBacketItemsInput>
  }

  export type ProfessionUpdateOneWithoutBacketItemsNestedInput = {
    create?: XOR<ProfessionCreateWithoutBacketItemsInput, ProfessionUncheckedCreateWithoutBacketItemsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutBacketItemsInput
    upsert?: ProfessionUpsertWithoutBacketItemsInput
    disconnect?: ProfessionWhereInput | boolean
    delete?: ProfessionWhereInput | boolean
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutBacketItemsInput, ProfessionUpdateWithoutBacketItemsInput>, ProfessionUncheckedUpdateWithoutBacketItemsInput>
  }

  export type ToolUpdateOneWithoutBacketItemsNestedInput = {
    create?: XOR<ToolCreateWithoutBacketItemsInput, ToolUncheckedCreateWithoutBacketItemsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutBacketItemsInput
    upsert?: ToolUpsertWithoutBacketItemsInput
    disconnect?: ToolWhereInput | boolean
    delete?: ToolWhereInput | boolean
    connect?: ToolWhereUniqueInput
    update?: XOR<XOR<ToolUpdateToOneWithWhereWithoutBacketItemsInput, ToolUpdateWithoutBacketItemsInput>, ToolUncheckedUpdateWithoutBacketItemsInput>
  }

  export type LevelUpdateOneWithoutBacketItemsNestedInput = {
    create?: XOR<LevelCreateWithoutBacketItemsInput, LevelUncheckedCreateWithoutBacketItemsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutBacketItemsInput
    upsert?: LevelUpsertWithoutBacketItemsInput
    disconnect?: LevelWhereInput | boolean
    delete?: LevelWhereInput | boolean
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutBacketItemsInput, LevelUpdateWithoutBacketItemsInput>, LevelUncheckedUpdateWithoutBacketItemsInput>
  }

  export type MasterRatingsCreateNestedManyWithoutCommentInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type MasterRatingsUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type MasterRatingsUpdateManyWithoutCommentNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutCommentInput | MasterRatingsUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutCommentInput | MasterRatingsUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutCommentInput | MasterRatingsUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type MasterRatingsUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutCommentInput | MasterRatingsUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutCommentInput | MasterRatingsUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutCommentInput | MasterRatingsUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type MasterCreateNestedOneWithoutMasterRatingsInput = {
    create?: XOR<MasterCreateWithoutMasterRatingsInput, MasterUncheckedCreateWithoutMasterRatingsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterRatingsInput
    connect?: MasterWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutMasterRatingsInput = {
    create?: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
    connectOrCreate?: CommentCreateOrConnectWithoutMasterRatingsInput
    connect?: CommentWhereUniqueInput
  }

  export type MasterUpdateOneRequiredWithoutMasterRatingsNestedInput = {
    create?: XOR<MasterCreateWithoutMasterRatingsInput, MasterUncheckedCreateWithoutMasterRatingsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterRatingsInput
    upsert?: MasterUpsertWithoutMasterRatingsInput
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutMasterRatingsInput, MasterUpdateWithoutMasterRatingsInput>, MasterUncheckedUpdateWithoutMasterRatingsInput>
  }

  export type CommentUpdateOneRequiredWithoutMasterRatingsNestedInput = {
    create?: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
    connectOrCreate?: CommentCreateOrConnectWithoutMasterRatingsInput
    upsert?: CommentUpsertWithoutMasterRatingsInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutMasterRatingsInput, CommentUpdateWithoutMasterRatingsInput>, CommentUncheckedUpdateWithoutMasterRatingsInput>
  }

  export type InfoCreatephoneInput = {
    set: string[]
  }

  export type InfoUpdatephoneInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedEnumStatusOrderFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOrder | EnumStatusOrderFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOrder[] | ListEnumStatusOrderFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOrder[] | ListEnumStatusOrderFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOrderFilter<$PrismaModel> | $Enums.StatusOrder
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type NestedEnumStatusOrderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOrder | EnumStatusOrderFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOrder[] | ListEnumStatusOrderFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOrder[] | ListEnumStatusOrderFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOrderWithAggregatesFilter<$PrismaModel> | $Enums.StatusOrder
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusOrderFilter<$PrismaModel>
    _max?: NestedEnumStatusOrderFilter<$PrismaModel>
  }

  export type NestedEnumMeasureFilter<$PrismaModel = never> = {
    equals?: $Enums.Measure | EnumMeasureFieldRefInput<$PrismaModel>
    in?: $Enums.Measure[] | ListEnumMeasureFieldRefInput<$PrismaModel>
    notIn?: $Enums.Measure[] | ListEnumMeasureFieldRefInput<$PrismaModel>
    not?: NestedEnumMeasureFilter<$PrismaModel> | $Enums.Measure
  }

  export type NestedEnumMeasureWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Measure | EnumMeasureFieldRefInput<$PrismaModel>
    in?: $Enums.Measure[] | ListEnumMeasureFieldRefInput<$PrismaModel>
    notIn?: $Enums.Measure[] | ListEnumMeasureFieldRefInput<$PrismaModel>
    not?: NestedEnumMeasureWithAggregatesFilter<$PrismaModel> | $Enums.Measure
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMeasureFilter<$PrismaModel>
    _max?: NestedEnumMeasureFilter<$PrismaModel>
  }

  export type UserCreateWithoutRegionInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Company?: CompanyCreateNestedOneWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    Order?: OrderCreateNestedManyWithoutUserInput
    BacketItems?: BacketItemsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRegionInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Company?: CompanyUncheckedCreateNestedOneWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Order?: OrderUncheckedCreateNestedManyWithoutUserInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRegionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserCreateManyRegionInputEnvelope = {
    data: UserCreateManyRegionInput | UserCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
  }

  export type UserUpdateManyWithWhereWithoutRegionInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRegionInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    full_name?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: BoolFilter<"User"> | boolean
    region_id?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type RegionCreateWithoutUsersInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type RegionUncheckedCreateWithoutUsersInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type RegionCreateOrConnectWithoutUsersInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
  }

  export type CompanyCreateWithoutUserInput = {
    id?: string
    name: string
    inn: string
    mfo: string
    rs: string
    bank: string
    oked: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    inn: string
    mfo: string
    rs: string
    bank: string
    oked: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyCreateOrConnectWithoutUserInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    ip_address: string
    date?: Date | string
    device: JsonNullValueInput | InputJsonValue
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    ip_address: string
    date?: Date | string
    device: JsonNullValueInput | InputJsonValue
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    id?: string
    total_sum: number
    location: JsonNullValueInput | InputJsonValue
    address: string
    dete: Date | string
    payment_type?: $Enums.PaymentType
    paid?: boolean
    status?: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Masters?: MasterCreateNestedManyWithoutOrdersInput
    OrderItems?: OrderItemsCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: string
    total_sum: number
    location: JsonNullValueInput | InputJsonValue
    address: string
    dete: Date | string
    payment_type?: $Enums.PaymentType
    paid?: boolean
    status?: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Masters?: MasterUncheckedCreateNestedManyWithoutOrdersInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BacketItemsCreateWithoutUserInput = {
    id?: string
    count: number
    measure: $Enums.Measure
    time: number
    Pofession?: ProfessionCreateNestedOneWithoutBacketItemsInput
    Tool?: ToolCreateNestedOneWithoutBacketItemsInput
    Level?: LevelCreateNestedOneWithoutBacketItemsInput
  }

  export type BacketItemsUncheckedCreateWithoutUserInput = {
    id?: string
    profession_id?: string | null
    tool_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
  }

  export type BacketItemsCreateOrConnectWithoutUserInput = {
    where: BacketItemsWhereUniqueInput
    create: XOR<BacketItemsCreateWithoutUserInput, BacketItemsUncheckedCreateWithoutUserInput>
  }

  export type BacketItemsCreateManyUserInputEnvelope = {
    data: BacketItemsCreateManyUserInput | BacketItemsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutUsersInput = {
    update: XOR<RegionUpdateWithoutUsersInput, RegionUncheckedUpdateWithoutUsersInput>
    create: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutUsersInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutUsersInput, RegionUncheckedUpdateWithoutUsersInput>
  }

  export type RegionUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyUpsertWithoutUserInput = {
    update: XOR<CompanyUpdateWithoutUserInput, CompanyUncheckedUpdateWithoutUserInput>
    create: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUserInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUserInput, CompanyUncheckedUpdateWithoutUserInput>
  }

  export type CompanyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    mfo?: StringFieldUpdateOperationsInput | string
    rs?: StringFieldUpdateOperationsInput | string
    bank?: StringFieldUpdateOperationsInput | string
    oked?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    mfo?: StringFieldUpdateOperationsInput | string
    rs?: StringFieldUpdateOperationsInput | string
    bank?: StringFieldUpdateOperationsInput | string
    oked?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    user_id?: StringFilter<"Session"> | string
    ip_address?: StringFilter<"Session"> | string
    date?: DateTimeFilter<"Session"> | Date | string
    device?: JsonFilter<"Session">
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    user_id?: StringFilter<"Order"> | string
    total_sum?: FloatFilter<"Order"> | number
    location?: JsonFilter<"Order">
    address?: StringFilter<"Order"> | string
    dete?: DateTimeFilter<"Order"> | Date | string
    payment_type?: EnumPaymentTypeFilter<"Order"> | $Enums.PaymentType
    paid?: BoolFilter<"Order"> | boolean
    status?: EnumStatusOrderFilter<"Order"> | $Enums.StatusOrder
    with_delivery?: BoolFilter<"Order"> | boolean
    comment_delivery?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type BacketItemsUpsertWithWhereUniqueWithoutUserInput = {
    where: BacketItemsWhereUniqueInput
    update: XOR<BacketItemsUpdateWithoutUserInput, BacketItemsUncheckedUpdateWithoutUserInput>
    create: XOR<BacketItemsCreateWithoutUserInput, BacketItemsUncheckedCreateWithoutUserInput>
  }

  export type BacketItemsUpdateWithWhereUniqueWithoutUserInput = {
    where: BacketItemsWhereUniqueInput
    data: XOR<BacketItemsUpdateWithoutUserInput, BacketItemsUncheckedUpdateWithoutUserInput>
  }

  export type BacketItemsUpdateManyWithWhereWithoutUserInput = {
    where: BacketItemsScalarWhereInput
    data: XOR<BacketItemsUpdateManyMutationInput, BacketItemsUncheckedUpdateManyWithoutUserInput>
  }

  export type BacketItemsScalarWhereInput = {
    AND?: BacketItemsScalarWhereInput | BacketItemsScalarWhereInput[]
    OR?: BacketItemsScalarWhereInput[]
    NOT?: BacketItemsScalarWhereInput | BacketItemsScalarWhereInput[]
    id?: StringFilter<"BacketItems"> | string
    user_id?: StringFilter<"BacketItems"> | string
    profession_id?: StringNullableFilter<"BacketItems"> | string | null
    tool_id?: StringNullableFilter<"BacketItems"> | string | null
    level_id?: StringNullableFilter<"BacketItems"> | string | null
    count?: IntFilter<"BacketItems"> | number
    measure?: EnumMeasureFilter<"BacketItems"> | $Enums.Measure
    time?: IntFilter<"BacketItems"> | number
  }

  export type UserCreateWithoutCompanyInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Region?: RegionCreateNestedOneWithoutUsersInput
    Session?: SessionCreateNestedManyWithoutUserInput
    Order?: OrderCreateNestedManyWithoutUserInput
    BacketItems?: BacketItemsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    region_id?: string | null
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Order?: OrderUncheckedCreateNestedManyWithoutUserInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserUpsertWithoutCompanyInput = {
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompanyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Region?: RegionUpdateOneWithoutUsersNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    Order?: OrderUpdateManyWithoutUserNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    region_id?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Order?: OrderUncheckedUpdateManyWithoutUserNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Region?: RegionCreateNestedOneWithoutUsersInput
    Company?: CompanyCreateNestedOneWithoutUserInput
    Order?: OrderCreateNestedManyWithoutUserInput
    BacketItems?: BacketItemsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    region_id?: string | null
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Company?: CompanyUncheckedCreateNestedOneWithoutUserInput
    Order?: OrderUncheckedCreateNestedManyWithoutUserInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpsertWithoutSessionInput = {
    update: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Region?: RegionUpdateOneWithoutUsersNestedInput
    Company?: CompanyUpdateOneWithoutUserNestedInput
    Order?: OrderUpdateManyWithoutUserNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    region_id?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Company?: CompanyUncheckedUpdateOneWithoutUserNestedInput
    Order?: OrderUncheckedUpdateManyWithoutUserNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ToolCreateWithoutBrandInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Size?: SizeCreateNestedOneWithoutToolInput
    Capacity?: CapacityCreateNestedOneWithoutToolInput
    Professions?: ProfessionCreateNestedManyWithoutToolsInput
    OrderItems?: OrderItemsCreateNestedManyWithoutToolInput
    BacketItems?: BacketItemsCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutBrandInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    size_id?: string | null
    capacity_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutToolInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutBrandInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput>
  }

  export type ToolCreateManyBrandInputEnvelope = {
    data: ToolCreateManyBrandInput | ToolCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type ToolUpsertWithWhereUniqueWithoutBrandInput = {
    where: ToolWhereUniqueInput
    update: XOR<ToolUpdateWithoutBrandInput, ToolUncheckedUpdateWithoutBrandInput>
    create: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput>
  }

  export type ToolUpdateWithWhereUniqueWithoutBrandInput = {
    where: ToolWhereUniqueInput
    data: XOR<ToolUpdateWithoutBrandInput, ToolUncheckedUpdateWithoutBrandInput>
  }

  export type ToolUpdateManyWithWhereWithoutBrandInput = {
    where: ToolScalarWhereInput
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyWithoutBrandInput>
  }

  export type ToolScalarWhereInput = {
    AND?: ToolScalarWhereInput | ToolScalarWhereInput[]
    OR?: ToolScalarWhereInput[]
    NOT?: ToolScalarWhereInput | ToolScalarWhereInput[]
    id?: StringFilter<"Tool"> | string
    name_uz?: StringFilter<"Tool"> | string
    name_ru?: StringFilter<"Tool"> | string
    name_en?: StringFilter<"Tool"> | string
    description_uz?: StringFilter<"Tool"> | string
    description_ru?: StringFilter<"Tool"> | string
    description_en?: StringFilter<"Tool"> | string
    price?: FloatFilter<"Tool"> | number
    count?: IntFilter<"Tool"> | number
    code?: StringFilter<"Tool"> | string
    brand_id?: StringNullableFilter<"Tool"> | string | null
    size_id?: StringNullableFilter<"Tool"> | string | null
    capacity_id?: StringNullableFilter<"Tool"> | string | null
    isActive?: BoolFilter<"Tool"> | boolean
    image?: StringFilter<"Tool"> | string
    createdAt?: DateTimeFilter<"Tool"> | Date | string
    updatedAt?: DateTimeFilter<"Tool"> | Date | string
  }

  export type ToolCreateWithoutSizeInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Brand?: BrandCreateNestedOneWithoutToolInput
    Capacity?: CapacityCreateNestedOneWithoutToolInput
    Professions?: ProfessionCreateNestedManyWithoutToolsInput
    OrderItems?: OrderItemsCreateNestedManyWithoutToolInput
    BacketItems?: BacketItemsCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutSizeInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    brand_id?: string | null
    capacity_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutToolInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutSizeInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput>
  }

  export type ToolCreateManySizeInputEnvelope = {
    data: ToolCreateManySizeInput | ToolCreateManySizeInput[]
    skipDuplicates?: boolean
  }

  export type ToolUpsertWithWhereUniqueWithoutSizeInput = {
    where: ToolWhereUniqueInput
    update: XOR<ToolUpdateWithoutSizeInput, ToolUncheckedUpdateWithoutSizeInput>
    create: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput>
  }

  export type ToolUpdateWithWhereUniqueWithoutSizeInput = {
    where: ToolWhereUniqueInput
    data: XOR<ToolUpdateWithoutSizeInput, ToolUncheckedUpdateWithoutSizeInput>
  }

  export type ToolUpdateManyWithWhereWithoutSizeInput = {
    where: ToolScalarWhereInput
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyWithoutSizeInput>
  }

  export type ToolCreateWithoutCapacityInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Brand?: BrandCreateNestedOneWithoutToolInput
    Size?: SizeCreateNestedOneWithoutToolInput
    Professions?: ProfessionCreateNestedManyWithoutToolsInput
    OrderItems?: OrderItemsCreateNestedManyWithoutToolInput
    BacketItems?: BacketItemsCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutCapacityInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    brand_id?: string | null
    size_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutToolInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutCapacityInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput>
  }

  export type ToolCreateManyCapacityInputEnvelope = {
    data: ToolCreateManyCapacityInput | ToolCreateManyCapacityInput[]
    skipDuplicates?: boolean
  }

  export type ToolUpsertWithWhereUniqueWithoutCapacityInput = {
    where: ToolWhereUniqueInput
    update: XOR<ToolUpdateWithoutCapacityInput, ToolUncheckedUpdateWithoutCapacityInput>
    create: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput>
  }

  export type ToolUpdateWithWhereUniqueWithoutCapacityInput = {
    where: ToolWhereUniqueInput
    data: XOR<ToolUpdateWithoutCapacityInput, ToolUncheckedUpdateWithoutCapacityInput>
  }

  export type ToolUpdateManyWithWhereWithoutCapacityInput = {
    where: ToolScalarWhereInput
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyWithoutCapacityInput>
  }

  export type BrandCreateWithoutToolInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type BrandUncheckedCreateWithoutToolInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type BrandCreateOrConnectWithoutToolInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutToolInput, BrandUncheckedCreateWithoutToolInput>
  }

  export type SizeCreateWithoutToolInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type SizeUncheckedCreateWithoutToolInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type SizeCreateOrConnectWithoutToolInput = {
    where: SizeWhereUniqueInput
    create: XOR<SizeCreateWithoutToolInput, SizeUncheckedCreateWithoutToolInput>
  }

  export type CapacityCreateWithoutToolInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type CapacityUncheckedCreateWithoutToolInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
  }

  export type CapacityCreateOrConnectWithoutToolInput = {
    where: CapacityWhereUniqueInput
    create: XOR<CapacityCreateWithoutToolInput, CapacityUncheckedCreateWithoutToolInput>
  }

  export type ProfessionCreateWithoutToolsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    MasterSkills?: MasterSkillsCreateNestedManyWithoutProfessionInput
    LevelsProfessions?: LevelsProfessionsCreateNestedManyWithoutProfessionInput
    OrderItems?: OrderItemsCreateNestedManyWithoutProfessionInput
    BacketItems?: BacketItemsCreateNestedManyWithoutPofessionInput
  }

  export type ProfessionUncheckedCreateWithoutToolsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutProfessionInput
    LevelsProfessions?: LevelsProfessionsUncheckedCreateNestedManyWithoutProfessionInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutProfessionInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutPofessionInput
  }

  export type ProfessionCreateOrConnectWithoutToolsInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput>
  }

  export type OrderItemsCreateWithoutToolInput = {
    id?: string
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
    Order: OrderCreateNestedOneWithoutOrderItemsInput
    Profession?: ProfessionCreateNestedOneWithoutOrderItemsInput
    Level?: LevelCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemsUncheckedCreateWithoutToolInput = {
    id?: string
    order_id: string
    profession_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
  }

  export type OrderItemsCreateOrConnectWithoutToolInput = {
    where: OrderItemsWhereUniqueInput
    create: XOR<OrderItemsCreateWithoutToolInput, OrderItemsUncheckedCreateWithoutToolInput>
  }

  export type OrderItemsCreateManyToolInputEnvelope = {
    data: OrderItemsCreateManyToolInput | OrderItemsCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type BacketItemsCreateWithoutToolInput = {
    id?: string
    count: number
    measure: $Enums.Measure
    time: number
    User: UserCreateNestedOneWithoutBacketItemsInput
    Pofession?: ProfessionCreateNestedOneWithoutBacketItemsInput
    Level?: LevelCreateNestedOneWithoutBacketItemsInput
  }

  export type BacketItemsUncheckedCreateWithoutToolInput = {
    id?: string
    user_id: string
    profession_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
  }

  export type BacketItemsCreateOrConnectWithoutToolInput = {
    where: BacketItemsWhereUniqueInput
    create: XOR<BacketItemsCreateWithoutToolInput, BacketItemsUncheckedCreateWithoutToolInput>
  }

  export type BacketItemsCreateManyToolInputEnvelope = {
    data: BacketItemsCreateManyToolInput | BacketItemsCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type BrandUpsertWithoutToolInput = {
    update: XOR<BrandUpdateWithoutToolInput, BrandUncheckedUpdateWithoutToolInput>
    create: XOR<BrandCreateWithoutToolInput, BrandUncheckedCreateWithoutToolInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutToolInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutToolInput, BrandUncheckedUpdateWithoutToolInput>
  }

  export type BrandUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type BrandUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUpsertWithoutToolInput = {
    update: XOR<SizeUpdateWithoutToolInput, SizeUncheckedUpdateWithoutToolInput>
    create: XOR<SizeCreateWithoutToolInput, SizeUncheckedCreateWithoutToolInput>
    where?: SizeWhereInput
  }

  export type SizeUpdateToOneWithWhereWithoutToolInput = {
    where?: SizeWhereInput
    data: XOR<SizeUpdateWithoutToolInput, SizeUncheckedUpdateWithoutToolInput>
  }

  export type SizeUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityUpsertWithoutToolInput = {
    update: XOR<CapacityUpdateWithoutToolInput, CapacityUncheckedUpdateWithoutToolInput>
    create: XOR<CapacityCreateWithoutToolInput, CapacityUncheckedCreateWithoutToolInput>
    where?: CapacityWhereInput
  }

  export type CapacityUpdateToOneWithWhereWithoutToolInput = {
    where?: CapacityWhereInput
    data: XOR<CapacityUpdateWithoutToolInput, CapacityUncheckedUpdateWithoutToolInput>
  }

  export type CapacityUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionUpsertWithWhereUniqueWithoutToolsInput = {
    where: ProfessionWhereUniqueInput
    update: XOR<ProfessionUpdateWithoutToolsInput, ProfessionUncheckedUpdateWithoutToolsInput>
    create: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput>
  }

  export type ProfessionUpdateWithWhereUniqueWithoutToolsInput = {
    where: ProfessionWhereUniqueInput
    data: XOR<ProfessionUpdateWithoutToolsInput, ProfessionUncheckedUpdateWithoutToolsInput>
  }

  export type ProfessionUpdateManyWithWhereWithoutToolsInput = {
    where: ProfessionScalarWhereInput
    data: XOR<ProfessionUpdateManyMutationInput, ProfessionUncheckedUpdateManyWithoutToolsInput>
  }

  export type ProfessionScalarWhereInput = {
    AND?: ProfessionScalarWhereInput | ProfessionScalarWhereInput[]
    OR?: ProfessionScalarWhereInput[]
    NOT?: ProfessionScalarWhereInput | ProfessionScalarWhereInput[]
    id?: StringFilter<"Profession"> | string
    name_uz?: StringFilter<"Profession"> | string
    name_ru?: StringFilter<"Profession"> | string
    name_en?: StringFilter<"Profession"> | string
    image?: StringFilter<"Profession"> | string
    isActive?: BoolFilter<"Profession"> | boolean
  }

  export type OrderItemsUpsertWithWhereUniqueWithoutToolInput = {
    where: OrderItemsWhereUniqueInput
    update: XOR<OrderItemsUpdateWithoutToolInput, OrderItemsUncheckedUpdateWithoutToolInput>
    create: XOR<OrderItemsCreateWithoutToolInput, OrderItemsUncheckedCreateWithoutToolInput>
  }

  export type OrderItemsUpdateWithWhereUniqueWithoutToolInput = {
    where: OrderItemsWhereUniqueInput
    data: XOR<OrderItemsUpdateWithoutToolInput, OrderItemsUncheckedUpdateWithoutToolInput>
  }

  export type OrderItemsUpdateManyWithWhereWithoutToolInput = {
    where: OrderItemsScalarWhereInput
    data: XOR<OrderItemsUpdateManyMutationInput, OrderItemsUncheckedUpdateManyWithoutToolInput>
  }

  export type OrderItemsScalarWhereInput = {
    AND?: OrderItemsScalarWhereInput | OrderItemsScalarWhereInput[]
    OR?: OrderItemsScalarWhereInput[]
    NOT?: OrderItemsScalarWhereInput | OrderItemsScalarWhereInput[]
    id?: StringFilter<"OrderItems"> | string
    order_id?: StringFilter<"OrderItems"> | string
    tool_id?: StringNullableFilter<"OrderItems"> | string | null
    profession_id?: StringNullableFilter<"OrderItems"> | string | null
    level_id?: StringNullableFilter<"OrderItems"> | string | null
    count?: IntFilter<"OrderItems"> | number
    measure?: EnumMeasureFilter<"OrderItems"> | $Enums.Measure
    time?: IntFilter<"OrderItems"> | number
    total_sum?: FloatFilter<"OrderItems"> | number
  }

  export type BacketItemsUpsertWithWhereUniqueWithoutToolInput = {
    where: BacketItemsWhereUniqueInput
    update: XOR<BacketItemsUpdateWithoutToolInput, BacketItemsUncheckedUpdateWithoutToolInput>
    create: XOR<BacketItemsCreateWithoutToolInput, BacketItemsUncheckedCreateWithoutToolInput>
  }

  export type BacketItemsUpdateWithWhereUniqueWithoutToolInput = {
    where: BacketItemsWhereUniqueInput
    data: XOR<BacketItemsUpdateWithoutToolInput, BacketItemsUncheckedUpdateWithoutToolInput>
  }

  export type BacketItemsUpdateManyWithWhereWithoutToolInput = {
    where: BacketItemsScalarWhereInput
    data: XOR<BacketItemsUpdateManyMutationInput, BacketItemsUncheckedUpdateManyWithoutToolInput>
  }

  export type MasterSkillsCreateWithoutLevelInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    Profession?: ProfessionCreateNestedOneWithoutMasterSkillsInput
    Master: MasterCreateNestedOneWithoutMasterSkillsInput
  }

  export type MasterSkillsUncheckedCreateWithoutLevelInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    profession_id?: string | null
    master_id: string
  }

  export type MasterSkillsCreateOrConnectWithoutLevelInput = {
    where: MasterSkillsWhereUniqueInput
    create: XOR<MasterSkillsCreateWithoutLevelInput, MasterSkillsUncheckedCreateWithoutLevelInput>
  }

  export type MasterSkillsCreateManyLevelInputEnvelope = {
    data: MasterSkillsCreateManyLevelInput | MasterSkillsCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type LevelsProfessionsCreateWithoutLevelInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    Profession: ProfessionCreateNestedOneWithoutLevelsProfessionsInput
  }

  export type LevelsProfessionsUncheckedCreateWithoutLevelInput = {
    id?: string
    profession_id: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
  }

  export type LevelsProfessionsCreateOrConnectWithoutLevelInput = {
    where: LevelsProfessionsWhereUniqueInput
    create: XOR<LevelsProfessionsCreateWithoutLevelInput, LevelsProfessionsUncheckedCreateWithoutLevelInput>
  }

  export type LevelsProfessionsCreateManyLevelInputEnvelope = {
    data: LevelsProfessionsCreateManyLevelInput | LevelsProfessionsCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemsCreateWithoutLevelInput = {
    id?: string
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
    Order: OrderCreateNestedOneWithoutOrderItemsInput
    Tool?: ToolCreateNestedOneWithoutOrderItemsInput
    Profession?: ProfessionCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemsUncheckedCreateWithoutLevelInput = {
    id?: string
    order_id: string
    tool_id?: string | null
    profession_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
  }

  export type OrderItemsCreateOrConnectWithoutLevelInput = {
    where: OrderItemsWhereUniqueInput
    create: XOR<OrderItemsCreateWithoutLevelInput, OrderItemsUncheckedCreateWithoutLevelInput>
  }

  export type OrderItemsCreateManyLevelInputEnvelope = {
    data: OrderItemsCreateManyLevelInput | OrderItemsCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type BacketItemsCreateWithoutLevelInput = {
    id?: string
    count: number
    measure: $Enums.Measure
    time: number
    User: UserCreateNestedOneWithoutBacketItemsInput
    Pofession?: ProfessionCreateNestedOneWithoutBacketItemsInput
    Tool?: ToolCreateNestedOneWithoutBacketItemsInput
  }

  export type BacketItemsUncheckedCreateWithoutLevelInput = {
    id?: string
    user_id: string
    profession_id?: string | null
    tool_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
  }

  export type BacketItemsCreateOrConnectWithoutLevelInput = {
    where: BacketItemsWhereUniqueInput
    create: XOR<BacketItemsCreateWithoutLevelInput, BacketItemsUncheckedCreateWithoutLevelInput>
  }

  export type BacketItemsCreateManyLevelInputEnvelope = {
    data: BacketItemsCreateManyLevelInput | BacketItemsCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type MasterSkillsUpsertWithWhereUniqueWithoutLevelInput = {
    where: MasterSkillsWhereUniqueInput
    update: XOR<MasterSkillsUpdateWithoutLevelInput, MasterSkillsUncheckedUpdateWithoutLevelInput>
    create: XOR<MasterSkillsCreateWithoutLevelInput, MasterSkillsUncheckedCreateWithoutLevelInput>
  }

  export type MasterSkillsUpdateWithWhereUniqueWithoutLevelInput = {
    where: MasterSkillsWhereUniqueInput
    data: XOR<MasterSkillsUpdateWithoutLevelInput, MasterSkillsUncheckedUpdateWithoutLevelInput>
  }

  export type MasterSkillsUpdateManyWithWhereWithoutLevelInput = {
    where: MasterSkillsScalarWhereInput
    data: XOR<MasterSkillsUpdateManyMutationInput, MasterSkillsUncheckedUpdateManyWithoutLevelInput>
  }

  export type MasterSkillsScalarWhereInput = {
    AND?: MasterSkillsScalarWhereInput | MasterSkillsScalarWhereInput[]
    OR?: MasterSkillsScalarWhereInput[]
    NOT?: MasterSkillsScalarWhereInput | MasterSkillsScalarWhereInput[]
    id?: StringFilter<"MasterSkills"> | string
    min_work_hours?: IntFilter<"MasterSkills"> | number
    price_hourly?: FloatFilter<"MasterSkills"> | number
    price_daily?: FloatFilter<"MasterSkills"> | number
    experience?: IntFilter<"MasterSkills"> | number
    level_id?: StringNullableFilter<"MasterSkills"> | string | null
    profession_id?: StringNullableFilter<"MasterSkills"> | string | null
    master_id?: StringFilter<"MasterSkills"> | string
  }

  export type LevelsProfessionsUpsertWithWhereUniqueWithoutLevelInput = {
    where: LevelsProfessionsWhereUniqueInput
    update: XOR<LevelsProfessionsUpdateWithoutLevelInput, LevelsProfessionsUncheckedUpdateWithoutLevelInput>
    create: XOR<LevelsProfessionsCreateWithoutLevelInput, LevelsProfessionsUncheckedCreateWithoutLevelInput>
  }

  export type LevelsProfessionsUpdateWithWhereUniqueWithoutLevelInput = {
    where: LevelsProfessionsWhereUniqueInput
    data: XOR<LevelsProfessionsUpdateWithoutLevelInput, LevelsProfessionsUncheckedUpdateWithoutLevelInput>
  }

  export type LevelsProfessionsUpdateManyWithWhereWithoutLevelInput = {
    where: LevelsProfessionsScalarWhereInput
    data: XOR<LevelsProfessionsUpdateManyMutationInput, LevelsProfessionsUncheckedUpdateManyWithoutLevelInput>
  }

  export type LevelsProfessionsScalarWhereInput = {
    AND?: LevelsProfessionsScalarWhereInput | LevelsProfessionsScalarWhereInput[]
    OR?: LevelsProfessionsScalarWhereInput[]
    NOT?: LevelsProfessionsScalarWhereInput | LevelsProfessionsScalarWhereInput[]
    id?: StringFilter<"LevelsProfessions"> | string
    profession_id?: StringFilter<"LevelsProfessions"> | string
    level_id?: StringNullableFilter<"LevelsProfessions"> | string | null
    min_work_hours?: IntFilter<"LevelsProfessions"> | number
    price_hourly?: FloatFilter<"LevelsProfessions"> | number
    price_daily?: FloatFilter<"LevelsProfessions"> | number
  }

  export type OrderItemsUpsertWithWhereUniqueWithoutLevelInput = {
    where: OrderItemsWhereUniqueInput
    update: XOR<OrderItemsUpdateWithoutLevelInput, OrderItemsUncheckedUpdateWithoutLevelInput>
    create: XOR<OrderItemsCreateWithoutLevelInput, OrderItemsUncheckedCreateWithoutLevelInput>
  }

  export type OrderItemsUpdateWithWhereUniqueWithoutLevelInput = {
    where: OrderItemsWhereUniqueInput
    data: XOR<OrderItemsUpdateWithoutLevelInput, OrderItemsUncheckedUpdateWithoutLevelInput>
  }

  export type OrderItemsUpdateManyWithWhereWithoutLevelInput = {
    where: OrderItemsScalarWhereInput
    data: XOR<OrderItemsUpdateManyMutationInput, OrderItemsUncheckedUpdateManyWithoutLevelInput>
  }

  export type BacketItemsUpsertWithWhereUniqueWithoutLevelInput = {
    where: BacketItemsWhereUniqueInput
    update: XOR<BacketItemsUpdateWithoutLevelInput, BacketItemsUncheckedUpdateWithoutLevelInput>
    create: XOR<BacketItemsCreateWithoutLevelInput, BacketItemsUncheckedCreateWithoutLevelInput>
  }

  export type BacketItemsUpdateWithWhereUniqueWithoutLevelInput = {
    where: BacketItemsWhereUniqueInput
    data: XOR<BacketItemsUpdateWithoutLevelInput, BacketItemsUncheckedUpdateWithoutLevelInput>
  }

  export type BacketItemsUpdateManyWithWhereWithoutLevelInput = {
    where: BacketItemsScalarWhereInput
    data: XOR<BacketItemsUpdateManyMutationInput, BacketItemsUncheckedUpdateManyWithoutLevelInput>
  }

  export type ToolCreateWithoutProfessionsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Brand?: BrandCreateNestedOneWithoutToolInput
    Size?: SizeCreateNestedOneWithoutToolInput
    Capacity?: CapacityCreateNestedOneWithoutToolInput
    OrderItems?: OrderItemsCreateNestedManyWithoutToolInput
    BacketItems?: BacketItemsCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutProfessionsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    brand_id?: string | null
    size_id?: string | null
    capacity_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutToolInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutProfessionsInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutProfessionsInput, ToolUncheckedCreateWithoutProfessionsInput>
  }

  export type MasterSkillsCreateWithoutProfessionInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    Level?: LevelCreateNestedOneWithoutMasterSkillsInput
    Master: MasterCreateNestedOneWithoutMasterSkillsInput
  }

  export type MasterSkillsUncheckedCreateWithoutProfessionInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    level_id?: string | null
    master_id: string
  }

  export type MasterSkillsCreateOrConnectWithoutProfessionInput = {
    where: MasterSkillsWhereUniqueInput
    create: XOR<MasterSkillsCreateWithoutProfessionInput, MasterSkillsUncheckedCreateWithoutProfessionInput>
  }

  export type MasterSkillsCreateManyProfessionInputEnvelope = {
    data: MasterSkillsCreateManyProfessionInput | MasterSkillsCreateManyProfessionInput[]
    skipDuplicates?: boolean
  }

  export type LevelsProfessionsCreateWithoutProfessionInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    Level?: LevelCreateNestedOneWithoutLevelsProfessionsInput
  }

  export type LevelsProfessionsUncheckedCreateWithoutProfessionInput = {
    id?: string
    level_id?: string | null
    min_work_hours: number
    price_hourly: number
    price_daily: number
  }

  export type LevelsProfessionsCreateOrConnectWithoutProfessionInput = {
    where: LevelsProfessionsWhereUniqueInput
    create: XOR<LevelsProfessionsCreateWithoutProfessionInput, LevelsProfessionsUncheckedCreateWithoutProfessionInput>
  }

  export type LevelsProfessionsCreateManyProfessionInputEnvelope = {
    data: LevelsProfessionsCreateManyProfessionInput | LevelsProfessionsCreateManyProfessionInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemsCreateWithoutProfessionInput = {
    id?: string
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
    Order: OrderCreateNestedOneWithoutOrderItemsInput
    Tool?: ToolCreateNestedOneWithoutOrderItemsInput
    Level?: LevelCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemsUncheckedCreateWithoutProfessionInput = {
    id?: string
    order_id: string
    tool_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
  }

  export type OrderItemsCreateOrConnectWithoutProfessionInput = {
    where: OrderItemsWhereUniqueInput
    create: XOR<OrderItemsCreateWithoutProfessionInput, OrderItemsUncheckedCreateWithoutProfessionInput>
  }

  export type OrderItemsCreateManyProfessionInputEnvelope = {
    data: OrderItemsCreateManyProfessionInput | OrderItemsCreateManyProfessionInput[]
    skipDuplicates?: boolean
  }

  export type BacketItemsCreateWithoutPofessionInput = {
    id?: string
    count: number
    measure: $Enums.Measure
    time: number
    User: UserCreateNestedOneWithoutBacketItemsInput
    Tool?: ToolCreateNestedOneWithoutBacketItemsInput
    Level?: LevelCreateNestedOneWithoutBacketItemsInput
  }

  export type BacketItemsUncheckedCreateWithoutPofessionInput = {
    id?: string
    user_id: string
    tool_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
  }

  export type BacketItemsCreateOrConnectWithoutPofessionInput = {
    where: BacketItemsWhereUniqueInput
    create: XOR<BacketItemsCreateWithoutPofessionInput, BacketItemsUncheckedCreateWithoutPofessionInput>
  }

  export type BacketItemsCreateManyPofessionInputEnvelope = {
    data: BacketItemsCreateManyPofessionInput | BacketItemsCreateManyPofessionInput[]
    skipDuplicates?: boolean
  }

  export type ToolUpsertWithWhereUniqueWithoutProfessionsInput = {
    where: ToolWhereUniqueInput
    update: XOR<ToolUpdateWithoutProfessionsInput, ToolUncheckedUpdateWithoutProfessionsInput>
    create: XOR<ToolCreateWithoutProfessionsInput, ToolUncheckedCreateWithoutProfessionsInput>
  }

  export type ToolUpdateWithWhereUniqueWithoutProfessionsInput = {
    where: ToolWhereUniqueInput
    data: XOR<ToolUpdateWithoutProfessionsInput, ToolUncheckedUpdateWithoutProfessionsInput>
  }

  export type ToolUpdateManyWithWhereWithoutProfessionsInput = {
    where: ToolScalarWhereInput
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyWithoutProfessionsInput>
  }

  export type MasterSkillsUpsertWithWhereUniqueWithoutProfessionInput = {
    where: MasterSkillsWhereUniqueInput
    update: XOR<MasterSkillsUpdateWithoutProfessionInput, MasterSkillsUncheckedUpdateWithoutProfessionInput>
    create: XOR<MasterSkillsCreateWithoutProfessionInput, MasterSkillsUncheckedCreateWithoutProfessionInput>
  }

  export type MasterSkillsUpdateWithWhereUniqueWithoutProfessionInput = {
    where: MasterSkillsWhereUniqueInput
    data: XOR<MasterSkillsUpdateWithoutProfessionInput, MasterSkillsUncheckedUpdateWithoutProfessionInput>
  }

  export type MasterSkillsUpdateManyWithWhereWithoutProfessionInput = {
    where: MasterSkillsScalarWhereInput
    data: XOR<MasterSkillsUpdateManyMutationInput, MasterSkillsUncheckedUpdateManyWithoutProfessionInput>
  }

  export type LevelsProfessionsUpsertWithWhereUniqueWithoutProfessionInput = {
    where: LevelsProfessionsWhereUniqueInput
    update: XOR<LevelsProfessionsUpdateWithoutProfessionInput, LevelsProfessionsUncheckedUpdateWithoutProfessionInput>
    create: XOR<LevelsProfessionsCreateWithoutProfessionInput, LevelsProfessionsUncheckedCreateWithoutProfessionInput>
  }

  export type LevelsProfessionsUpdateWithWhereUniqueWithoutProfessionInput = {
    where: LevelsProfessionsWhereUniqueInput
    data: XOR<LevelsProfessionsUpdateWithoutProfessionInput, LevelsProfessionsUncheckedUpdateWithoutProfessionInput>
  }

  export type LevelsProfessionsUpdateManyWithWhereWithoutProfessionInput = {
    where: LevelsProfessionsScalarWhereInput
    data: XOR<LevelsProfessionsUpdateManyMutationInput, LevelsProfessionsUncheckedUpdateManyWithoutProfessionInput>
  }

  export type OrderItemsUpsertWithWhereUniqueWithoutProfessionInput = {
    where: OrderItemsWhereUniqueInput
    update: XOR<OrderItemsUpdateWithoutProfessionInput, OrderItemsUncheckedUpdateWithoutProfessionInput>
    create: XOR<OrderItemsCreateWithoutProfessionInput, OrderItemsUncheckedCreateWithoutProfessionInput>
  }

  export type OrderItemsUpdateWithWhereUniqueWithoutProfessionInput = {
    where: OrderItemsWhereUniqueInput
    data: XOR<OrderItemsUpdateWithoutProfessionInput, OrderItemsUncheckedUpdateWithoutProfessionInput>
  }

  export type OrderItemsUpdateManyWithWhereWithoutProfessionInput = {
    where: OrderItemsScalarWhereInput
    data: XOR<OrderItemsUpdateManyMutationInput, OrderItemsUncheckedUpdateManyWithoutProfessionInput>
  }

  export type BacketItemsUpsertWithWhereUniqueWithoutPofessionInput = {
    where: BacketItemsWhereUniqueInput
    update: XOR<BacketItemsUpdateWithoutPofessionInput, BacketItemsUncheckedUpdateWithoutPofessionInput>
    create: XOR<BacketItemsCreateWithoutPofessionInput, BacketItemsUncheckedCreateWithoutPofessionInput>
  }

  export type BacketItemsUpdateWithWhereUniqueWithoutPofessionInput = {
    where: BacketItemsWhereUniqueInput
    data: XOR<BacketItemsUpdateWithoutPofessionInput, BacketItemsUncheckedUpdateWithoutPofessionInput>
  }

  export type BacketItemsUpdateManyWithWhereWithoutPofessionInput = {
    where: BacketItemsScalarWhereInput
    data: XOR<BacketItemsUpdateManyMutationInput, BacketItemsUncheckedUpdateManyWithoutPofessionInput>
  }

  export type ProfessionCreateWithoutLevelsProfessionsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    Tools?: ToolCreateNestedManyWithoutProfessionsInput
    MasterSkills?: MasterSkillsCreateNestedManyWithoutProfessionInput
    OrderItems?: OrderItemsCreateNestedManyWithoutProfessionInput
    BacketItems?: BacketItemsCreateNestedManyWithoutPofessionInput
  }

  export type ProfessionUncheckedCreateWithoutLevelsProfessionsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    Tools?: ToolUncheckedCreateNestedManyWithoutProfessionsInput
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutProfessionInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutProfessionInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutPofessionInput
  }

  export type ProfessionCreateOrConnectWithoutLevelsProfessionsInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutLevelsProfessionsInput, ProfessionUncheckedCreateWithoutLevelsProfessionsInput>
  }

  export type LevelCreateWithoutLevelsProfessionsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    MasterSkills?: MasterSkillsCreateNestedManyWithoutLevelInput
    OrderItems?: OrderItemsCreateNestedManyWithoutLevelInput
    BacketItems?: BacketItemsCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutLevelsProfessionsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutLevelInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutLevelInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutLevelsProfessionsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutLevelsProfessionsInput, LevelUncheckedCreateWithoutLevelsProfessionsInput>
  }

  export type ProfessionUpsertWithoutLevelsProfessionsInput = {
    update: XOR<ProfessionUpdateWithoutLevelsProfessionsInput, ProfessionUncheckedUpdateWithoutLevelsProfessionsInput>
    create: XOR<ProfessionCreateWithoutLevelsProfessionsInput, ProfessionUncheckedCreateWithoutLevelsProfessionsInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutLevelsProfessionsInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutLevelsProfessionsInput, ProfessionUncheckedUpdateWithoutLevelsProfessionsInput>
  }

  export type ProfessionUpdateWithoutLevelsProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Tools?: ToolUpdateManyWithoutProfessionsNestedInput
    MasterSkills?: MasterSkillsUpdateManyWithoutProfessionNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutProfessionNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutPofessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutLevelsProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Tools?: ToolUncheckedUpdateManyWithoutProfessionsNestedInput
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutProfessionNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutProfessionNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutPofessionNestedInput
  }

  export type LevelUpsertWithoutLevelsProfessionsInput = {
    update: XOR<LevelUpdateWithoutLevelsProfessionsInput, LevelUncheckedUpdateWithoutLevelsProfessionsInput>
    create: XOR<LevelCreateWithoutLevelsProfessionsInput, LevelUncheckedCreateWithoutLevelsProfessionsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutLevelsProfessionsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutLevelsProfessionsInput, LevelUncheckedUpdateWithoutLevelsProfessionsInput>
  }

  export type LevelUpdateWithoutLevelsProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    MasterSkills?: MasterSkillsUpdateManyWithoutLevelNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutLevelNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutLevelsProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutLevelNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutLevelNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type MasterSkillsCreateWithoutMasterInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    Level?: LevelCreateNestedOneWithoutMasterSkillsInput
    Profession?: ProfessionCreateNestedOneWithoutMasterSkillsInput
  }

  export type MasterSkillsUncheckedCreateWithoutMasterInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    level_id?: string | null
    profession_id?: string | null
  }

  export type MasterSkillsCreateOrConnectWithoutMasterInput = {
    where: MasterSkillsWhereUniqueInput
    create: XOR<MasterSkillsCreateWithoutMasterInput, MasterSkillsUncheckedCreateWithoutMasterInput>
  }

  export type MasterSkillsCreateManyMasterInputEnvelope = {
    data: MasterSkillsCreateManyMasterInput | MasterSkillsCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutMastersInput = {
    id?: string
    total_sum: number
    location: JsonNullValueInput | InputJsonValue
    address: string
    dete: Date | string
    payment_type?: $Enums.PaymentType
    paid?: boolean
    status?: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutOrderInput
    OrderItems?: OrderItemsCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutMastersInput = {
    id?: string
    user_id: string
    total_sum: number
    location: JsonNullValueInput | InputJsonValue
    address: string
    dete: Date | string
    payment_type?: $Enums.PaymentType
    paid?: boolean
    status?: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt?: Date | string
    updatedAt?: Date | string
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutMastersInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutMastersInput, OrderUncheckedCreateWithoutMastersInput>
  }

  export type MasterRatingsCreateWithoutMasterInput = {
    id?: string
    star: number
    Comment: CommentCreateNestedOneWithoutMasterRatingsInput
  }

  export type MasterRatingsUncheckedCreateWithoutMasterInput = {
    id?: string
    star: number
    comment_id: string
  }

  export type MasterRatingsCreateOrConnectWithoutMasterInput = {
    where: MasterRatingsWhereUniqueInput
    create: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput>
  }

  export type MasterRatingsCreateManyMasterInputEnvelope = {
    data: MasterRatingsCreateManyMasterInput | MasterRatingsCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type MasterSkillsUpsertWithWhereUniqueWithoutMasterInput = {
    where: MasterSkillsWhereUniqueInput
    update: XOR<MasterSkillsUpdateWithoutMasterInput, MasterSkillsUncheckedUpdateWithoutMasterInput>
    create: XOR<MasterSkillsCreateWithoutMasterInput, MasterSkillsUncheckedCreateWithoutMasterInput>
  }

  export type MasterSkillsUpdateWithWhereUniqueWithoutMasterInput = {
    where: MasterSkillsWhereUniqueInput
    data: XOR<MasterSkillsUpdateWithoutMasterInput, MasterSkillsUncheckedUpdateWithoutMasterInput>
  }

  export type MasterSkillsUpdateManyWithWhereWithoutMasterInput = {
    where: MasterSkillsScalarWhereInput
    data: XOR<MasterSkillsUpdateManyMutationInput, MasterSkillsUncheckedUpdateManyWithoutMasterInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutMastersInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutMastersInput, OrderUncheckedUpdateWithoutMastersInput>
    create: XOR<OrderCreateWithoutMastersInput, OrderUncheckedCreateWithoutMastersInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutMastersInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutMastersInput, OrderUncheckedUpdateWithoutMastersInput>
  }

  export type OrderUpdateManyWithWhereWithoutMastersInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutMastersInput>
  }

  export type MasterRatingsUpsertWithWhereUniqueWithoutMasterInput = {
    where: MasterRatingsWhereUniqueInput
    update: XOR<MasterRatingsUpdateWithoutMasterInput, MasterRatingsUncheckedUpdateWithoutMasterInput>
    create: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput>
  }

  export type MasterRatingsUpdateWithWhereUniqueWithoutMasterInput = {
    where: MasterRatingsWhereUniqueInput
    data: XOR<MasterRatingsUpdateWithoutMasterInput, MasterRatingsUncheckedUpdateWithoutMasterInput>
  }

  export type MasterRatingsUpdateManyWithWhereWithoutMasterInput = {
    where: MasterRatingsScalarWhereInput
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyWithoutMasterInput>
  }

  export type MasterRatingsScalarWhereInput = {
    AND?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
    OR?: MasterRatingsScalarWhereInput[]
    NOT?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
    id?: StringFilter<"MasterRatings"> | string
    star?: FloatFilter<"MasterRatings"> | number
    master_id?: StringFilter<"MasterRatings"> | string
    comment_id?: StringFilter<"MasterRatings"> | string
  }

  export type LevelCreateWithoutMasterSkillsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    LevelsProfessions?: LevelsProfessionsCreateNestedManyWithoutLevelInput
    OrderItems?: OrderItemsCreateNestedManyWithoutLevelInput
    BacketItems?: BacketItemsCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutMasterSkillsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    LevelsProfessions?: LevelsProfessionsUncheckedCreateNestedManyWithoutLevelInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutLevelInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutMasterSkillsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutMasterSkillsInput, LevelUncheckedCreateWithoutMasterSkillsInput>
  }

  export type ProfessionCreateWithoutMasterSkillsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    Tools?: ToolCreateNestedManyWithoutProfessionsInput
    LevelsProfessions?: LevelsProfessionsCreateNestedManyWithoutProfessionInput
    OrderItems?: OrderItemsCreateNestedManyWithoutProfessionInput
    BacketItems?: BacketItemsCreateNestedManyWithoutPofessionInput
  }

  export type ProfessionUncheckedCreateWithoutMasterSkillsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    Tools?: ToolUncheckedCreateNestedManyWithoutProfessionsInput
    LevelsProfessions?: LevelsProfessionsUncheckedCreateNestedManyWithoutProfessionInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutProfessionInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutPofessionInput
  }

  export type ProfessionCreateOrConnectWithoutMasterSkillsInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutMasterSkillsInput, ProfessionUncheckedCreateWithoutMasterSkillsInput>
  }

  export type MasterCreateWithoutMasterSkillsInput = {
    id?: string
    full_name: string
    phone: string
    isActive: boolean
    year: Date | string
    image: string
    passport_image: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Orders?: OrderCreateNestedManyWithoutMastersInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateWithoutMasterSkillsInput = {
    id?: string
    full_name: string
    phone: string
    isActive: boolean
    year: Date | string
    image: string
    passport_image: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Orders?: OrderUncheckedCreateNestedManyWithoutMastersInput
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterCreateOrConnectWithoutMasterSkillsInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutMasterSkillsInput, MasterUncheckedCreateWithoutMasterSkillsInput>
  }

  export type LevelUpsertWithoutMasterSkillsInput = {
    update: XOR<LevelUpdateWithoutMasterSkillsInput, LevelUncheckedUpdateWithoutMasterSkillsInput>
    create: XOR<LevelCreateWithoutMasterSkillsInput, LevelUncheckedCreateWithoutMasterSkillsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutMasterSkillsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutMasterSkillsInput, LevelUncheckedUpdateWithoutMasterSkillsInput>
  }

  export type LevelUpdateWithoutMasterSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    LevelsProfessions?: LevelsProfessionsUpdateManyWithoutLevelNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutLevelNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutMasterSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    LevelsProfessions?: LevelsProfessionsUncheckedUpdateManyWithoutLevelNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutLevelNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type ProfessionUpsertWithoutMasterSkillsInput = {
    update: XOR<ProfessionUpdateWithoutMasterSkillsInput, ProfessionUncheckedUpdateWithoutMasterSkillsInput>
    create: XOR<ProfessionCreateWithoutMasterSkillsInput, ProfessionUncheckedCreateWithoutMasterSkillsInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutMasterSkillsInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutMasterSkillsInput, ProfessionUncheckedUpdateWithoutMasterSkillsInput>
  }

  export type ProfessionUpdateWithoutMasterSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Tools?: ToolUpdateManyWithoutProfessionsNestedInput
    LevelsProfessions?: LevelsProfessionsUpdateManyWithoutProfessionNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutProfessionNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutPofessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutMasterSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Tools?: ToolUncheckedUpdateManyWithoutProfessionsNestedInput
    LevelsProfessions?: LevelsProfessionsUncheckedUpdateManyWithoutProfessionNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutProfessionNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutPofessionNestedInput
  }

  export type MasterUpsertWithoutMasterSkillsInput = {
    update: XOR<MasterUpdateWithoutMasterSkillsInput, MasterUncheckedUpdateWithoutMasterSkillsInput>
    create: XOR<MasterCreateWithoutMasterSkillsInput, MasterUncheckedCreateWithoutMasterSkillsInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutMasterSkillsInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutMasterSkillsInput, MasterUncheckedUpdateWithoutMasterSkillsInput>
  }

  export type MasterUpdateWithoutMasterSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrderUpdateManyWithoutMastersNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateWithoutMasterSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrderUncheckedUpdateManyWithoutMastersNestedInput
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type UserCreateWithoutOrderInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Region?: RegionCreateNestedOneWithoutUsersInput
    Company?: CompanyCreateNestedOneWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    BacketItems?: BacketItemsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrderInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    region_id?: string | null
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Company?: CompanyUncheckedCreateNestedOneWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
  }

  export type MasterCreateWithoutOrdersInput = {
    id?: string
    full_name: string
    phone: string
    isActive: boolean
    year: Date | string
    image: string
    passport_image: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterSkills?: MasterSkillsCreateNestedManyWithoutMasterInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateWithoutOrdersInput = {
    id?: string
    full_name: string
    phone: string
    isActive: boolean
    year: Date | string
    image: string
    passport_image: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutMasterInput
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterCreateOrConnectWithoutOrdersInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutOrdersInput, MasterUncheckedCreateWithoutOrdersInput>
  }

  export type OrderItemsCreateWithoutOrderInput = {
    id?: string
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
    Tool?: ToolCreateNestedOneWithoutOrderItemsInput
    Profession?: ProfessionCreateNestedOneWithoutOrderItemsInput
    Level?: LevelCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemsUncheckedCreateWithoutOrderInput = {
    id?: string
    tool_id?: string | null
    profession_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
  }

  export type OrderItemsCreateOrConnectWithoutOrderInput = {
    where: OrderItemsWhereUniqueInput
    create: XOR<OrderItemsCreateWithoutOrderInput, OrderItemsUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemsCreateManyOrderInputEnvelope = {
    data: OrderItemsCreateManyOrderInput | OrderItemsCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrderInput = {
    update: XOR<UserUpdateWithoutOrderInput, UserUncheckedUpdateWithoutOrderInput>
    create: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrderInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrderInput, UserUncheckedUpdateWithoutOrderInput>
  }

  export type UserUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Region?: RegionUpdateOneWithoutUsersNestedInput
    Company?: CompanyUpdateOneWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    region_id?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Company?: CompanyUncheckedUpdateOneWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MasterUpsertWithWhereUniqueWithoutOrdersInput = {
    where: MasterWhereUniqueInput
    update: XOR<MasterUpdateWithoutOrdersInput, MasterUncheckedUpdateWithoutOrdersInput>
    create: XOR<MasterCreateWithoutOrdersInput, MasterUncheckedCreateWithoutOrdersInput>
  }

  export type MasterUpdateWithWhereUniqueWithoutOrdersInput = {
    where: MasterWhereUniqueInput
    data: XOR<MasterUpdateWithoutOrdersInput, MasterUncheckedUpdateWithoutOrdersInput>
  }

  export type MasterUpdateManyWithWhereWithoutOrdersInput = {
    where: MasterScalarWhereInput
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyWithoutOrdersInput>
  }

  export type MasterScalarWhereInput = {
    AND?: MasterScalarWhereInput | MasterScalarWhereInput[]
    OR?: MasterScalarWhereInput[]
    NOT?: MasterScalarWhereInput | MasterScalarWhereInput[]
    id?: StringFilter<"Master"> | string
    full_name?: StringFilter<"Master"> | string
    phone?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    year?: DateTimeFilter<"Master"> | Date | string
    image?: StringFilter<"Master"> | string
    passport_image?: StringFilter<"Master"> | string
    about?: StringFilter<"Master"> | string
    createdAt?: DateTimeFilter<"Master"> | Date | string
    updatedAt?: DateTimeFilter<"Master"> | Date | string
  }

  export type OrderItemsUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemsWhereUniqueInput
    update: XOR<OrderItemsUpdateWithoutOrderInput, OrderItemsUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemsCreateWithoutOrderInput, OrderItemsUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemsUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemsWhereUniqueInput
    data: XOR<OrderItemsUpdateWithoutOrderInput, OrderItemsUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemsUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemsScalarWhereInput
    data: XOR<OrderItemsUpdateManyMutationInput, OrderItemsUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderCreateWithoutOrderItemsInput = {
    id?: string
    total_sum: number
    location: JsonNullValueInput | InputJsonValue
    address: string
    dete: Date | string
    payment_type?: $Enums.PaymentType
    paid?: boolean
    status?: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutOrderInput
    Masters?: MasterCreateNestedManyWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    user_id: string
    total_sum: number
    location: JsonNullValueInput | InputJsonValue
    address: string
    dete: Date | string
    payment_type?: $Enums.PaymentType
    paid?: boolean
    status?: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Masters?: MasterUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type OrderCreateOrConnectWithoutOrderItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
  }

  export type ToolCreateWithoutOrderItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Brand?: BrandCreateNestedOneWithoutToolInput
    Size?: SizeCreateNestedOneWithoutToolInput
    Capacity?: CapacityCreateNestedOneWithoutToolInput
    Professions?: ProfessionCreateNestedManyWithoutToolsInput
    BacketItems?: BacketItemsCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    brand_id?: string | null
    size_id?: string | null
    capacity_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutOrderItemsInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutOrderItemsInput, ToolUncheckedCreateWithoutOrderItemsInput>
  }

  export type ProfessionCreateWithoutOrderItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    Tools?: ToolCreateNestedManyWithoutProfessionsInput
    MasterSkills?: MasterSkillsCreateNestedManyWithoutProfessionInput
    LevelsProfessions?: LevelsProfessionsCreateNestedManyWithoutProfessionInput
    BacketItems?: BacketItemsCreateNestedManyWithoutPofessionInput
  }

  export type ProfessionUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    Tools?: ToolUncheckedCreateNestedManyWithoutProfessionsInput
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutProfessionInput
    LevelsProfessions?: LevelsProfessionsUncheckedCreateNestedManyWithoutProfessionInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutPofessionInput
  }

  export type ProfessionCreateOrConnectWithoutOrderItemsInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutOrderItemsInput, ProfessionUncheckedCreateWithoutOrderItemsInput>
  }

  export type LevelCreateWithoutOrderItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    MasterSkills?: MasterSkillsCreateNestedManyWithoutLevelInput
    LevelsProfessions?: LevelsProfessionsCreateNestedManyWithoutLevelInput
    BacketItems?: BacketItemsCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutLevelInput
    LevelsProfessions?: LevelsProfessionsUncheckedCreateNestedManyWithoutLevelInput
    BacketItems?: BacketItemsUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutOrderItemsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutOrderItemsInput, LevelUncheckedCreateWithoutOrderItemsInput>
  }

  export type OrderUpsertWithoutOrderItemsInput = {
    update: XOR<OrderUpdateWithoutOrderItemsInput, OrderUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderItemsInput, OrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type OrderUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutOrderNestedInput
    Masters?: MasterUpdateManyWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Masters?: MasterUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ToolUpsertWithoutOrderItemsInput = {
    update: XOR<ToolUpdateWithoutOrderItemsInput, ToolUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<ToolCreateWithoutOrderItemsInput, ToolUncheckedCreateWithoutOrderItemsInput>
    where?: ToolWhereInput
  }

  export type ToolUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: ToolWhereInput
    data: XOR<ToolUpdateWithoutOrderItemsInput, ToolUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ToolUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Brand?: BrandUpdateOneWithoutToolNestedInput
    Size?: SizeUpdateOneWithoutToolNestedInput
    Capacity?: CapacityUpdateOneWithoutToolNestedInput
    Professions?: ProfessionUpdateManyWithoutToolsNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brand_id?: NullableStringFieldUpdateOperationsInput | string | null
    size_id?: NullableStringFieldUpdateOperationsInput | string | null
    capacity_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ProfessionUpsertWithoutOrderItemsInput = {
    update: XOR<ProfessionUpdateWithoutOrderItemsInput, ProfessionUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<ProfessionCreateWithoutOrderItemsInput, ProfessionUncheckedCreateWithoutOrderItemsInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutOrderItemsInput, ProfessionUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProfessionUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Tools?: ToolUpdateManyWithoutProfessionsNestedInput
    MasterSkills?: MasterSkillsUpdateManyWithoutProfessionNestedInput
    LevelsProfessions?: LevelsProfessionsUpdateManyWithoutProfessionNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutPofessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Tools?: ToolUncheckedUpdateManyWithoutProfessionsNestedInput
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutProfessionNestedInput
    LevelsProfessions?: LevelsProfessionsUncheckedUpdateManyWithoutProfessionNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutPofessionNestedInput
  }

  export type LevelUpsertWithoutOrderItemsInput = {
    update: XOR<LevelUpdateWithoutOrderItemsInput, LevelUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<LevelCreateWithoutOrderItemsInput, LevelUncheckedCreateWithoutOrderItemsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutOrderItemsInput, LevelUncheckedUpdateWithoutOrderItemsInput>
  }

  export type LevelUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    MasterSkills?: MasterSkillsUpdateManyWithoutLevelNestedInput
    LevelsProfessions?: LevelsProfessionsUpdateManyWithoutLevelNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutLevelNestedInput
    LevelsProfessions?: LevelsProfessionsUncheckedUpdateManyWithoutLevelNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type UserCreateWithoutBacketItemsInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Region?: RegionCreateNestedOneWithoutUsersInput
    Company?: CompanyCreateNestedOneWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    Order?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBacketItemsInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    region_id?: string | null
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Company?: CompanyUncheckedCreateNestedOneWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Order?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBacketItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBacketItemsInput, UserUncheckedCreateWithoutBacketItemsInput>
  }

  export type ProfessionCreateWithoutBacketItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    Tools?: ToolCreateNestedManyWithoutProfessionsInput
    MasterSkills?: MasterSkillsCreateNestedManyWithoutProfessionInput
    LevelsProfessions?: LevelsProfessionsCreateNestedManyWithoutProfessionInput
    OrderItems?: OrderItemsCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUncheckedCreateWithoutBacketItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    image: string
    isActive: boolean
    Tools?: ToolUncheckedCreateNestedManyWithoutProfessionsInput
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutProfessionInput
    LevelsProfessions?: LevelsProfessionsUncheckedCreateNestedManyWithoutProfessionInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionCreateOrConnectWithoutBacketItemsInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutBacketItemsInput, ProfessionUncheckedCreateWithoutBacketItemsInput>
  }

  export type ToolCreateWithoutBacketItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Brand?: BrandCreateNestedOneWithoutToolInput
    Size?: SizeCreateNestedOneWithoutToolInput
    Capacity?: CapacityCreateNestedOneWithoutToolInput
    Professions?: ProfessionCreateNestedManyWithoutToolsInput
    OrderItems?: OrderItemsCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutBacketItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    brand_id?: string | null
    size_id?: string | null
    capacity_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutBacketItemsInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutBacketItemsInput, ToolUncheckedCreateWithoutBacketItemsInput>
  }

  export type LevelCreateWithoutBacketItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    MasterSkills?: MasterSkillsCreateNestedManyWithoutLevelInput
    LevelsProfessions?: LevelsProfessionsCreateNestedManyWithoutLevelInput
    OrderItems?: OrderItemsCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutBacketItemsInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutLevelInput
    LevelsProfessions?: LevelsProfessionsUncheckedCreateNestedManyWithoutLevelInput
    OrderItems?: OrderItemsUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutBacketItemsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutBacketItemsInput, LevelUncheckedCreateWithoutBacketItemsInput>
  }

  export type UserUpsertWithoutBacketItemsInput = {
    update: XOR<UserUpdateWithoutBacketItemsInput, UserUncheckedUpdateWithoutBacketItemsInput>
    create: XOR<UserCreateWithoutBacketItemsInput, UserUncheckedCreateWithoutBacketItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBacketItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBacketItemsInput, UserUncheckedUpdateWithoutBacketItemsInput>
  }

  export type UserUpdateWithoutBacketItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Region?: RegionUpdateOneWithoutUsersNestedInput
    Company?: CompanyUpdateOneWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    Order?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBacketItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    region_id?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Company?: CompanyUncheckedUpdateOneWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Order?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProfessionUpsertWithoutBacketItemsInput = {
    update: XOR<ProfessionUpdateWithoutBacketItemsInput, ProfessionUncheckedUpdateWithoutBacketItemsInput>
    create: XOR<ProfessionCreateWithoutBacketItemsInput, ProfessionUncheckedCreateWithoutBacketItemsInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutBacketItemsInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutBacketItemsInput, ProfessionUncheckedUpdateWithoutBacketItemsInput>
  }

  export type ProfessionUpdateWithoutBacketItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Tools?: ToolUpdateManyWithoutProfessionsNestedInput
    MasterSkills?: MasterSkillsUpdateManyWithoutProfessionNestedInput
    LevelsProfessions?: LevelsProfessionsUpdateManyWithoutProfessionNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutBacketItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Tools?: ToolUncheckedUpdateManyWithoutProfessionsNestedInput
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutProfessionNestedInput
    LevelsProfessions?: LevelsProfessionsUncheckedUpdateManyWithoutProfessionNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutProfessionNestedInput
  }

  export type ToolUpsertWithoutBacketItemsInput = {
    update: XOR<ToolUpdateWithoutBacketItemsInput, ToolUncheckedUpdateWithoutBacketItemsInput>
    create: XOR<ToolCreateWithoutBacketItemsInput, ToolUncheckedCreateWithoutBacketItemsInput>
    where?: ToolWhereInput
  }

  export type ToolUpdateToOneWithWhereWithoutBacketItemsInput = {
    where?: ToolWhereInput
    data: XOR<ToolUpdateWithoutBacketItemsInput, ToolUncheckedUpdateWithoutBacketItemsInput>
  }

  export type ToolUpdateWithoutBacketItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Brand?: BrandUpdateOneWithoutToolNestedInput
    Size?: SizeUpdateOneWithoutToolNestedInput
    Capacity?: CapacityUpdateOneWithoutToolNestedInput
    Professions?: ProfessionUpdateManyWithoutToolsNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutBacketItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brand_id?: NullableStringFieldUpdateOperationsInput | string | null
    size_id?: NullableStringFieldUpdateOperationsInput | string | null
    capacity_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type LevelUpsertWithoutBacketItemsInput = {
    update: XOR<LevelUpdateWithoutBacketItemsInput, LevelUncheckedUpdateWithoutBacketItemsInput>
    create: XOR<LevelCreateWithoutBacketItemsInput, LevelUncheckedCreateWithoutBacketItemsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutBacketItemsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutBacketItemsInput, LevelUncheckedUpdateWithoutBacketItemsInput>
  }

  export type LevelUpdateWithoutBacketItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    MasterSkills?: MasterSkillsUpdateManyWithoutLevelNestedInput
    LevelsProfessions?: LevelsProfessionsUpdateManyWithoutLevelNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutBacketItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutLevelNestedInput
    LevelsProfessions?: LevelsProfessionsUncheckedUpdateManyWithoutLevelNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type MasterRatingsCreateWithoutCommentInput = {
    id?: string
    star: number
    Master: MasterCreateNestedOneWithoutMasterRatingsInput
  }

  export type MasterRatingsUncheckedCreateWithoutCommentInput = {
    id?: string
    star: number
    master_id: string
  }

  export type MasterRatingsCreateOrConnectWithoutCommentInput = {
    where: MasterRatingsWhereUniqueInput
    create: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput>
  }

  export type MasterRatingsCreateManyCommentInputEnvelope = {
    data: MasterRatingsCreateManyCommentInput | MasterRatingsCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type MasterRatingsUpsertWithWhereUniqueWithoutCommentInput = {
    where: MasterRatingsWhereUniqueInput
    update: XOR<MasterRatingsUpdateWithoutCommentInput, MasterRatingsUncheckedUpdateWithoutCommentInput>
    create: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput>
  }

  export type MasterRatingsUpdateWithWhereUniqueWithoutCommentInput = {
    where: MasterRatingsWhereUniqueInput
    data: XOR<MasterRatingsUpdateWithoutCommentInput, MasterRatingsUncheckedUpdateWithoutCommentInput>
  }

  export type MasterRatingsUpdateManyWithWhereWithoutCommentInput = {
    where: MasterRatingsScalarWhereInput
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyWithoutCommentInput>
  }

  export type MasterCreateWithoutMasterRatingsInput = {
    id?: string
    full_name: string
    phone: string
    isActive: boolean
    year: Date | string
    image: string
    passport_image: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterSkills?: MasterSkillsCreateNestedManyWithoutMasterInput
    Orders?: OrderCreateNestedManyWithoutMastersInput
  }

  export type MasterUncheckedCreateWithoutMasterRatingsInput = {
    id?: string
    full_name: string
    phone: string
    isActive: boolean
    year: Date | string
    image: string
    passport_image: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterSkills?: MasterSkillsUncheckedCreateNestedManyWithoutMasterInput
    Orders?: OrderUncheckedCreateNestedManyWithoutMastersInput
  }

  export type MasterCreateOrConnectWithoutMasterRatingsInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutMasterRatingsInput, MasterUncheckedCreateWithoutMasterRatingsInput>
  }

  export type CommentCreateWithoutMasterRatingsInput = {
    id?: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUncheckedCreateWithoutMasterRatingsInput = {
    id?: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutMasterRatingsInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
  }

  export type MasterUpsertWithoutMasterRatingsInput = {
    update: XOR<MasterUpdateWithoutMasterRatingsInput, MasterUncheckedUpdateWithoutMasterRatingsInput>
    create: XOR<MasterCreateWithoutMasterRatingsInput, MasterUncheckedCreateWithoutMasterRatingsInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutMasterRatingsInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutMasterRatingsInput, MasterUncheckedUpdateWithoutMasterRatingsInput>
  }

  export type MasterUpdateWithoutMasterRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterSkills?: MasterSkillsUpdateManyWithoutMasterNestedInput
    Orders?: OrderUpdateManyWithoutMastersNestedInput
  }

  export type MasterUncheckedUpdateWithoutMasterRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutMasterNestedInput
    Orders?: OrderUncheckedUpdateManyWithoutMastersNestedInput
  }

  export type CommentUpsertWithoutMasterRatingsInput = {
    update: XOR<CommentUpdateWithoutMasterRatingsInput, CommentUncheckedUpdateWithoutMasterRatingsInput>
    create: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutMasterRatingsInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutMasterRatingsInput, CommentUncheckedUpdateWithoutMasterRatingsInput>
  }

  export type CommentUpdateWithoutMasterRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateWithoutMasterRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyRegionInput = {
    id?: string
    full_name: string
    phone: string
    password: string
    status?: boolean
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Company?: CompanyUpdateOneWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    Order?: OrderUpdateManyWithoutUserNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Company?: CompanyUncheckedUpdateOneWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Order?: OrderUncheckedUpdateManyWithoutUserNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    ip_address: string
    date?: Date | string
    device: JsonNullValueInput | InputJsonValue
  }

  export type OrderCreateManyUserInput = {
    id?: string
    total_sum: number
    location: JsonNullValueInput | InputJsonValue
    address: string
    dete: Date | string
    payment_type?: $Enums.PaymentType
    paid?: boolean
    status?: $Enums.StatusOrder
    with_delivery: boolean
    comment_delivery: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BacketItemsCreateManyUserInput = {
    id?: string
    profession_id?: string | null
    tool_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: JsonNullValueInput | InputJsonValue
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: JsonNullValueInput | InputJsonValue
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: JsonNullValueInput | InputJsonValue
  }

  export type OrderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Masters?: MasterUpdateManyWithoutOrdersNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Masters?: MasterUncheckedUpdateManyWithoutOrdersNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BacketItemsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    Pofession?: ProfessionUpdateOneWithoutBacketItemsNestedInput
    Tool?: ToolUpdateOneWithoutBacketItemsNestedInput
    Level?: LevelUpdateOneWithoutBacketItemsNestedInput
  }

  export type BacketItemsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type BacketItemsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type ToolCreateManyBrandInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    size_id?: string | null
    capacity_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToolUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Size?: SizeUpdateOneWithoutToolNestedInput
    Capacity?: CapacityUpdateOneWithoutToolNestedInput
    Professions?: ProfessionUpdateManyWithoutToolsNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutToolNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    size_id?: NullableStringFieldUpdateOperationsInput | string | null
    capacity_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutToolNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    size_id?: NullableStringFieldUpdateOperationsInput | string | null
    capacity_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToolCreateManySizeInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    brand_id?: string | null
    capacity_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToolUpdateWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Brand?: BrandUpdateOneWithoutToolNestedInput
    Capacity?: CapacityUpdateOneWithoutToolNestedInput
    Professions?: ProfessionUpdateManyWithoutToolsNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutToolNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brand_id?: NullableStringFieldUpdateOperationsInput | string | null
    capacity_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutToolNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateManyWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brand_id?: NullableStringFieldUpdateOperationsInput | string | null
    capacity_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToolCreateManyCapacityInput = {
    id?: string
    name_uz: string
    name_ru: string
    name_en: string
    description_uz: string
    description_ru: string
    description_en: string
    price: number
    count: number
    code: string
    brand_id?: string | null
    size_id?: string | null
    isActive: boolean
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToolUpdateWithoutCapacityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Brand?: BrandUpdateOneWithoutToolNestedInput
    Size?: SizeUpdateOneWithoutToolNestedInput
    Professions?: ProfessionUpdateManyWithoutToolsNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutToolNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutCapacityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brand_id?: NullableStringFieldUpdateOperationsInput | string | null
    size_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutToolNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateManyWithoutCapacityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brand_id?: NullableStringFieldUpdateOperationsInput | string | null
    size_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemsCreateManyToolInput = {
    id?: string
    order_id: string
    profession_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
  }

  export type BacketItemsCreateManyToolInput = {
    id?: string
    user_id: string
    profession_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
  }

  export type ProfessionUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterSkills?: MasterSkillsUpdateManyWithoutProfessionNestedInput
    LevelsProfessions?: LevelsProfessionsUpdateManyWithoutProfessionNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutProfessionNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutPofessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutProfessionNestedInput
    LevelsProfessions?: LevelsProfessionsUncheckedUpdateManyWithoutProfessionNestedInput
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutProfessionNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutPofessionNestedInput
  }

  export type ProfessionUncheckedUpdateManyWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderItemsUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
    Order?: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
    Profession?: ProfessionUpdateOneWithoutOrderItemsNestedInput
    Level?: LevelUpdateOneWithoutOrderItemsNestedInput
  }

  export type OrderItemsUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_id?: StringFieldUpdateOperationsInput | string
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemsUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_id?: StringFieldUpdateOperationsInput | string
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type BacketItemsUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutBacketItemsNestedInput
    Pofession?: ProfessionUpdateOneWithoutBacketItemsNestedInput
    Level?: LevelUpdateOneWithoutBacketItemsNestedInput
  }

  export type BacketItemsUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type BacketItemsUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type MasterSkillsCreateManyLevelInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    profession_id?: string | null
    master_id: string
  }

  export type LevelsProfessionsCreateManyLevelInput = {
    id?: string
    profession_id: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
  }

  export type OrderItemsCreateManyLevelInput = {
    id?: string
    order_id: string
    tool_id?: string | null
    profession_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
  }

  export type BacketItemsCreateManyLevelInput = {
    id?: string
    user_id: string
    profession_id?: string | null
    tool_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
  }

  export type MasterSkillsUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    Profession?: ProfessionUpdateOneWithoutMasterSkillsNestedInput
    Master?: MasterUpdateOneRequiredWithoutMasterSkillsNestedInput
  }

  export type MasterSkillsUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    master_id?: StringFieldUpdateOperationsInput | string
  }

  export type MasterSkillsUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    master_id?: StringFieldUpdateOperationsInput | string
  }

  export type LevelsProfessionsUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    Profession?: ProfessionUpdateOneRequiredWithoutLevelsProfessionsNestedInput
  }

  export type LevelsProfessionsUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    profession_id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
  }

  export type LevelsProfessionsUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    profession_id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemsUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
    Order?: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
    Tool?: ToolUpdateOneWithoutOrderItemsNestedInput
    Profession?: ProfessionUpdateOneWithoutOrderItemsNestedInput
  }

  export type OrderItemsUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_id?: StringFieldUpdateOperationsInput | string
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemsUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_id?: StringFieldUpdateOperationsInput | string
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type BacketItemsUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutBacketItemsNestedInput
    Pofession?: ProfessionUpdateOneWithoutBacketItemsNestedInput
    Tool?: ToolUpdateOneWithoutBacketItemsNestedInput
  }

  export type BacketItemsUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type BacketItemsUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type MasterSkillsCreateManyProfessionInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    level_id?: string | null
    master_id: string
  }

  export type LevelsProfessionsCreateManyProfessionInput = {
    id?: string
    level_id?: string | null
    min_work_hours: number
    price_hourly: number
    price_daily: number
  }

  export type OrderItemsCreateManyProfessionInput = {
    id?: string
    order_id: string
    tool_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
  }

  export type BacketItemsCreateManyPofessionInput = {
    id?: string
    user_id: string
    tool_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
  }

  export type ToolUpdateWithoutProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Brand?: BrandUpdateOneWithoutToolNestedInput
    Size?: SizeUpdateOneWithoutToolNestedInput
    Capacity?: CapacityUpdateOneWithoutToolNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutToolNestedInput
    BacketItems?: BacketItemsUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brand_id?: NullableStringFieldUpdateOperationsInput | string | null
    size_id?: NullableStringFieldUpdateOperationsInput | string | null
    capacity_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutToolNestedInput
    BacketItems?: BacketItemsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateManyWithoutProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_uz?: StringFieldUpdateOperationsInput | string
    name_ru?: StringFieldUpdateOperationsInput | string
    name_en?: StringFieldUpdateOperationsInput | string
    description_uz?: StringFieldUpdateOperationsInput | string
    description_ru?: StringFieldUpdateOperationsInput | string
    description_en?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brand_id?: NullableStringFieldUpdateOperationsInput | string | null
    size_id?: NullableStringFieldUpdateOperationsInput | string | null
    capacity_id?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterSkillsUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    Level?: LevelUpdateOneWithoutMasterSkillsNestedInput
    Master?: MasterUpdateOneRequiredWithoutMasterSkillsNestedInput
  }

  export type MasterSkillsUncheckedUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    master_id?: StringFieldUpdateOperationsInput | string
  }

  export type MasterSkillsUncheckedUpdateManyWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    master_id?: StringFieldUpdateOperationsInput | string
  }

  export type LevelsProfessionsUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    Level?: LevelUpdateOneWithoutLevelsProfessionsNestedInput
  }

  export type LevelsProfessionsUncheckedUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
  }

  export type LevelsProfessionsUncheckedUpdateManyWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemsUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
    Order?: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
    Tool?: ToolUpdateOneWithoutOrderItemsNestedInput
    Level?: LevelUpdateOneWithoutOrderItemsNestedInput
  }

  export type OrderItemsUncheckedUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_id?: StringFieldUpdateOperationsInput | string
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemsUncheckedUpdateManyWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_id?: StringFieldUpdateOperationsInput | string
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type BacketItemsUpdateWithoutPofessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutBacketItemsNestedInput
    Tool?: ToolUpdateOneWithoutBacketItemsNestedInput
    Level?: LevelUpdateOneWithoutBacketItemsNestedInput
  }

  export type BacketItemsUncheckedUpdateWithoutPofessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type BacketItemsUncheckedUpdateManyWithoutPofessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
  }

  export type MasterSkillsCreateManyMasterInput = {
    id?: string
    min_work_hours: number
    price_hourly: number
    price_daily: number
    experience: number
    level_id?: string | null
    profession_id?: string | null
  }

  export type MasterRatingsCreateManyMasterInput = {
    id?: string
    star: number
    comment_id: string
  }

  export type MasterSkillsUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    Level?: LevelUpdateOneWithoutMasterSkillsNestedInput
    Profession?: ProfessionUpdateOneWithoutMasterSkillsNestedInput
  }

  export type MasterSkillsUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MasterSkillsUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    min_work_hours?: IntFieldUpdateOperationsInput | number
    price_hourly?: FloatFieldUpdateOperationsInput | number
    price_daily?: FloatFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderUpdateWithoutMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutOrderNestedInput
    OrderItems?: OrderItemsUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    OrderItems?: OrderItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    total_sum?: FloatFieldUpdateOperationsInput | number
    location?: JsonNullValueInput | InputJsonValue
    address?: StringFieldUpdateOperationsInput | string
    dete?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    paid?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusOrderFieldUpdateOperationsInput | $Enums.StatusOrder
    with_delivery?: BoolFieldUpdateOperationsInput | boolean
    comment_delivery?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterRatingsUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    Comment?: CommentUpdateOneRequiredWithoutMasterRatingsNestedInput
  }

  export type MasterRatingsUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    comment_id?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    comment_id?: StringFieldUpdateOperationsInput | string
  }

  export type OrderItemsCreateManyOrderInput = {
    id?: string
    tool_id?: string | null
    profession_id?: string | null
    level_id?: string | null
    count: number
    measure: $Enums.Measure
    time: number
    total_sum: number
  }

  export type MasterUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterSkills?: MasterSkillsUpdateManyWithoutMasterNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterSkills?: MasterSkillsUncheckedUpdateManyWithoutMasterNestedInput
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateManyWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    passport_image?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemsUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
    Tool?: ToolUpdateOneWithoutOrderItemsNestedInput
    Profession?: ProfessionUpdateOneWithoutOrderItemsNestedInput
    Level?: LevelUpdateOneWithoutOrderItemsNestedInput
  }

  export type OrderItemsUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemsUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    tool_id?: NullableStringFieldUpdateOperationsInput | string | null
    profession_id?: NullableStringFieldUpdateOperationsInput | string | null
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    measure?: EnumMeasureFieldUpdateOperationsInput | $Enums.Measure
    time?: IntFieldUpdateOperationsInput | number
    total_sum?: FloatFieldUpdateOperationsInput | number
  }

  export type MasterRatingsCreateManyCommentInput = {
    id?: string
    star: number
    master_id: string
  }

  export type MasterRatingsUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    Master?: MasterUpdateOneRequiredWithoutMasterRatingsNestedInput
  }

  export type MasterRatingsUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    master_id?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsUncheckedUpdateManyWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    master_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}